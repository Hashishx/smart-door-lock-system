
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004956  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013e  00800060  00004956  000049ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  0080019e  0080019e  00004b28  2**0
                  ALLOC
  3 .stab         00003c18  00000000  00000000  00004b28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000134f  00000000  00000000  00008740  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b988  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c873  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d620  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d780  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000da0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e1db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 f6 16 	jmp	0x2dec	; 0x2dec <__vector_4>
      14:	0c 94 5d 16 	jmp	0x2cba	; 0x2cba <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__vector_9>
      28:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <__vector_10>
      2c:	0c 94 f7 15 	jmp	0x2bee	; 0x2bee <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	f9 e4       	ldi	r31, 0x49	; 73
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3b       	cpi	r26, 0xB8	; 184
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a4 09 	call	0x1348	; 0x1348 <main>
      8a:	0c 94 a9 24 	jmp	0x4952	; 0x4952 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2d 24 	jmp	0x485a	; 0x485a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e8       	ldi	r26, 0x8D	; 141
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 49 24 	jmp	0x4892	; 0x4892 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 39 24 	jmp	0x4872	; 0x4872 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 55 24 	jmp	0x48aa	; 0x48aa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 39 24 	jmp	0x4872	; 0x4872 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 55 24 	jmp	0x48aa	; 0x48aa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2d 24 	jmp	0x485a	; 0x485a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e8       	ldi	r24, 0x8D	; 141
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 49 24 	jmp	0x4892	; 0x4892 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 39 24 	jmp	0x4872	; 0x4872 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 55 24 	jmp	0x48aa	; 0x48aa <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 39 24 	jmp	0x4872	; 0x4872 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 55 24 	jmp	0x48aa	; 0x48aa <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 39 24 	jmp	0x4872	; 0x4872 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 55 24 	jmp	0x48aa	; 0x48aa <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 3d 24 	jmp	0x487a	; 0x487a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 59 24 	jmp	0x48b2	; 0x48b2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <get_Passwords>:
	}
}
*/

/* Function to get 2 passwords from user */
void get_Passwords(void) {
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	cc 55       	subi	r28, 0x5C	; 92
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	LCD_displayString("Plz enter pass:");
     b60:	80 e6       	ldi	r24, 0x60	; 96
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 14 22 	call	0x4428	; 0x4428 <LCD_displayString>
	LCD_moveCursor(1, 0);
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	0e 94 3d 22 	call	0x447a	; 0x447a <LCD_moveCursor>
	for (int i = 0; i < 5; i++) {
     b70:	fe 01       	movw	r30, r28
     b72:	e5 5a       	subi	r30, 0xA5	; 165
     b74:	ff 4f       	sbci	r31, 0xFF	; 255
     b76:	11 82       	std	Z+1, r1	; 0x01
     b78:	10 82       	st	Z, r1
     b7a:	d9 c0       	rjmp	.+434    	; 0xd2e <get_Passwords+0x1e8>
		/* Get the pressed key number, if any switch pressed for more than 500 ms it will considered more than one press */
		key = KEYPAD_getPressedKey();
     b7c:	0e 94 0f 1c 	call	0x381e	; 0x381e <KEYPAD_getPressedKey>
     b80:	80 93 b2 01 	sts	0x01B2, r24
		pass1[i] = key;
     b84:	fe 01       	movw	r30, r28
     b86:	e5 5a       	subi	r30, 0xA5	; 165
     b88:	ff 4f       	sbci	r31, 0xFF	; 255
     b8a:	80 81       	ld	r24, Z
     b8c:	91 81       	ldd	r25, Z+1	; 0x01
     b8e:	20 91 b2 01 	lds	r18, 0x01B2
     b92:	fc 01       	movw	r30, r24
     b94:	ed 54       	subi	r30, 0x4D	; 77
     b96:	fe 4f       	sbci	r31, 0xFE	; 254
     b98:	20 83       	st	Z, r18
		if ((key <= 9) && (key >= 0)) {
     b9a:	80 91 b2 01 	lds	r24, 0x01B2
     b9e:	8a 30       	cpi	r24, 0x0A	; 10
     ba0:	20 f4       	brcc	.+8      	; 0xbaa <get_Passwords+0x64>
			LCD_displayCharacter('*'); /* display the pressed keypad switch */
     ba2:	8a e2       	ldi	r24, 0x2A	; 42
     ba4:	0e 94 25 20 	call	0x404a	; 0x404a <LCD_displayCharacter>
     ba8:	03 c0       	rjmp	.+6      	; 0xbb0 <get_Passwords+0x6a>
		} else {
			LCD_displayCharacter('*'); /* display the pressed keypad switch */
     baa:	8a e2       	ldi	r24, 0x2A	; 42
     bac:	0e 94 25 20 	call	0x404a	; 0x404a <LCD_displayCharacter>
     bb0:	fe 01       	movw	r30, r28
     bb2:	ef 5a       	subi	r30, 0xAF	; 175
     bb4:	ff 4f       	sbci	r31, 0xFF	; 255
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	aa ef       	ldi	r26, 0xFA	; 250
     bbc:	b3 e4       	ldi	r27, 0x43	; 67
     bbe:	80 83       	st	Z, r24
     bc0:	91 83       	std	Z+1, r25	; 0x01
     bc2:	a2 83       	std	Z+2, r26	; 0x02
     bc4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bc6:	8e 01       	movw	r16, r28
     bc8:	03 5b       	subi	r16, 0xB3	; 179
     bca:	1f 4f       	sbci	r17, 0xFF	; 255
     bcc:	fe 01       	movw	r30, r28
     bce:	ef 5a       	subi	r30, 0xAF	; 175
     bd0:	ff 4f       	sbci	r31, 0xFF	; 255
     bd2:	60 81       	ld	r22, Z
     bd4:	71 81       	ldd	r23, Z+1	; 0x01
     bd6:	82 81       	ldd	r24, Z+2	; 0x02
     bd8:	93 81       	ldd	r25, Z+3	; 0x03
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	4a ef       	ldi	r20, 0xFA	; 250
     be0:	54 e4       	ldi	r21, 0x44	; 68
     be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be6:	dc 01       	movw	r26, r24
     be8:	cb 01       	movw	r24, r22
     bea:	f8 01       	movw	r30, r16
     bec:	80 83       	st	Z, r24
     bee:	91 83       	std	Z+1, r25	; 0x01
     bf0:	a2 83       	std	Z+2, r26	; 0x02
     bf2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bf4:	fe 01       	movw	r30, r28
     bf6:	e3 5b       	subi	r30, 0xB3	; 179
     bf8:	ff 4f       	sbci	r31, 0xFF	; 255
     bfa:	60 81       	ld	r22, Z
     bfc:	71 81       	ldd	r23, Z+1	; 0x01
     bfe:	82 81       	ldd	r24, Z+2	; 0x02
     c00:	93 81       	ldd	r25, Z+3	; 0x03
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	40 e8       	ldi	r20, 0x80	; 128
     c08:	5f e3       	ldi	r21, 0x3F	; 63
     c0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c0e:	88 23       	and	r24, r24
     c10:	44 f4       	brge	.+16     	; 0xc22 <get_Passwords+0xdc>
		__ticks = 1;
     c12:	fe 01       	movw	r30, r28
     c14:	e5 5b       	subi	r30, 0xB5	; 181
     c16:	ff 4f       	sbci	r31, 0xFF	; 255
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	91 83       	std	Z+1, r25	; 0x01
     c1e:	80 83       	st	Z, r24
     c20:	64 c0       	rjmp	.+200    	; 0xcea <get_Passwords+0x1a4>
	else if (__tmp > 65535)
     c22:	fe 01       	movw	r30, r28
     c24:	e3 5b       	subi	r30, 0xB3	; 179
     c26:	ff 4f       	sbci	r31, 0xFF	; 255
     c28:	60 81       	ld	r22, Z
     c2a:	71 81       	ldd	r23, Z+1	; 0x01
     c2c:	82 81       	ldd	r24, Z+2	; 0x02
     c2e:	93 81       	ldd	r25, Z+3	; 0x03
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	3f ef       	ldi	r19, 0xFF	; 255
     c34:	4f e7       	ldi	r20, 0x7F	; 127
     c36:	57 e4       	ldi	r21, 0x47	; 71
     c38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c3c:	18 16       	cp	r1, r24
     c3e:	0c f0       	brlt	.+2      	; 0xc42 <get_Passwords+0xfc>
     c40:	43 c0       	rjmp	.+134    	; 0xcc8 <get_Passwords+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c42:	fe 01       	movw	r30, r28
     c44:	ef 5a       	subi	r30, 0xAF	; 175
     c46:	ff 4f       	sbci	r31, 0xFF	; 255
     c48:	60 81       	ld	r22, Z
     c4a:	71 81       	ldd	r23, Z+1	; 0x01
     c4c:	82 81       	ldd	r24, Z+2	; 0x02
     c4e:	93 81       	ldd	r25, Z+3	; 0x03
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	40 e2       	ldi	r20, 0x20	; 32
     c56:	51 e4       	ldi	r21, 0x41	; 65
     c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c5c:	dc 01       	movw	r26, r24
     c5e:	cb 01       	movw	r24, r22
     c60:	8e 01       	movw	r16, r28
     c62:	05 5b       	subi	r16, 0xB5	; 181
     c64:	1f 4f       	sbci	r17, 0xFF	; 255
     c66:	bc 01       	movw	r22, r24
     c68:	cd 01       	movw	r24, r26
     c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
     c72:	f8 01       	movw	r30, r16
     c74:	91 83       	std	Z+1, r25	; 0x01
     c76:	80 83       	st	Z, r24
     c78:	1f c0       	rjmp	.+62     	; 0xcb8 <get_Passwords+0x172>
     c7a:	fe 01       	movw	r30, r28
     c7c:	e7 5b       	subi	r30, 0xB7	; 183
     c7e:	ff 4f       	sbci	r31, 0xFF	; 255
     c80:	88 ec       	ldi	r24, 0xC8	; 200
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	91 83       	std	Z+1, r25	; 0x01
     c86:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c88:	fe 01       	movw	r30, r28
     c8a:	e7 5b       	subi	r30, 0xB7	; 183
     c8c:	ff 4f       	sbci	r31, 0xFF	; 255
     c8e:	80 81       	ld	r24, Z
     c90:	91 81       	ldd	r25, Z+1	; 0x01
     c92:	01 97       	sbiw	r24, 0x01	; 1
     c94:	f1 f7       	brne	.-4      	; 0xc92 <get_Passwords+0x14c>
     c96:	fe 01       	movw	r30, r28
     c98:	e7 5b       	subi	r30, 0xB7	; 183
     c9a:	ff 4f       	sbci	r31, 0xFF	; 255
     c9c:	91 83       	std	Z+1, r25	; 0x01
     c9e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ca0:	de 01       	movw	r26, r28
     ca2:	a5 5b       	subi	r26, 0xB5	; 181
     ca4:	bf 4f       	sbci	r27, 0xFF	; 255
     ca6:	fe 01       	movw	r30, r28
     ca8:	e5 5b       	subi	r30, 0xB5	; 181
     caa:	ff 4f       	sbci	r31, 0xFF	; 255
     cac:	80 81       	ld	r24, Z
     cae:	91 81       	ldd	r25, Z+1	; 0x01
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	11 96       	adiw	r26, 0x01	; 1
     cb4:	9c 93       	st	X, r25
     cb6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cb8:	fe 01       	movw	r30, r28
     cba:	e5 5b       	subi	r30, 0xB5	; 181
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	80 81       	ld	r24, Z
     cc0:	91 81       	ldd	r25, Z+1	; 0x01
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	d1 f6       	brne	.-76     	; 0xc7a <get_Passwords+0x134>
     cc6:	27 c0       	rjmp	.+78     	; 0xd16 <get_Passwords+0x1d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cc8:	8e 01       	movw	r16, r28
     cca:	05 5b       	subi	r16, 0xB5	; 181
     ccc:	1f 4f       	sbci	r17, 0xFF	; 255
     cce:	fe 01       	movw	r30, r28
     cd0:	e3 5b       	subi	r30, 0xB3	; 179
     cd2:	ff 4f       	sbci	r31, 0xFF	; 255
     cd4:	60 81       	ld	r22, Z
     cd6:	71 81       	ldd	r23, Z+1	; 0x01
     cd8:	82 81       	ldd	r24, Z+2	; 0x02
     cda:	93 81       	ldd	r25, Z+3	; 0x03
     cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ce0:	dc 01       	movw	r26, r24
     ce2:	cb 01       	movw	r24, r22
     ce4:	f8 01       	movw	r30, r16
     ce6:	91 83       	std	Z+1, r25	; 0x01
     ce8:	80 83       	st	Z, r24
     cea:	de 01       	movw	r26, r28
     cec:	a9 5b       	subi	r26, 0xB9	; 185
     cee:	bf 4f       	sbci	r27, 0xFF	; 255
     cf0:	fe 01       	movw	r30, r28
     cf2:	e5 5b       	subi	r30, 0xB5	; 181
     cf4:	ff 4f       	sbci	r31, 0xFF	; 255
     cf6:	80 81       	ld	r24, Z
     cf8:	91 81       	ldd	r25, Z+1	; 0x01
     cfa:	8d 93       	st	X+, r24
     cfc:	9c 93       	st	X, r25
     cfe:	fe 01       	movw	r30, r28
     d00:	e9 5b       	subi	r30, 0xB9	; 185
     d02:	ff 4f       	sbci	r31, 0xFF	; 255
     d04:	80 81       	ld	r24, Z
     d06:	91 81       	ldd	r25, Z+1	; 0x01
     d08:	01 97       	sbiw	r24, 0x01	; 1
     d0a:	f1 f7       	brne	.-4      	; 0xd08 <get_Passwords+0x1c2>
     d0c:	fe 01       	movw	r30, r28
     d0e:	e9 5b       	subi	r30, 0xB9	; 185
     d10:	ff 4f       	sbci	r31, 0xFF	; 255
     d12:	91 83       	std	Z+1, r25	; 0x01
     d14:	80 83       	st	Z, r24

/* Function to get 2 passwords from user */
void get_Passwords(void) {
	LCD_displayString("Plz enter pass:");
	LCD_moveCursor(1, 0);
	for (int i = 0; i < 5; i++) {
     d16:	de 01       	movw	r26, r28
     d18:	a5 5a       	subi	r26, 0xA5	; 165
     d1a:	bf 4f       	sbci	r27, 0xFF	; 255
     d1c:	fe 01       	movw	r30, r28
     d1e:	e5 5a       	subi	r30, 0xA5	; 165
     d20:	ff 4f       	sbci	r31, 0xFF	; 255
     d22:	80 81       	ld	r24, Z
     d24:	91 81       	ldd	r25, Z+1	; 0x01
     d26:	01 96       	adiw	r24, 0x01	; 1
     d28:	11 96       	adiw	r26, 0x01	; 1
     d2a:	9c 93       	st	X, r25
     d2c:	8e 93       	st	-X, r24
     d2e:	fe 01       	movw	r30, r28
     d30:	e5 5a       	subi	r30, 0xA5	; 165
     d32:	ff 4f       	sbci	r31, 0xFF	; 255
     d34:	80 81       	ld	r24, Z
     d36:	91 81       	ldd	r25, Z+1	; 0x01
     d38:	85 30       	cpi	r24, 0x05	; 5
     d3a:	91 05       	cpc	r25, r1
     d3c:	0c f4       	brge	.+2      	; 0xd40 <get_Passwords+0x1fa>
     d3e:	1e cf       	rjmp	.-452    	; 0xb7c <get_Passwords+0x36>
		} else {
			LCD_displayCharacter('*'); /* display the pressed keypad switch */
		}
		_delay_ms(500); /* Press time */
	}
	key = KEYPAD_getPressedKey();
     d40:	0e 94 0f 1c 	call	0x381e	; 0x381e <KEYPAD_getPressedKey>
     d44:	80 93 b2 01 	sts	0x01B2, r24
	if (key == 13) {
     d48:	80 91 b2 01 	lds	r24, 0x01B2
     d4c:	8d 30       	cpi	r24, 0x0D	; 13
     d4e:	29 f5       	brne	.+74     	; 0xd9a <get_Passwords+0x254>
		for (int k = 0; k < 5; k++) {
     d50:	fe 01       	movw	r30, r28
     d52:	e7 5a       	subi	r30, 0xA7	; 167
     d54:	ff 4f       	sbci	r31, 0xFF	; 255
     d56:	11 82       	std	Z+1, r1	; 0x01
     d58:	10 82       	st	Z, r1
     d5a:	17 c0       	rjmp	.+46     	; 0xd8a <get_Passwords+0x244>
			UART_sendByte(pass1[k]);
     d5c:	fe 01       	movw	r30, r28
     d5e:	e7 5a       	subi	r30, 0xA7	; 167
     d60:	ff 4f       	sbci	r31, 0xFF	; 255
     d62:	80 81       	ld	r24, Z
     d64:	91 81       	ldd	r25, Z+1	; 0x01
     d66:	fc 01       	movw	r30, r24
     d68:	ed 54       	subi	r30, 0x4D	; 77
     d6a:	fe 4f       	sbci	r31, 0xFE	; 254
     d6c:	80 81       	ld	r24, Z
     d6e:	0e 94 79 23 	call	0x46f2	; 0x46f2 <UART_sendByte>
		}
		_delay_ms(500); /* Press time */
	}
	key = KEYPAD_getPressedKey();
	if (key == 13) {
		for (int k = 0; k < 5; k++) {
     d72:	de 01       	movw	r26, r28
     d74:	a7 5a       	subi	r26, 0xA7	; 167
     d76:	bf 4f       	sbci	r27, 0xFF	; 255
     d78:	fe 01       	movw	r30, r28
     d7a:	e7 5a       	subi	r30, 0xA7	; 167
     d7c:	ff 4f       	sbci	r31, 0xFF	; 255
     d7e:	80 81       	ld	r24, Z
     d80:	91 81       	ldd	r25, Z+1	; 0x01
     d82:	01 96       	adiw	r24, 0x01	; 1
     d84:	11 96       	adiw	r26, 0x01	; 1
     d86:	9c 93       	st	X, r25
     d88:	8e 93       	st	-X, r24
     d8a:	fe 01       	movw	r30, r28
     d8c:	e7 5a       	subi	r30, 0xA7	; 167
     d8e:	ff 4f       	sbci	r31, 0xFF	; 255
     d90:	80 81       	ld	r24, Z
     d92:	91 81       	ldd	r25, Z+1	; 0x01
     d94:	85 30       	cpi	r24, 0x05	; 5
     d96:	91 05       	cpc	r25, r1
     d98:	0c f3       	brlt	.-62     	; 0xd5c <get_Passwords+0x216>
     d9a:	fe 01       	movw	r30, r28
     d9c:	ed 5b       	subi	r30, 0xBD	; 189
     d9e:	ff 4f       	sbci	r31, 0xFF	; 255
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	a0 e2       	ldi	r26, 0x20	; 32
     da6:	b1 e4       	ldi	r27, 0x41	; 65
     da8:	80 83       	st	Z, r24
     daa:	91 83       	std	Z+1, r25	; 0x01
     dac:	a2 83       	std	Z+2, r26	; 0x02
     dae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     db0:	8e 01       	movw	r16, r28
     db2:	01 5c       	subi	r16, 0xC1	; 193
     db4:	1f 4f       	sbci	r17, 0xFF	; 255
     db6:	fe 01       	movw	r30, r28
     db8:	ed 5b       	subi	r30, 0xBD	; 189
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	60 81       	ld	r22, Z
     dbe:	71 81       	ldd	r23, Z+1	; 0x01
     dc0:	82 81       	ldd	r24, Z+2	; 0x02
     dc2:	93 81       	ldd	r25, Z+3	; 0x03
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	4a ef       	ldi	r20, 0xFA	; 250
     dca:	54 e4       	ldi	r21, 0x44	; 68
     dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd0:	dc 01       	movw	r26, r24
     dd2:	cb 01       	movw	r24, r22
     dd4:	f8 01       	movw	r30, r16
     dd6:	80 83       	st	Z, r24
     dd8:	91 83       	std	Z+1, r25	; 0x01
     dda:	a2 83       	std	Z+2, r26	; 0x02
     ddc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     dde:	fe 01       	movw	r30, r28
     de0:	ff 96       	adiw	r30, 0x3f	; 63
     de2:	60 81       	ld	r22, Z
     de4:	71 81       	ldd	r23, Z+1	; 0x01
     de6:	82 81       	ldd	r24, Z+2	; 0x02
     de8:	93 81       	ldd	r25, Z+3	; 0x03
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e8       	ldi	r20, 0x80	; 128
     df0:	5f e3       	ldi	r21, 0x3F	; 63
     df2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     df6:	88 23       	and	r24, r24
     df8:	2c f4       	brge	.+10     	; 0xe04 <get_Passwords+0x2be>
		__ticks = 1;
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	9e af       	std	Y+62, r25	; 0x3e
     e00:	8d af       	std	Y+61, r24	; 0x3d
     e02:	46 c0       	rjmp	.+140    	; 0xe90 <get_Passwords+0x34a>
	else if (__tmp > 65535)
     e04:	fe 01       	movw	r30, r28
     e06:	ff 96       	adiw	r30, 0x3f	; 63
     e08:	60 81       	ld	r22, Z
     e0a:	71 81       	ldd	r23, Z+1	; 0x01
     e0c:	82 81       	ldd	r24, Z+2	; 0x02
     e0e:	93 81       	ldd	r25, Z+3	; 0x03
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	3f ef       	ldi	r19, 0xFF	; 255
     e14:	4f e7       	ldi	r20, 0x7F	; 127
     e16:	57 e4       	ldi	r21, 0x47	; 71
     e18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e1c:	18 16       	cp	r1, r24
     e1e:	64 f5       	brge	.+88     	; 0xe78 <get_Passwords+0x332>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e20:	fe 01       	movw	r30, r28
     e22:	ed 5b       	subi	r30, 0xBD	; 189
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	60 81       	ld	r22, Z
     e28:	71 81       	ldd	r23, Z+1	; 0x01
     e2a:	82 81       	ldd	r24, Z+2	; 0x02
     e2c:	93 81       	ldd	r25, Z+3	; 0x03
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	40 e2       	ldi	r20, 0x20	; 32
     e34:	51 e4       	ldi	r21, 0x41	; 65
     e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e3a:	dc 01       	movw	r26, r24
     e3c:	cb 01       	movw	r24, r22
     e3e:	bc 01       	movw	r22, r24
     e40:	cd 01       	movw	r24, r26
     e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e46:	dc 01       	movw	r26, r24
     e48:	cb 01       	movw	r24, r22
     e4a:	9e af       	std	Y+62, r25	; 0x3e
     e4c:	8d af       	std	Y+61, r24	; 0x3d
     e4e:	0f c0       	rjmp	.+30     	; 0xe6e <get_Passwords+0x328>
     e50:	88 ec       	ldi	r24, 0xC8	; 200
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	9c af       	std	Y+60, r25	; 0x3c
     e56:	8b af       	std	Y+59, r24	; 0x3b
     e58:	8b ad       	ldd	r24, Y+59	; 0x3b
     e5a:	9c ad       	ldd	r25, Y+60	; 0x3c
     e5c:	01 97       	sbiw	r24, 0x01	; 1
     e5e:	f1 f7       	brne	.-4      	; 0xe5c <get_Passwords+0x316>
     e60:	9c af       	std	Y+60, r25	; 0x3c
     e62:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e64:	8d ad       	ldd	r24, Y+61	; 0x3d
     e66:	9e ad       	ldd	r25, Y+62	; 0x3e
     e68:	01 97       	sbiw	r24, 0x01	; 1
     e6a:	9e af       	std	Y+62, r25	; 0x3e
     e6c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e6e:	8d ad       	ldd	r24, Y+61	; 0x3d
     e70:	9e ad       	ldd	r25, Y+62	; 0x3e
     e72:	00 97       	sbiw	r24, 0x00	; 0
     e74:	69 f7       	brne	.-38     	; 0xe50 <get_Passwords+0x30a>
     e76:	16 c0       	rjmp	.+44     	; 0xea4 <get_Passwords+0x35e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e78:	fe 01       	movw	r30, r28
     e7a:	ff 96       	adiw	r30, 0x3f	; 63
     e7c:	60 81       	ld	r22, Z
     e7e:	71 81       	ldd	r23, Z+1	; 0x01
     e80:	82 81       	ldd	r24, Z+2	; 0x02
     e82:	93 81       	ldd	r25, Z+3	; 0x03
     e84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e88:	dc 01       	movw	r26, r24
     e8a:	cb 01       	movw	r24, r22
     e8c:	9e af       	std	Y+62, r25	; 0x3e
     e8e:	8d af       	std	Y+61, r24	; 0x3d
     e90:	8d ad       	ldd	r24, Y+61	; 0x3d
     e92:	9e ad       	ldd	r25, Y+62	; 0x3e
     e94:	9a af       	std	Y+58, r25	; 0x3a
     e96:	89 af       	std	Y+57, r24	; 0x39
     e98:	89 ad       	ldd	r24, Y+57	; 0x39
     e9a:	9a ad       	ldd	r25, Y+58	; 0x3a
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	f1 f7       	brne	.-4      	; 0xe9c <get_Passwords+0x356>
     ea0:	9a af       	std	Y+58, r25	; 0x3a
     ea2:	89 af       	std	Y+57, r24	; 0x39
			UART_sendByte(pass1[k]);
		}
	}
	_delay_ms(10);
	LCD_clearScreen();
     ea4:	0e 94 bb 22 	call	0x4576	; 0x4576 <LCD_clearScreen>
	LCD_displayString("pass1 received");
     ea8:	80 e7       	ldi	r24, 0x70	; 112
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 14 22 	call	0x4428	; 0x4428 <LCD_displayString>
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	aa e7       	ldi	r26, 0x7A	; 122
     eb6:	b4 e4       	ldi	r27, 0x44	; 68
     eb8:	8d ab       	std	Y+53, r24	; 0x35
     eba:	9e ab       	std	Y+54, r25	; 0x36
     ebc:	af ab       	std	Y+55, r26	; 0x37
     ebe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ec0:	6d a9       	ldd	r22, Y+53	; 0x35
     ec2:	7e a9       	ldd	r23, Y+54	; 0x36
     ec4:	8f a9       	ldd	r24, Y+55	; 0x37
     ec6:	98 ad       	ldd	r25, Y+56	; 0x38
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	4a ef       	ldi	r20, 0xFA	; 250
     ece:	54 e4       	ldi	r21, 0x44	; 68
     ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	89 ab       	std	Y+49, r24	; 0x31
     eda:	9a ab       	std	Y+50, r25	; 0x32
     edc:	ab ab       	std	Y+51, r26	; 0x33
     ede:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     ee0:	69 a9       	ldd	r22, Y+49	; 0x31
     ee2:	7a a9       	ldd	r23, Y+50	; 0x32
     ee4:	8b a9       	ldd	r24, Y+51	; 0x33
     ee6:	9c a9       	ldd	r25, Y+52	; 0x34
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	40 e8       	ldi	r20, 0x80	; 128
     eee:	5f e3       	ldi	r21, 0x3F	; 63
     ef0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ef4:	88 23       	and	r24, r24
     ef6:	2c f4       	brge	.+10     	; 0xf02 <get_Passwords+0x3bc>
		__ticks = 1;
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	98 ab       	std	Y+48, r25	; 0x30
     efe:	8f a7       	std	Y+47, r24	; 0x2f
     f00:	3f c0       	rjmp	.+126    	; 0xf80 <get_Passwords+0x43a>
	else if (__tmp > 65535)
     f02:	69 a9       	ldd	r22, Y+49	; 0x31
     f04:	7a a9       	ldd	r23, Y+50	; 0x32
     f06:	8b a9       	ldd	r24, Y+51	; 0x33
     f08:	9c a9       	ldd	r25, Y+52	; 0x34
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	3f ef       	ldi	r19, 0xFF	; 255
     f0e:	4f e7       	ldi	r20, 0x7F	; 127
     f10:	57 e4       	ldi	r21, 0x47	; 71
     f12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f16:	18 16       	cp	r1, r24
     f18:	4c f5       	brge	.+82     	; 0xf6c <get_Passwords+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f1a:	6d a9       	ldd	r22, Y+53	; 0x35
     f1c:	7e a9       	ldd	r23, Y+54	; 0x36
     f1e:	8f a9       	ldd	r24, Y+55	; 0x37
     f20:	98 ad       	ldd	r25, Y+56	; 0x38
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	40 e2       	ldi	r20, 0x20	; 32
     f28:	51 e4       	ldi	r21, 0x41	; 65
     f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	bc 01       	movw	r22, r24
     f34:	cd 01       	movw	r24, r26
     f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	98 ab       	std	Y+48, r25	; 0x30
     f40:	8f a7       	std	Y+47, r24	; 0x2f
     f42:	0f c0       	rjmp	.+30     	; 0xf62 <get_Passwords+0x41c>
     f44:	88 ec       	ldi	r24, 0xC8	; 200
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	9e a7       	std	Y+46, r25	; 0x2e
     f4a:	8d a7       	std	Y+45, r24	; 0x2d
     f4c:	8d a5       	ldd	r24, Y+45	; 0x2d
     f4e:	9e a5       	ldd	r25, Y+46	; 0x2e
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	f1 f7       	brne	.-4      	; 0xf50 <get_Passwords+0x40a>
     f54:	9e a7       	std	Y+46, r25	; 0x2e
     f56:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f58:	8f a5       	ldd	r24, Y+47	; 0x2f
     f5a:	98 a9       	ldd	r25, Y+48	; 0x30
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	98 ab       	std	Y+48, r25	; 0x30
     f60:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f62:	8f a5       	ldd	r24, Y+47	; 0x2f
     f64:	98 a9       	ldd	r25, Y+48	; 0x30
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	69 f7       	brne	.-38     	; 0xf44 <get_Passwords+0x3fe>
     f6a:	14 c0       	rjmp	.+40     	; 0xf94 <get_Passwords+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f6c:	69 a9       	ldd	r22, Y+49	; 0x31
     f6e:	7a a9       	ldd	r23, Y+50	; 0x32
     f70:	8b a9       	ldd	r24, Y+51	; 0x33
     f72:	9c a9       	ldd	r25, Y+52	; 0x34
     f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f78:	dc 01       	movw	r26, r24
     f7a:	cb 01       	movw	r24, r22
     f7c:	98 ab       	std	Y+48, r25	; 0x30
     f7e:	8f a7       	std	Y+47, r24	; 0x2f
     f80:	8f a5       	ldd	r24, Y+47	; 0x2f
     f82:	98 a9       	ldd	r25, Y+48	; 0x30
     f84:	9c a7       	std	Y+44, r25	; 0x2c
     f86:	8b a7       	std	Y+43, r24	; 0x2b
     f88:	8b a5       	ldd	r24, Y+43	; 0x2b
     f8a:	9c a5       	ldd	r25, Y+44	; 0x2c
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	f1 f7       	brne	.-4      	; 0xf8c <get_Passwords+0x446>
     f90:	9c a7       	std	Y+44, r25	; 0x2c
     f92:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	LCD_clearScreen();
     f94:	0e 94 bb 22 	call	0x4576	; 0x4576 <LCD_clearScreen>
	LCD_displayString("Plz re-enter the");
     f98:	8f e7       	ldi	r24, 0x7F	; 127
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 14 22 	call	0x4428	; 0x4428 <LCD_displayString>
	LCD_moveCursor(1, 0);
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	0e 94 3d 22 	call	0x447a	; 0x447a <LCD_moveCursor>
	LCD_displayString("same pass: ");
     fa8:	80 e9       	ldi	r24, 0x90	; 144
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	0e 94 14 22 	call	0x4428	; 0x4428 <LCD_displayString>

	for (int i = 0; i < 5; i++) {
     fb0:	fe 01       	movw	r30, r28
     fb2:	e9 5a       	subi	r30, 0xA9	; 169
     fb4:	ff 4f       	sbci	r31, 0xFF	; 255
     fb6:	11 82       	std	Z+1, r1	; 0x01
     fb8:	10 82       	st	Z, r1
     fba:	98 c0       	rjmp	.+304    	; 0x10ec <get_Passwords+0x5a6>
		/* Get the pressed key number, if any switch pressed for more than 500 ms it will considered more than one press */
		key = KEYPAD_getPressedKey();
     fbc:	0e 94 0f 1c 	call	0x381e	; 0x381e <KEYPAD_getPressedKey>
     fc0:	80 93 b2 01 	sts	0x01B2, r24
		pass2[i] = key;
     fc4:	fe 01       	movw	r30, r28
     fc6:	e9 5a       	subi	r30, 0xA9	; 169
     fc8:	ff 4f       	sbci	r31, 0xFF	; 255
     fca:	80 81       	ld	r24, Z
     fcc:	91 81       	ldd	r25, Z+1	; 0x01
     fce:	20 91 b2 01 	lds	r18, 0x01B2
     fd2:	fc 01       	movw	r30, r24
     fd4:	e3 55       	subi	r30, 0x53	; 83
     fd6:	fe 4f       	sbci	r31, 0xFE	; 254
     fd8:	20 83       	st	Z, r18
		if ((key <= 9) && (key >= 0)) {
     fda:	80 91 b2 01 	lds	r24, 0x01B2
     fde:	8a 30       	cpi	r24, 0x0A	; 10
     fe0:	20 f4       	brcc	.+8      	; 0xfea <get_Passwords+0x4a4>
			LCD_displayCharacter('*'); /* display the pressed keypad switch */
     fe2:	8a e2       	ldi	r24, 0x2A	; 42
     fe4:	0e 94 25 20 	call	0x404a	; 0x404a <LCD_displayCharacter>
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <get_Passwords+0x4aa>
		} else {
			LCD_displayCharacter('*'); /* display the pressed keypad switch */
     fea:	8a e2       	ldi	r24, 0x2A	; 42
     fec:	0e 94 25 20 	call	0x404a	; 0x404a <LCD_displayCharacter>
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	aa ef       	ldi	r26, 0xFA	; 250
     ff6:	b3 e4       	ldi	r27, 0x43	; 67
     ff8:	8f a3       	std	Y+39, r24	; 0x27
     ffa:	98 a7       	std	Y+40, r25	; 0x28
     ffc:	a9 a7       	std	Y+41, r26	; 0x29
     ffe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1000:	6f a1       	ldd	r22, Y+39	; 0x27
    1002:	78 a5       	ldd	r23, Y+40	; 0x28
    1004:	89 a5       	ldd	r24, Y+41	; 0x29
    1006:	9a a5       	ldd	r25, Y+42	; 0x2a
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	4a ef       	ldi	r20, 0xFA	; 250
    100e:	54 e4       	ldi	r21, 0x44	; 68
    1010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	8b a3       	std	Y+35, r24	; 0x23
    101a:	9c a3       	std	Y+36, r25	; 0x24
    101c:	ad a3       	std	Y+37, r26	; 0x25
    101e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1020:	6b a1       	ldd	r22, Y+35	; 0x23
    1022:	7c a1       	ldd	r23, Y+36	; 0x24
    1024:	8d a1       	ldd	r24, Y+37	; 0x25
    1026:	9e a1       	ldd	r25, Y+38	; 0x26
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e8       	ldi	r20, 0x80	; 128
    102e:	5f e3       	ldi	r21, 0x3F	; 63
    1030:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1034:	88 23       	and	r24, r24
    1036:	2c f4       	brge	.+10     	; 0x1042 <get_Passwords+0x4fc>
		__ticks = 1;
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	9a a3       	std	Y+34, r25	; 0x22
    103e:	89 a3       	std	Y+33, r24	; 0x21
    1040:	3f c0       	rjmp	.+126    	; 0x10c0 <get_Passwords+0x57a>
	else if (__tmp > 65535)
    1042:	6b a1       	ldd	r22, Y+35	; 0x23
    1044:	7c a1       	ldd	r23, Y+36	; 0x24
    1046:	8d a1       	ldd	r24, Y+37	; 0x25
    1048:	9e a1       	ldd	r25, Y+38	; 0x26
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	3f ef       	ldi	r19, 0xFF	; 255
    104e:	4f e7       	ldi	r20, 0x7F	; 127
    1050:	57 e4       	ldi	r21, 0x47	; 71
    1052:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1056:	18 16       	cp	r1, r24
    1058:	4c f5       	brge	.+82     	; 0x10ac <get_Passwords+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    105a:	6f a1       	ldd	r22, Y+39	; 0x27
    105c:	78 a5       	ldd	r23, Y+40	; 0x28
    105e:	89 a5       	ldd	r24, Y+41	; 0x29
    1060:	9a a5       	ldd	r25, Y+42	; 0x2a
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	40 e2       	ldi	r20, 0x20	; 32
    1068:	51 e4       	ldi	r21, 0x41	; 65
    106a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	bc 01       	movw	r22, r24
    1074:	cd 01       	movw	r24, r26
    1076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    107a:	dc 01       	movw	r26, r24
    107c:	cb 01       	movw	r24, r22
    107e:	9a a3       	std	Y+34, r25	; 0x22
    1080:	89 a3       	std	Y+33, r24	; 0x21
    1082:	0f c0       	rjmp	.+30     	; 0x10a2 <get_Passwords+0x55c>
    1084:	88 ec       	ldi	r24, 0xC8	; 200
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	98 a3       	std	Y+32, r25	; 0x20
    108a:	8f 8f       	std	Y+31, r24	; 0x1f
    108c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    108e:	98 a1       	ldd	r25, Y+32	; 0x20
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	f1 f7       	brne	.-4      	; 0x1090 <get_Passwords+0x54a>
    1094:	98 a3       	std	Y+32, r25	; 0x20
    1096:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1098:	89 a1       	ldd	r24, Y+33	; 0x21
    109a:	9a a1       	ldd	r25, Y+34	; 0x22
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	9a a3       	std	Y+34, r25	; 0x22
    10a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a2:	89 a1       	ldd	r24, Y+33	; 0x21
    10a4:	9a a1       	ldd	r25, Y+34	; 0x22
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	69 f7       	brne	.-38     	; 0x1084 <get_Passwords+0x53e>
    10aa:	14 c0       	rjmp	.+40     	; 0x10d4 <get_Passwords+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ac:	6b a1       	ldd	r22, Y+35	; 0x23
    10ae:	7c a1       	ldd	r23, Y+36	; 0x24
    10b0:	8d a1       	ldd	r24, Y+37	; 0x25
    10b2:	9e a1       	ldd	r25, Y+38	; 0x26
    10b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	9a a3       	std	Y+34, r25	; 0x22
    10be:	89 a3       	std	Y+33, r24	; 0x21
    10c0:	89 a1       	ldd	r24, Y+33	; 0x21
    10c2:	9a a1       	ldd	r25, Y+34	; 0x22
    10c4:	9e 8f       	std	Y+30, r25	; 0x1e
    10c6:	8d 8f       	std	Y+29, r24	; 0x1d
    10c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10cc:	01 97       	sbiw	r24, 0x01	; 1
    10ce:	f1 f7       	brne	.-4      	; 0x10cc <get_Passwords+0x586>
    10d0:	9e 8f       	std	Y+30, r25	; 0x1e
    10d2:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_clearScreen();
	LCD_displayString("Plz re-enter the");
	LCD_moveCursor(1, 0);
	LCD_displayString("same pass: ");

	for (int i = 0; i < 5; i++) {
    10d4:	de 01       	movw	r26, r28
    10d6:	a9 5a       	subi	r26, 0xA9	; 169
    10d8:	bf 4f       	sbci	r27, 0xFF	; 255
    10da:	fe 01       	movw	r30, r28
    10dc:	e9 5a       	subi	r30, 0xA9	; 169
    10de:	ff 4f       	sbci	r31, 0xFF	; 255
    10e0:	80 81       	ld	r24, Z
    10e2:	91 81       	ldd	r25, Z+1	; 0x01
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	11 96       	adiw	r26, 0x01	; 1
    10e8:	9c 93       	st	X, r25
    10ea:	8e 93       	st	-X, r24
    10ec:	fe 01       	movw	r30, r28
    10ee:	e9 5a       	subi	r30, 0xA9	; 169
    10f0:	ff 4f       	sbci	r31, 0xFF	; 255
    10f2:	80 81       	ld	r24, Z
    10f4:	91 81       	ldd	r25, Z+1	; 0x01
    10f6:	85 30       	cpi	r24, 0x05	; 5
    10f8:	91 05       	cpc	r25, r1
    10fa:	0c f4       	brge	.+2      	; 0x10fe <get_Passwords+0x5b8>
    10fc:	5f cf       	rjmp	.-322    	; 0xfbc <get_Passwords+0x476>
		} else {
			LCD_displayCharacter('*'); /* display the pressed keypad switch */
		}
		_delay_ms(500); /* Press time */
	}
	key = KEYPAD_getPressedKey();
    10fe:	0e 94 0f 1c 	call	0x381e	; 0x381e <KEYPAD_getPressedKey>
    1102:	80 93 b2 01 	sts	0x01B2, r24
	if (key == 13) {
    1106:	80 91 b2 01 	lds	r24, 0x01B2
    110a:	8d 30       	cpi	r24, 0x0D	; 13
    110c:	29 f5       	brne	.+74     	; 0x1158 <get_Passwords+0x612>
		for (int k = 0; k < 5; k++) {
    110e:	fe 01       	movw	r30, r28
    1110:	eb 5a       	subi	r30, 0xAB	; 171
    1112:	ff 4f       	sbci	r31, 0xFF	; 255
    1114:	11 82       	std	Z+1, r1	; 0x01
    1116:	10 82       	st	Z, r1
    1118:	17 c0       	rjmp	.+46     	; 0x1148 <get_Passwords+0x602>
			UART_sendByte(pass2[k]);
    111a:	fe 01       	movw	r30, r28
    111c:	eb 5a       	subi	r30, 0xAB	; 171
    111e:	ff 4f       	sbci	r31, 0xFF	; 255
    1120:	80 81       	ld	r24, Z
    1122:	91 81       	ldd	r25, Z+1	; 0x01
    1124:	fc 01       	movw	r30, r24
    1126:	e3 55       	subi	r30, 0x53	; 83
    1128:	fe 4f       	sbci	r31, 0xFE	; 254
    112a:	80 81       	ld	r24, Z
    112c:	0e 94 79 23 	call	0x46f2	; 0x46f2 <UART_sendByte>
		}
		_delay_ms(500); /* Press time */
	}
	key = KEYPAD_getPressedKey();
	if (key == 13) {
		for (int k = 0; k < 5; k++) {
    1130:	de 01       	movw	r26, r28
    1132:	ab 5a       	subi	r26, 0xAB	; 171
    1134:	bf 4f       	sbci	r27, 0xFF	; 255
    1136:	fe 01       	movw	r30, r28
    1138:	eb 5a       	subi	r30, 0xAB	; 171
    113a:	ff 4f       	sbci	r31, 0xFF	; 255
    113c:	80 81       	ld	r24, Z
    113e:	91 81       	ldd	r25, Z+1	; 0x01
    1140:	01 96       	adiw	r24, 0x01	; 1
    1142:	11 96       	adiw	r26, 0x01	; 1
    1144:	9c 93       	st	X, r25
    1146:	8e 93       	st	-X, r24
    1148:	fe 01       	movw	r30, r28
    114a:	eb 5a       	subi	r30, 0xAB	; 171
    114c:	ff 4f       	sbci	r31, 0xFF	; 255
    114e:	80 81       	ld	r24, Z
    1150:	91 81       	ldd	r25, Z+1	; 0x01
    1152:	85 30       	cpi	r24, 0x05	; 5
    1154:	91 05       	cpc	r25, r1
    1156:	0c f3       	brlt	.-62     	; 0x111a <get_Passwords+0x5d4>
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	a0 e2       	ldi	r26, 0x20	; 32
    115e:	b1 e4       	ldi	r27, 0x41	; 65
    1160:	89 8f       	std	Y+25, r24	; 0x19
    1162:	9a 8f       	std	Y+26, r25	; 0x1a
    1164:	ab 8f       	std	Y+27, r26	; 0x1b
    1166:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1168:	69 8d       	ldd	r22, Y+25	; 0x19
    116a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    116c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    116e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	4a ef       	ldi	r20, 0xFA	; 250
    1176:	54 e4       	ldi	r21, 0x44	; 68
    1178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	8d 8b       	std	Y+21, r24	; 0x15
    1182:	9e 8b       	std	Y+22, r25	; 0x16
    1184:	af 8b       	std	Y+23, r26	; 0x17
    1186:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1188:	6d 89       	ldd	r22, Y+21	; 0x15
    118a:	7e 89       	ldd	r23, Y+22	; 0x16
    118c:	8f 89       	ldd	r24, Y+23	; 0x17
    118e:	98 8d       	ldd	r25, Y+24	; 0x18
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	40 e8       	ldi	r20, 0x80	; 128
    1196:	5f e3       	ldi	r21, 0x3F	; 63
    1198:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    119c:	88 23       	and	r24, r24
    119e:	2c f4       	brge	.+10     	; 0x11aa <get_Passwords+0x664>
		__ticks = 1;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	9c 8b       	std	Y+20, r25	; 0x14
    11a6:	8b 8b       	std	Y+19, r24	; 0x13
    11a8:	3f c0       	rjmp	.+126    	; 0x1228 <get_Passwords+0x6e2>
	else if (__tmp > 65535)
    11aa:	6d 89       	ldd	r22, Y+21	; 0x15
    11ac:	7e 89       	ldd	r23, Y+22	; 0x16
    11ae:	8f 89       	ldd	r24, Y+23	; 0x17
    11b0:	98 8d       	ldd	r25, Y+24	; 0x18
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	3f ef       	ldi	r19, 0xFF	; 255
    11b6:	4f e7       	ldi	r20, 0x7F	; 127
    11b8:	57 e4       	ldi	r21, 0x47	; 71
    11ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11be:	18 16       	cp	r1, r24
    11c0:	4c f5       	brge	.+82     	; 0x1214 <get_Passwords+0x6ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c2:	69 8d       	ldd	r22, Y+25	; 0x19
    11c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	40 e2       	ldi	r20, 0x20	; 32
    11d0:	51 e4       	ldi	r21, 0x41	; 65
    11d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	bc 01       	movw	r22, r24
    11dc:	cd 01       	movw	r24, r26
    11de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	9c 8b       	std	Y+20, r25	; 0x14
    11e8:	8b 8b       	std	Y+19, r24	; 0x13
    11ea:	0f c0       	rjmp	.+30     	; 0x120a <get_Passwords+0x6c4>
    11ec:	88 ec       	ldi	r24, 0xC8	; 200
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	9a 8b       	std	Y+18, r25	; 0x12
    11f2:	89 8b       	std	Y+17, r24	; 0x11
    11f4:	89 89       	ldd	r24, Y+17	; 0x11
    11f6:	9a 89       	ldd	r25, Y+18	; 0x12
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <get_Passwords+0x6b2>
    11fc:	9a 8b       	std	Y+18, r25	; 0x12
    11fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1200:	8b 89       	ldd	r24, Y+19	; 0x13
    1202:	9c 89       	ldd	r25, Y+20	; 0x14
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	9c 8b       	std	Y+20, r25	; 0x14
    1208:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    120a:	8b 89       	ldd	r24, Y+19	; 0x13
    120c:	9c 89       	ldd	r25, Y+20	; 0x14
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	69 f7       	brne	.-38     	; 0x11ec <get_Passwords+0x6a6>
    1212:	14 c0       	rjmp	.+40     	; 0x123c <get_Passwords+0x6f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1214:	6d 89       	ldd	r22, Y+21	; 0x15
    1216:	7e 89       	ldd	r23, Y+22	; 0x16
    1218:	8f 89       	ldd	r24, Y+23	; 0x17
    121a:	98 8d       	ldd	r25, Y+24	; 0x18
    121c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	9c 8b       	std	Y+20, r25	; 0x14
    1226:	8b 8b       	std	Y+19, r24	; 0x13
    1228:	8b 89       	ldd	r24, Y+19	; 0x13
    122a:	9c 89       	ldd	r25, Y+20	; 0x14
    122c:	98 8b       	std	Y+16, r25	; 0x10
    122e:	8f 87       	std	Y+15, r24	; 0x0f
    1230:	8f 85       	ldd	r24, Y+15	; 0x0f
    1232:	98 89       	ldd	r25, Y+16	; 0x10
    1234:	01 97       	sbiw	r24, 0x01	; 1
    1236:	f1 f7       	brne	.-4      	; 0x1234 <get_Passwords+0x6ee>
    1238:	98 8b       	std	Y+16, r25	; 0x10
    123a:	8f 87       	std	Y+15, r24	; 0x0f
			UART_sendByte(pass2[k]);
		}
	}
	_delay_ms(10);
	LCD_clearScreen();
    123c:	0e 94 bb 22 	call	0x4576	; 0x4576 <LCD_clearScreen>
	LCD_displayString("pass2 received");
    1240:	8c e9       	ldi	r24, 0x9C	; 156
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	0e 94 14 22 	call	0x4428	; 0x4428 <LCD_displayString>
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	aa e7       	ldi	r26, 0x7A	; 122
    124e:	b4 e4       	ldi	r27, 0x44	; 68
    1250:	8b 87       	std	Y+11, r24	; 0x0b
    1252:	9c 87       	std	Y+12, r25	; 0x0c
    1254:	ad 87       	std	Y+13, r26	; 0x0d
    1256:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1258:	6b 85       	ldd	r22, Y+11	; 0x0b
    125a:	7c 85       	ldd	r23, Y+12	; 0x0c
    125c:	8d 85       	ldd	r24, Y+13	; 0x0d
    125e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1260:	20 e0       	ldi	r18, 0x00	; 0
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	4a ef       	ldi	r20, 0xFA	; 250
    1266:	54 e4       	ldi	r21, 0x44	; 68
    1268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	8f 83       	std	Y+7, r24	; 0x07
    1272:	98 87       	std	Y+8, r25	; 0x08
    1274:	a9 87       	std	Y+9, r26	; 0x09
    1276:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1278:	6f 81       	ldd	r22, Y+7	; 0x07
    127a:	78 85       	ldd	r23, Y+8	; 0x08
    127c:	89 85       	ldd	r24, Y+9	; 0x09
    127e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e8       	ldi	r20, 0x80	; 128
    1286:	5f e3       	ldi	r21, 0x3F	; 63
    1288:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    128c:	88 23       	and	r24, r24
    128e:	2c f4       	brge	.+10     	; 0x129a <get_Passwords+0x754>
		__ticks = 1;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	9e 83       	std	Y+6, r25	; 0x06
    1296:	8d 83       	std	Y+5, r24	; 0x05
    1298:	3f c0       	rjmp	.+126    	; 0x1318 <get_Passwords+0x7d2>
	else if (__tmp > 65535)
    129a:	6f 81       	ldd	r22, Y+7	; 0x07
    129c:	78 85       	ldd	r23, Y+8	; 0x08
    129e:	89 85       	ldd	r24, Y+9	; 0x09
    12a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	3f ef       	ldi	r19, 0xFF	; 255
    12a6:	4f e7       	ldi	r20, 0x7F	; 127
    12a8:	57 e4       	ldi	r21, 0x47	; 71
    12aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ae:	18 16       	cp	r1, r24
    12b0:	4c f5       	brge	.+82     	; 0x1304 <get_Passwords+0x7be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	40 e2       	ldi	r20, 0x20	; 32
    12c0:	51 e4       	ldi	r21, 0x41	; 65
    12c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	bc 01       	movw	r22, r24
    12cc:	cd 01       	movw	r24, r26
    12ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	9e 83       	std	Y+6, r25	; 0x06
    12d8:	8d 83       	std	Y+5, r24	; 0x05
    12da:	0f c0       	rjmp	.+30     	; 0x12fa <get_Passwords+0x7b4>
    12dc:	88 ec       	ldi	r24, 0xC8	; 200
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	9c 83       	std	Y+4, r25	; 0x04
    12e2:	8b 83       	std	Y+3, r24	; 0x03
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	9c 81       	ldd	r25, Y+4	; 0x04
    12e8:	01 97       	sbiw	r24, 0x01	; 1
    12ea:	f1 f7       	brne	.-4      	; 0x12e8 <get_Passwords+0x7a2>
    12ec:	9c 83       	std	Y+4, r25	; 0x04
    12ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f0:	8d 81       	ldd	r24, Y+5	; 0x05
    12f2:	9e 81       	ldd	r25, Y+6	; 0x06
    12f4:	01 97       	sbiw	r24, 0x01	; 1
    12f6:	9e 83       	std	Y+6, r25	; 0x06
    12f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12fa:	8d 81       	ldd	r24, Y+5	; 0x05
    12fc:	9e 81       	ldd	r25, Y+6	; 0x06
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	69 f7       	brne	.-38     	; 0x12dc <get_Passwords+0x796>
    1302:	14 c0       	rjmp	.+40     	; 0x132c <get_Passwords+0x7e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1304:	6f 81       	ldd	r22, Y+7	; 0x07
    1306:	78 85       	ldd	r23, Y+8	; 0x08
    1308:	89 85       	ldd	r24, Y+9	; 0x09
    130a:	9a 85       	ldd	r25, Y+10	; 0x0a
    130c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	9e 83       	std	Y+6, r25	; 0x06
    1316:	8d 83       	std	Y+5, r24	; 0x05
    1318:	8d 81       	ldd	r24, Y+5	; 0x05
    131a:	9e 81       	ldd	r25, Y+6	; 0x06
    131c:	9a 83       	std	Y+2, r25	; 0x02
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	9a 81       	ldd	r25, Y+2	; 0x02
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	f1 f7       	brne	.-4      	; 0x1324 <get_Passwords+0x7de>
    1328:	9a 83       	std	Y+2, r25	; 0x02
    132a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_clearScreen();
    132c:	0e 94 bb 22 	call	0x4576	; 0x4576 <LCD_clearScreen>
}
    1330:	c4 5a       	subi	r28, 0xA4	; 164
    1332:	df 4f       	sbci	r29, 0xFF	; 255
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	1f 91       	pop	r17
    1344:	0f 91       	pop	r16
    1346:	08 95       	ret

00001348 <main>:
int main() {
    1348:	0f 93       	push	r16
    134a:	1f 93       	push	r17
    134c:	df 93       	push	r29
    134e:	cf 93       	push	r28
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	c4 5f       	subi	r28, 0xF4	; 244
    1356:	d0 40       	sbci	r29, 0x00	; 0
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	de bf       	out	0x3e, r29	; 62
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	cd bf       	out	0x3d, r28	; 61

	LCD_init();
    1362:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <LCD_init>
	UART_ConfigType UART_Config = {eight_bit, disabled, one_bit, 9600};
    1366:	ce 01       	movw	r24, r28
    1368:	87 51       	subi	r24, 0x17	; 23
    136a:	9f 4f       	sbci	r25, 0xFF	; 255
    136c:	c0 51       	subi	r28, 0x10	; 16
    136e:	df 4f       	sbci	r29, 0xFF	; 255
    1370:	99 83       	std	Y+1, r25	; 0x01
    1372:	88 83       	st	Y, r24
    1374:	c0 5f       	subi	r28, 0xF0	; 240
    1376:	d0 40       	sbci	r29, 0x00	; 0
    1378:	87 e9       	ldi	r24, 0x97	; 151
    137a:	91 e0       	ldi	r25, 0x01	; 1
    137c:	ce 50       	subi	r28, 0x0E	; 14
    137e:	df 4f       	sbci	r29, 0xFF	; 255
    1380:	99 83       	std	Y+1, r25	; 0x01
    1382:	88 83       	st	Y, r24
    1384:	c2 5f       	subi	r28, 0xF2	; 242
    1386:	d0 40       	sbci	r29, 0x00	; 0
    1388:	97 e0       	ldi	r25, 0x07	; 7
    138a:	cc 50       	subi	r28, 0x0C	; 12
    138c:	df 4f       	sbci	r29, 0xFF	; 255
    138e:	98 83       	st	Y, r25
    1390:	c4 5f       	subi	r28, 0xF4	; 244
    1392:	d0 40       	sbci	r29, 0x00	; 0
    1394:	ce 50       	subi	r28, 0x0E	; 14
    1396:	df 4f       	sbci	r29, 0xFF	; 255
    1398:	e8 81       	ld	r30, Y
    139a:	f9 81       	ldd	r31, Y+1	; 0x01
    139c:	c2 5f       	subi	r28, 0xF2	; 242
    139e:	d0 40       	sbci	r29, 0x00	; 0
    13a0:	00 80       	ld	r0, Z
    13a2:	ce 50       	subi	r28, 0x0E	; 14
    13a4:	df 4f       	sbci	r29, 0xFF	; 255
    13a6:	88 81       	ld	r24, Y
    13a8:	99 81       	ldd	r25, Y+1	; 0x01
    13aa:	c2 5f       	subi	r28, 0xF2	; 242
    13ac:	d0 40       	sbci	r29, 0x00	; 0
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	ce 50       	subi	r28, 0x0E	; 14
    13b2:	df 4f       	sbci	r29, 0xFF	; 255
    13b4:	99 83       	std	Y+1, r25	; 0x01
    13b6:	88 83       	st	Y, r24
    13b8:	c2 5f       	subi	r28, 0xF2	; 242
    13ba:	d0 40       	sbci	r29, 0x00	; 0
    13bc:	c0 51       	subi	r28, 0x10	; 16
    13be:	df 4f       	sbci	r29, 0xFF	; 255
    13c0:	e8 81       	ld	r30, Y
    13c2:	f9 81       	ldd	r31, Y+1	; 0x01
    13c4:	c0 5f       	subi	r28, 0xF0	; 240
    13c6:	d0 40       	sbci	r29, 0x00	; 0
    13c8:	00 82       	st	Z, r0
    13ca:	c0 51       	subi	r28, 0x10	; 16
    13cc:	df 4f       	sbci	r29, 0xFF	; 255
    13ce:	88 81       	ld	r24, Y
    13d0:	99 81       	ldd	r25, Y+1	; 0x01
    13d2:	c0 5f       	subi	r28, 0xF0	; 240
    13d4:	d0 40       	sbci	r29, 0x00	; 0
    13d6:	01 96       	adiw	r24, 0x01	; 1
    13d8:	c0 51       	subi	r28, 0x10	; 16
    13da:	df 4f       	sbci	r29, 0xFF	; 255
    13dc:	99 83       	std	Y+1, r25	; 0x01
    13de:	88 83       	st	Y, r24
    13e0:	c0 5f       	subi	r28, 0xF0	; 240
    13e2:	d0 40       	sbci	r29, 0x00	; 0
    13e4:	cc 50       	subi	r28, 0x0C	; 12
    13e6:	df 4f       	sbci	r29, 0xFF	; 255
    13e8:	98 81       	ld	r25, Y
    13ea:	c4 5f       	subi	r28, 0xF4	; 244
    13ec:	d0 40       	sbci	r29, 0x00	; 0
    13ee:	91 50       	subi	r25, 0x01	; 1
    13f0:	cc 50       	subi	r28, 0x0C	; 12
    13f2:	df 4f       	sbci	r29, 0xFF	; 255
    13f4:	98 83       	st	Y, r25
    13f6:	c4 5f       	subi	r28, 0xF4	; 244
    13f8:	d0 40       	sbci	r29, 0x00	; 0
    13fa:	cc 50       	subi	r28, 0x0C	; 12
    13fc:	df 4f       	sbci	r29, 0xFF	; 255
    13fe:	e8 81       	ld	r30, Y
    1400:	c4 5f       	subi	r28, 0xF4	; 244
    1402:	d0 40       	sbci	r29, 0x00	; 0
    1404:	ee 23       	and	r30, r30
    1406:	31 f6       	brne	.-116    	; 0x1394 <main+0x4c>
	UART_init(&UART_Config);
    1408:	ce 01       	movw	r24, r28
    140a:	87 51       	subi	r24, 0x17	; 23
    140c:	9f 4f       	sbci	r25, 0xFF	; 255
    140e:	0e 94 c5 22 	call	0x458a	; 0x458a <UART_init>
	while (1) {

		get_Passwords();
    1412:	0e 94 a3 05 	call	0xb46	; 0xb46 <get_Passwords>
		/* Receive the result of comparison between the 2 passwords from the CONTROL_ECU */
		flag1 = UART_recieveByte();
    1416:	0e 94 90 23 	call	0x4720	; 0x4720 <UART_recieveByte>
    141a:	80 93 9e 01 	sts	0x019E, r24
    141e:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <main+0x178c>
		/* Proceed the application in case 2 passwords are equal */
		while (flag1 == 1) {

			LCD_displayString("+ : Open Door");
    1422:	8b ea       	ldi	r24, 0xAB	; 171
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	0e 94 14 22 	call	0x4428	; 0x4428 <LCD_displayString>
			LCD_moveCursor(1, 0);
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	0e 94 3d 22 	call	0x447a	; 0x447a <LCD_moveCursor>
			LCD_displayString("- : Change Pass");
    1432:	89 eb       	ldi	r24, 0xB9	; 185
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 14 22 	call	0x4428	; 0x4428 <LCD_displayString>
			key = KEYPAD_getPressedKey();
    143a:	0e 94 0f 1c 	call	0x381e	; 0x381e <KEYPAD_getPressedKey>
    143e:	80 93 b2 01 	sts	0x01B2, r24
    1442:	fe 01       	movw	r30, r28
    1444:	e3 52       	subi	r30, 0x23	; 35
    1446:	ff 4f       	sbci	r31, 0xFF	; 255
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	aa ef       	ldi	r26, 0xFA	; 250
    144e:	b3 e4       	ldi	r27, 0x43	; 67
    1450:	80 83       	st	Z, r24
    1452:	91 83       	std	Z+1, r25	; 0x01
    1454:	a2 83       	std	Z+2, r26	; 0x02
    1456:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1458:	8e 01       	movw	r16, r28
    145a:	07 52       	subi	r16, 0x27	; 39
    145c:	1f 4f       	sbci	r17, 0xFF	; 255
    145e:	fe 01       	movw	r30, r28
    1460:	e3 52       	subi	r30, 0x23	; 35
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	60 81       	ld	r22, Z
    1466:	71 81       	ldd	r23, Z+1	; 0x01
    1468:	82 81       	ldd	r24, Z+2	; 0x02
    146a:	93 81       	ldd	r25, Z+3	; 0x03
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	4a ef       	ldi	r20, 0xFA	; 250
    1472:	54 e4       	ldi	r21, 0x44	; 68
    1474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	f8 01       	movw	r30, r16
    147e:	80 83       	st	Z, r24
    1480:	91 83       	std	Z+1, r25	; 0x01
    1482:	a2 83       	std	Z+2, r26	; 0x02
    1484:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1486:	fe 01       	movw	r30, r28
    1488:	e7 52       	subi	r30, 0x27	; 39
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	60 81       	ld	r22, Z
    148e:	71 81       	ldd	r23, Z+1	; 0x01
    1490:	82 81       	ldd	r24, Z+2	; 0x02
    1492:	93 81       	ldd	r25, Z+3	; 0x03
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e8       	ldi	r20, 0x80	; 128
    149a:	5f e3       	ldi	r21, 0x3F	; 63
    149c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14a0:	88 23       	and	r24, r24
    14a2:	44 f4       	brge	.+16     	; 0x14b4 <main+0x16c>
		__ticks = 1;
    14a4:	fe 01       	movw	r30, r28
    14a6:	e9 52       	subi	r30, 0x29	; 41
    14a8:	ff 4f       	sbci	r31, 0xFF	; 255
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	91 83       	std	Z+1, r25	; 0x01
    14b0:	80 83       	st	Z, r24
    14b2:	64 c0       	rjmp	.+200    	; 0x157c <main+0x234>
	else if (__tmp > 65535)
    14b4:	fe 01       	movw	r30, r28
    14b6:	e7 52       	subi	r30, 0x27	; 39
    14b8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ba:	60 81       	ld	r22, Z
    14bc:	71 81       	ldd	r23, Z+1	; 0x01
    14be:	82 81       	ldd	r24, Z+2	; 0x02
    14c0:	93 81       	ldd	r25, Z+3	; 0x03
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	3f ef       	ldi	r19, 0xFF	; 255
    14c6:	4f e7       	ldi	r20, 0x7F	; 127
    14c8:	57 e4       	ldi	r21, 0x47	; 71
    14ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14ce:	18 16       	cp	r1, r24
    14d0:	0c f0       	brlt	.+2      	; 0x14d4 <main+0x18c>
    14d2:	43 c0       	rjmp	.+134    	; 0x155a <main+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d4:	fe 01       	movw	r30, r28
    14d6:	e3 52       	subi	r30, 0x23	; 35
    14d8:	ff 4f       	sbci	r31, 0xFF	; 255
    14da:	60 81       	ld	r22, Z
    14dc:	71 81       	ldd	r23, Z+1	; 0x01
    14de:	82 81       	ldd	r24, Z+2	; 0x02
    14e0:	93 81       	ldd	r25, Z+3	; 0x03
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e2       	ldi	r20, 0x20	; 32
    14e8:	51 e4       	ldi	r21, 0x41	; 65
    14ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	8e 01       	movw	r16, r28
    14f4:	09 52       	subi	r16, 0x29	; 41
    14f6:	1f 4f       	sbci	r17, 0xFF	; 255
    14f8:	bc 01       	movw	r22, r24
    14fa:	cd 01       	movw	r24, r26
    14fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	f8 01       	movw	r30, r16
    1506:	91 83       	std	Z+1, r25	; 0x01
    1508:	80 83       	st	Z, r24
    150a:	1f c0       	rjmp	.+62     	; 0x154a <main+0x202>
    150c:	fe 01       	movw	r30, r28
    150e:	eb 52       	subi	r30, 0x2B	; 43
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	88 ec       	ldi	r24, 0xC8	; 200
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	91 83       	std	Z+1, r25	; 0x01
    1518:	80 83       	st	Z, r24
    151a:	fe 01       	movw	r30, r28
    151c:	eb 52       	subi	r30, 0x2B	; 43
    151e:	ff 4f       	sbci	r31, 0xFF	; 255
    1520:	80 81       	ld	r24, Z
    1522:	91 81       	ldd	r25, Z+1	; 0x01
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	f1 f7       	brne	.-4      	; 0x1524 <main+0x1dc>
    1528:	fe 01       	movw	r30, r28
    152a:	eb 52       	subi	r30, 0x2B	; 43
    152c:	ff 4f       	sbci	r31, 0xFF	; 255
    152e:	91 83       	std	Z+1, r25	; 0x01
    1530:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1532:	de 01       	movw	r26, r28
    1534:	a9 52       	subi	r26, 0x29	; 41
    1536:	bf 4f       	sbci	r27, 0xFF	; 255
    1538:	fe 01       	movw	r30, r28
    153a:	e9 52       	subi	r30, 0x29	; 41
    153c:	ff 4f       	sbci	r31, 0xFF	; 255
    153e:	80 81       	ld	r24, Z
    1540:	91 81       	ldd	r25, Z+1	; 0x01
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	11 96       	adiw	r26, 0x01	; 1
    1546:	9c 93       	st	X, r25
    1548:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    154a:	fe 01       	movw	r30, r28
    154c:	e9 52       	subi	r30, 0x29	; 41
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	80 81       	ld	r24, Z
    1552:	91 81       	ldd	r25, Z+1	; 0x01
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	d1 f6       	brne	.-76     	; 0x150c <main+0x1c4>
    1558:	28 c0       	rjmp	.+80     	; 0x15aa <main+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    155a:	8e 01       	movw	r16, r28
    155c:	09 52       	subi	r16, 0x29	; 41
    155e:	1f 4f       	sbci	r17, 0xFF	; 255
    1560:	fe 01       	movw	r30, r28
    1562:	e7 52       	subi	r30, 0x27	; 39
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	60 81       	ld	r22, Z
    1568:	71 81       	ldd	r23, Z+1	; 0x01
    156a:	82 81       	ldd	r24, Z+2	; 0x02
    156c:	93 81       	ldd	r25, Z+3	; 0x03
    156e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	f8 01       	movw	r30, r16
    1578:	91 83       	std	Z+1, r25	; 0x01
    157a:	80 83       	st	Z, r24
    157c:	de 01       	movw	r26, r28
    157e:	ad 52       	subi	r26, 0x2D	; 45
    1580:	bf 4f       	sbci	r27, 0xFF	; 255
    1582:	fe 01       	movw	r30, r28
    1584:	e9 52       	subi	r30, 0x29	; 41
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	80 81       	ld	r24, Z
    158a:	91 81       	ldd	r25, Z+1	; 0x01
    158c:	11 96       	adiw	r26, 0x01	; 1
    158e:	9c 93       	st	X, r25
    1590:	8e 93       	st	-X, r24
    1592:	fe 01       	movw	r30, r28
    1594:	ed 52       	subi	r30, 0x2D	; 45
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	80 81       	ld	r24, Z
    159a:	91 81       	ldd	r25, Z+1	; 0x01
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	f1 f7       	brne	.-4      	; 0x159c <main+0x254>
    15a0:	fe 01       	movw	r30, r28
    15a2:	ed 52       	subi	r30, 0x2D	; 45
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	91 83       	std	Z+1, r25	; 0x01
    15a8:	80 83       	st	Z, r24
			_delay_ms(500); /* Press time */
			if (key == '+') {
    15aa:	80 91 b2 01 	lds	r24, 0x01B2
    15ae:	8b 32       	cpi	r24, 0x2B	; 43
    15b0:	09 f0       	breq	.+2      	; 0x15b4 <main+0x26c>
    15b2:	c5 c5       	rjmp	.+2954   	; 0x213e <main+0xdf6>
				LCD_clearScreen();
    15b4:	0e 94 bb 22 	call	0x4576	; 0x4576 <LCD_clearScreen>
				LCD_displayString("Plz enter pass:");
    15b8:	80 e6       	ldi	r24, 0x60	; 96
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	0e 94 14 22 	call	0x4428	; 0x4428 <LCD_displayString>
				LCD_moveCursor(1, 0);
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	60 e0       	ldi	r22, 0x00	; 0
    15c4:	0e 94 3d 22 	call	0x447a	; 0x447a <LCD_moveCursor>
				for (int i = 0; i < 5; i++) {
    15c8:	fe 01       	movw	r30, r28
    15ca:	e9 51       	subi	r30, 0x19	; 25
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	11 82       	std	Z+1, r1	; 0x01
    15d0:	10 82       	st	Z, r1
    15d2:	d9 c0       	rjmp	.+434    	; 0x1786 <main+0x43e>
					/* Get the pressed key number, if any switch pressed for more than 500 ms it will considered more than one press */
					key = KEYPAD_getPressedKey();
    15d4:	0e 94 0f 1c 	call	0x381e	; 0x381e <KEYPAD_getPressedKey>
    15d8:	80 93 b2 01 	sts	0x01B2, r24
					new_pass[i] = key;
    15dc:	fe 01       	movw	r30, r28
    15de:	e9 51       	subi	r30, 0x19	; 25
    15e0:	ff 4f       	sbci	r31, 0xFF	; 255
    15e2:	80 81       	ld	r24, Z
    15e4:	91 81       	ldd	r25, Z+1	; 0x01
    15e6:	20 91 b2 01 	lds	r18, 0x01B2
    15ea:	fc 01       	movw	r30, r24
    15ec:	e8 55       	subi	r30, 0x58	; 88
    15ee:	fe 4f       	sbci	r31, 0xFE	; 254
    15f0:	20 83       	st	Z, r18
					if ((key <= 9) && (key >= 0)) {
    15f2:	80 91 b2 01 	lds	r24, 0x01B2
    15f6:	8a 30       	cpi	r24, 0x0A	; 10
    15f8:	20 f4       	brcc	.+8      	; 0x1602 <main+0x2ba>
						LCD_displayCharacter('*'); /* display the pressed keypad switch */
    15fa:	8a e2       	ldi	r24, 0x2A	; 42
    15fc:	0e 94 25 20 	call	0x404a	; 0x404a <LCD_displayCharacter>
    1600:	03 c0       	rjmp	.+6      	; 0x1608 <main+0x2c0>
					} else {
						LCD_displayCharacter('*'); /* display the pressed keypad switch */
    1602:	8a e2       	ldi	r24, 0x2A	; 42
    1604:	0e 94 25 20 	call	0x404a	; 0x404a <LCD_displayCharacter>
    1608:	fe 01       	movw	r30, r28
    160a:	e1 53       	subi	r30, 0x31	; 49
    160c:	ff 4f       	sbci	r31, 0xFF	; 255
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	aa ef       	ldi	r26, 0xFA	; 250
    1614:	b3 e4       	ldi	r27, 0x43	; 67
    1616:	80 83       	st	Z, r24
    1618:	91 83       	std	Z+1, r25	; 0x01
    161a:	a2 83       	std	Z+2, r26	; 0x02
    161c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    161e:	8e 01       	movw	r16, r28
    1620:	05 53       	subi	r16, 0x35	; 53
    1622:	1f 4f       	sbci	r17, 0xFF	; 255
    1624:	fe 01       	movw	r30, r28
    1626:	e1 53       	subi	r30, 0x31	; 49
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	60 81       	ld	r22, Z
    162c:	71 81       	ldd	r23, Z+1	; 0x01
    162e:	82 81       	ldd	r24, Z+2	; 0x02
    1630:	93 81       	ldd	r25, Z+3	; 0x03
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	4a ef       	ldi	r20, 0xFA	; 250
    1638:	54 e4       	ldi	r21, 0x44	; 68
    163a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	f8 01       	movw	r30, r16
    1644:	80 83       	st	Z, r24
    1646:	91 83       	std	Z+1, r25	; 0x01
    1648:	a2 83       	std	Z+2, r26	; 0x02
    164a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    164c:	fe 01       	movw	r30, r28
    164e:	e5 53       	subi	r30, 0x35	; 53
    1650:	ff 4f       	sbci	r31, 0xFF	; 255
    1652:	60 81       	ld	r22, Z
    1654:	71 81       	ldd	r23, Z+1	; 0x01
    1656:	82 81       	ldd	r24, Z+2	; 0x02
    1658:	93 81       	ldd	r25, Z+3	; 0x03
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	40 e8       	ldi	r20, 0x80	; 128
    1660:	5f e3       	ldi	r21, 0x3F	; 63
    1662:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1666:	88 23       	and	r24, r24
    1668:	44 f4       	brge	.+16     	; 0x167a <main+0x332>
		__ticks = 1;
    166a:	fe 01       	movw	r30, r28
    166c:	e7 53       	subi	r30, 0x37	; 55
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	91 83       	std	Z+1, r25	; 0x01
    1676:	80 83       	st	Z, r24
    1678:	64 c0       	rjmp	.+200    	; 0x1742 <main+0x3fa>
	else if (__tmp > 65535)
    167a:	fe 01       	movw	r30, r28
    167c:	e5 53       	subi	r30, 0x35	; 53
    167e:	ff 4f       	sbci	r31, 0xFF	; 255
    1680:	60 81       	ld	r22, Z
    1682:	71 81       	ldd	r23, Z+1	; 0x01
    1684:	82 81       	ldd	r24, Z+2	; 0x02
    1686:	93 81       	ldd	r25, Z+3	; 0x03
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	3f ef       	ldi	r19, 0xFF	; 255
    168c:	4f e7       	ldi	r20, 0x7F	; 127
    168e:	57 e4       	ldi	r21, 0x47	; 71
    1690:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1694:	18 16       	cp	r1, r24
    1696:	0c f0       	brlt	.+2      	; 0x169a <main+0x352>
    1698:	43 c0       	rjmp	.+134    	; 0x1720 <main+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169a:	fe 01       	movw	r30, r28
    169c:	e1 53       	subi	r30, 0x31	; 49
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	60 81       	ld	r22, Z
    16a2:	71 81       	ldd	r23, Z+1	; 0x01
    16a4:	82 81       	ldd	r24, Z+2	; 0x02
    16a6:	93 81       	ldd	r25, Z+3	; 0x03
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	40 e2       	ldi	r20, 0x20	; 32
    16ae:	51 e4       	ldi	r21, 0x41	; 65
    16b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	8e 01       	movw	r16, r28
    16ba:	07 53       	subi	r16, 0x37	; 55
    16bc:	1f 4f       	sbci	r17, 0xFF	; 255
    16be:	bc 01       	movw	r22, r24
    16c0:	cd 01       	movw	r24, r26
    16c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	f8 01       	movw	r30, r16
    16cc:	91 83       	std	Z+1, r25	; 0x01
    16ce:	80 83       	st	Z, r24
    16d0:	1f c0       	rjmp	.+62     	; 0x1710 <main+0x3c8>
    16d2:	fe 01       	movw	r30, r28
    16d4:	e9 53       	subi	r30, 0x39	; 57
    16d6:	ff 4f       	sbci	r31, 0xFF	; 255
    16d8:	88 ec       	ldi	r24, 0xC8	; 200
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	91 83       	std	Z+1, r25	; 0x01
    16de:	80 83       	st	Z, r24
    16e0:	fe 01       	movw	r30, r28
    16e2:	e9 53       	subi	r30, 0x39	; 57
    16e4:	ff 4f       	sbci	r31, 0xFF	; 255
    16e6:	80 81       	ld	r24, Z
    16e8:	91 81       	ldd	r25, Z+1	; 0x01
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	f1 f7       	brne	.-4      	; 0x16ea <main+0x3a2>
    16ee:	fe 01       	movw	r30, r28
    16f0:	e9 53       	subi	r30, 0x39	; 57
    16f2:	ff 4f       	sbci	r31, 0xFF	; 255
    16f4:	91 83       	std	Z+1, r25	; 0x01
    16f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f8:	de 01       	movw	r26, r28
    16fa:	a7 53       	subi	r26, 0x37	; 55
    16fc:	bf 4f       	sbci	r27, 0xFF	; 255
    16fe:	fe 01       	movw	r30, r28
    1700:	e7 53       	subi	r30, 0x37	; 55
    1702:	ff 4f       	sbci	r31, 0xFF	; 255
    1704:	80 81       	ld	r24, Z
    1706:	91 81       	ldd	r25, Z+1	; 0x01
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	11 96       	adiw	r26, 0x01	; 1
    170c:	9c 93       	st	X, r25
    170e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1710:	fe 01       	movw	r30, r28
    1712:	e7 53       	subi	r30, 0x37	; 55
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	80 81       	ld	r24, Z
    1718:	91 81       	ldd	r25, Z+1	; 0x01
    171a:	00 97       	sbiw	r24, 0x00	; 0
    171c:	d1 f6       	brne	.-76     	; 0x16d2 <main+0x38a>
    171e:	27 c0       	rjmp	.+78     	; 0x176e <main+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1720:	8e 01       	movw	r16, r28
    1722:	07 53       	subi	r16, 0x37	; 55
    1724:	1f 4f       	sbci	r17, 0xFF	; 255
    1726:	fe 01       	movw	r30, r28
    1728:	e5 53       	subi	r30, 0x35	; 53
    172a:	ff 4f       	sbci	r31, 0xFF	; 255
    172c:	60 81       	ld	r22, Z
    172e:	71 81       	ldd	r23, Z+1	; 0x01
    1730:	82 81       	ldd	r24, Z+2	; 0x02
    1732:	93 81       	ldd	r25, Z+3	; 0x03
    1734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	f8 01       	movw	r30, r16
    173e:	91 83       	std	Z+1, r25	; 0x01
    1740:	80 83       	st	Z, r24
    1742:	de 01       	movw	r26, r28
    1744:	ab 53       	subi	r26, 0x3B	; 59
    1746:	bf 4f       	sbci	r27, 0xFF	; 255
    1748:	fe 01       	movw	r30, r28
    174a:	e7 53       	subi	r30, 0x37	; 55
    174c:	ff 4f       	sbci	r31, 0xFF	; 255
    174e:	80 81       	ld	r24, Z
    1750:	91 81       	ldd	r25, Z+1	; 0x01
    1752:	8d 93       	st	X+, r24
    1754:	9c 93       	st	X, r25
    1756:	fe 01       	movw	r30, r28
    1758:	eb 53       	subi	r30, 0x3B	; 59
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	80 81       	ld	r24, Z
    175e:	91 81       	ldd	r25, Z+1	; 0x01
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	f1 f7       	brne	.-4      	; 0x1760 <main+0x418>
    1764:	fe 01       	movw	r30, r28
    1766:	eb 53       	subi	r30, 0x3B	; 59
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	91 83       	std	Z+1, r25	; 0x01
    176c:	80 83       	st	Z, r24
			_delay_ms(500); /* Press time */
			if (key == '+') {
				LCD_clearScreen();
				LCD_displayString("Plz enter pass:");
				LCD_moveCursor(1, 0);
				for (int i = 0; i < 5; i++) {
    176e:	de 01       	movw	r26, r28
    1770:	a9 51       	subi	r26, 0x19	; 25
    1772:	bf 4f       	sbci	r27, 0xFF	; 255
    1774:	fe 01       	movw	r30, r28
    1776:	e9 51       	subi	r30, 0x19	; 25
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	80 81       	ld	r24, Z
    177c:	91 81       	ldd	r25, Z+1	; 0x01
    177e:	01 96       	adiw	r24, 0x01	; 1
    1780:	11 96       	adiw	r26, 0x01	; 1
    1782:	9c 93       	st	X, r25
    1784:	8e 93       	st	-X, r24
    1786:	fe 01       	movw	r30, r28
    1788:	e9 51       	subi	r30, 0x19	; 25
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	80 81       	ld	r24, Z
    178e:	91 81       	ldd	r25, Z+1	; 0x01
    1790:	85 30       	cpi	r24, 0x05	; 5
    1792:	91 05       	cpc	r25, r1
    1794:	0c f4       	brge	.+2      	; 0x1798 <main+0x450>
    1796:	1e cf       	rjmp	.-452    	; 0x15d4 <main+0x28c>
						LCD_displayCharacter('*'); /* display the pressed keypad switch */
					}
					_delay_ms(500); /* Press time */
				}
				/* send the new password */
				key = KEYPAD_getPressedKey();
    1798:	0e 94 0f 1c 	call	0x381e	; 0x381e <KEYPAD_getPressedKey>
    179c:	80 93 b2 01 	sts	0x01B2, r24
				if (key == 13) {
    17a0:	80 91 b2 01 	lds	r24, 0x01B2
    17a4:	8d 30       	cpi	r24, 0x0D	; 13
    17a6:	29 f5       	brne	.+74     	; 0x17f2 <main+0x4aa>
					for (int k = 0; k < 5; k++) {
    17a8:	fe 01       	movw	r30, r28
    17aa:	eb 51       	subi	r30, 0x1B	; 27
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	11 82       	std	Z+1, r1	; 0x01
    17b0:	10 82       	st	Z, r1
    17b2:	17 c0       	rjmp	.+46     	; 0x17e2 <main+0x49a>
						UART_sendByte(new_pass[k]);
    17b4:	fe 01       	movw	r30, r28
    17b6:	eb 51       	subi	r30, 0x1B	; 27
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	80 81       	ld	r24, Z
    17bc:	91 81       	ldd	r25, Z+1	; 0x01
    17be:	fc 01       	movw	r30, r24
    17c0:	e8 55       	subi	r30, 0x58	; 88
    17c2:	fe 4f       	sbci	r31, 0xFE	; 254
    17c4:	80 81       	ld	r24, Z
    17c6:	0e 94 79 23 	call	0x46f2	; 0x46f2 <UART_sendByte>
					_delay_ms(500); /* Press time */
				}
				/* send the new password */
				key = KEYPAD_getPressedKey();
				if (key == 13) {
					for (int k = 0; k < 5; k++) {
    17ca:	de 01       	movw	r26, r28
    17cc:	ab 51       	subi	r26, 0x1B	; 27
    17ce:	bf 4f       	sbci	r27, 0xFF	; 255
    17d0:	fe 01       	movw	r30, r28
    17d2:	eb 51       	subi	r30, 0x1B	; 27
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	80 81       	ld	r24, Z
    17d8:	91 81       	ldd	r25, Z+1	; 0x01
    17da:	01 96       	adiw	r24, 0x01	; 1
    17dc:	11 96       	adiw	r26, 0x01	; 1
    17de:	9c 93       	st	X, r25
    17e0:	8e 93       	st	-X, r24
    17e2:	fe 01       	movw	r30, r28
    17e4:	eb 51       	subi	r30, 0x1B	; 27
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	80 81       	ld	r24, Z
    17ea:	91 81       	ldd	r25, Z+1	; 0x01
    17ec:	85 30       	cpi	r24, 0x05	; 5
    17ee:	91 05       	cpc	r25, r1
    17f0:	0c f3       	brlt	.-62     	; 0x17b4 <main+0x46c>
						UART_sendByte(new_pass[k]);
					}
				}
				/* if the new password is correct, proceed the application */
				check_new_pass = UART_recieveByte();
    17f2:	0e 94 90 23 	call	0x4720	; 0x4720 <UART_recieveByte>
    17f6:	80 93 a5 01 	sts	0x01A5, r24
				if (check_new_pass == 1) {
    17fa:	80 91 a5 01 	lds	r24, 0x01A5
    17fe:	81 30       	cpi	r24, 0x01	; 1
    1800:	09 f0       	breq	.+2      	; 0x1804 <main+0x4bc>
    1802:	03 c3       	rjmp	.+1542   	; 0x1e0a <main+0xac2>
					LCD_clearScreen();
    1804:	0e 94 bb 22 	call	0x4576	; 0x4576 <LCD_clearScreen>
					LCD_displayString("Correct Password");
    1808:	89 ec       	ldi	r24, 0xC9	; 201
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	0e 94 14 22 	call	0x4428	; 0x4428 <LCD_displayString>
    1810:	fe 01       	movw	r30, r28
    1812:	ef 53       	subi	r30, 0x3F	; 63
    1814:	ff 4f       	sbci	r31, 0xFF	; 255
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	aa e7       	ldi	r26, 0x7A	; 122
    181c:	b4 e4       	ldi	r27, 0x44	; 68
    181e:	80 83       	st	Z, r24
    1820:	91 83       	std	Z+1, r25	; 0x01
    1822:	a2 83       	std	Z+2, r26	; 0x02
    1824:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1826:	8e 01       	movw	r16, r28
    1828:	03 54       	subi	r16, 0x43	; 67
    182a:	1f 4f       	sbci	r17, 0xFF	; 255
    182c:	fe 01       	movw	r30, r28
    182e:	ef 53       	subi	r30, 0x3F	; 63
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	60 81       	ld	r22, Z
    1834:	71 81       	ldd	r23, Z+1	; 0x01
    1836:	82 81       	ldd	r24, Z+2	; 0x02
    1838:	93 81       	ldd	r25, Z+3	; 0x03
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	4a ef       	ldi	r20, 0xFA	; 250
    1840:	54 e4       	ldi	r21, 0x44	; 68
    1842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	f8 01       	movw	r30, r16
    184c:	80 83       	st	Z, r24
    184e:	91 83       	std	Z+1, r25	; 0x01
    1850:	a2 83       	std	Z+2, r26	; 0x02
    1852:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1854:	fe 01       	movw	r30, r28
    1856:	e3 54       	subi	r30, 0x43	; 67
    1858:	ff 4f       	sbci	r31, 0xFF	; 255
    185a:	60 81       	ld	r22, Z
    185c:	71 81       	ldd	r23, Z+1	; 0x01
    185e:	82 81       	ldd	r24, Z+2	; 0x02
    1860:	93 81       	ldd	r25, Z+3	; 0x03
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e8       	ldi	r20, 0x80	; 128
    1868:	5f e3       	ldi	r21, 0x3F	; 63
    186a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    186e:	88 23       	and	r24, r24
    1870:	44 f4       	brge	.+16     	; 0x1882 <main+0x53a>
		__ticks = 1;
    1872:	fe 01       	movw	r30, r28
    1874:	e5 54       	subi	r30, 0x45	; 69
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	91 83       	std	Z+1, r25	; 0x01
    187e:	80 83       	st	Z, r24
    1880:	64 c0       	rjmp	.+200    	; 0x194a <main+0x602>
	else if (__tmp > 65535)
    1882:	fe 01       	movw	r30, r28
    1884:	e3 54       	subi	r30, 0x43	; 67
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	60 81       	ld	r22, Z
    188a:	71 81       	ldd	r23, Z+1	; 0x01
    188c:	82 81       	ldd	r24, Z+2	; 0x02
    188e:	93 81       	ldd	r25, Z+3	; 0x03
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	3f ef       	ldi	r19, 0xFF	; 255
    1894:	4f e7       	ldi	r20, 0x7F	; 127
    1896:	57 e4       	ldi	r21, 0x47	; 71
    1898:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    189c:	18 16       	cp	r1, r24
    189e:	0c f0       	brlt	.+2      	; 0x18a2 <main+0x55a>
    18a0:	43 c0       	rjmp	.+134    	; 0x1928 <main+0x5e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a2:	fe 01       	movw	r30, r28
    18a4:	ef 53       	subi	r30, 0x3F	; 63
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	60 81       	ld	r22, Z
    18aa:	71 81       	ldd	r23, Z+1	; 0x01
    18ac:	82 81       	ldd	r24, Z+2	; 0x02
    18ae:	93 81       	ldd	r25, Z+3	; 0x03
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	40 e2       	ldi	r20, 0x20	; 32
    18b6:	51 e4       	ldi	r21, 0x41	; 65
    18b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	8e 01       	movw	r16, r28
    18c2:	05 54       	subi	r16, 0x45	; 69
    18c4:	1f 4f       	sbci	r17, 0xFF	; 255
    18c6:	bc 01       	movw	r22, r24
    18c8:	cd 01       	movw	r24, r26
    18ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	f8 01       	movw	r30, r16
    18d4:	91 83       	std	Z+1, r25	; 0x01
    18d6:	80 83       	st	Z, r24
    18d8:	1f c0       	rjmp	.+62     	; 0x1918 <main+0x5d0>
    18da:	fe 01       	movw	r30, r28
    18dc:	e7 54       	subi	r30, 0x47	; 71
    18de:	ff 4f       	sbci	r31, 0xFF	; 255
    18e0:	88 ec       	ldi	r24, 0xC8	; 200
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	91 83       	std	Z+1, r25	; 0x01
    18e6:	80 83       	st	Z, r24
    18e8:	fe 01       	movw	r30, r28
    18ea:	e7 54       	subi	r30, 0x47	; 71
    18ec:	ff 4f       	sbci	r31, 0xFF	; 255
    18ee:	80 81       	ld	r24, Z
    18f0:	91 81       	ldd	r25, Z+1	; 0x01
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	f1 f7       	brne	.-4      	; 0x18f2 <main+0x5aa>
    18f6:	fe 01       	movw	r30, r28
    18f8:	e7 54       	subi	r30, 0x47	; 71
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	91 83       	std	Z+1, r25	; 0x01
    18fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1900:	de 01       	movw	r26, r28
    1902:	a5 54       	subi	r26, 0x45	; 69
    1904:	bf 4f       	sbci	r27, 0xFF	; 255
    1906:	fe 01       	movw	r30, r28
    1908:	e5 54       	subi	r30, 0x45	; 69
    190a:	ff 4f       	sbci	r31, 0xFF	; 255
    190c:	80 81       	ld	r24, Z
    190e:	91 81       	ldd	r25, Z+1	; 0x01
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	11 96       	adiw	r26, 0x01	; 1
    1914:	9c 93       	st	X, r25
    1916:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1918:	fe 01       	movw	r30, r28
    191a:	e5 54       	subi	r30, 0x45	; 69
    191c:	ff 4f       	sbci	r31, 0xFF	; 255
    191e:	80 81       	ld	r24, Z
    1920:	91 81       	ldd	r25, Z+1	; 0x01
    1922:	00 97       	sbiw	r24, 0x00	; 0
    1924:	d1 f6       	brne	.-76     	; 0x18da <main+0x592>
    1926:	27 c0       	rjmp	.+78     	; 0x1976 <main+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1928:	8e 01       	movw	r16, r28
    192a:	05 54       	subi	r16, 0x45	; 69
    192c:	1f 4f       	sbci	r17, 0xFF	; 255
    192e:	fe 01       	movw	r30, r28
    1930:	e3 54       	subi	r30, 0x43	; 67
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	60 81       	ld	r22, Z
    1936:	71 81       	ldd	r23, Z+1	; 0x01
    1938:	82 81       	ldd	r24, Z+2	; 0x02
    193a:	93 81       	ldd	r25, Z+3	; 0x03
    193c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	f8 01       	movw	r30, r16
    1946:	91 83       	std	Z+1, r25	; 0x01
    1948:	80 83       	st	Z, r24
    194a:	de 01       	movw	r26, r28
    194c:	a9 54       	subi	r26, 0x49	; 73
    194e:	bf 4f       	sbci	r27, 0xFF	; 255
    1950:	fe 01       	movw	r30, r28
    1952:	e5 54       	subi	r30, 0x45	; 69
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	80 81       	ld	r24, Z
    1958:	91 81       	ldd	r25, Z+1	; 0x01
    195a:	8d 93       	st	X+, r24
    195c:	9c 93       	st	X, r25
    195e:	fe 01       	movw	r30, r28
    1960:	e9 54       	subi	r30, 0x49	; 73
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	80 81       	ld	r24, Z
    1966:	91 81       	ldd	r25, Z+1	; 0x01
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	f1 f7       	brne	.-4      	; 0x1968 <main+0x620>
    196c:	fe 01       	movw	r30, r28
    196e:	e9 54       	subi	r30, 0x49	; 73
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	91 83       	std	Z+1, r25	; 0x01
    1974:	80 83       	st	Z, r24
					_delay_ms(1000);
					LCD_clearScreen();
    1976:	0e 94 bb 22 	call	0x4576	; 0x4576 <LCD_clearScreen>
					UART_sendByte(open_door); /* Send the action needed to be taken to the CONTROL_ECU */
    197a:	80 91 95 01 	lds	r24, 0x0195
    197e:	0e 94 79 23 	call	0x46f2	; 0x46f2 <UART_sendByte>
					LCD_displayString("Unlocking Door");
    1982:	8a ed       	ldi	r24, 0xDA	; 218
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	0e 94 14 22 	call	0x4428	; 0x4428 <LCD_displayString>
    198a:	fe 01       	movw	r30, r28
    198c:	ed 54       	subi	r30, 0x4D	; 77
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	9c e7       	ldi	r25, 0x7C	; 124
    1994:	a2 e1       	ldi	r26, 0x12	; 18
    1996:	b8 e4       	ldi	r27, 0x48	; 72
    1998:	80 83       	st	Z, r24
    199a:	91 83       	std	Z+1, r25	; 0x01
    199c:	a2 83       	std	Z+2, r26	; 0x02
    199e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a0:	8e 01       	movw	r16, r28
    19a2:	01 55       	subi	r16, 0x51	; 81
    19a4:	1f 4f       	sbci	r17, 0xFF	; 255
    19a6:	fe 01       	movw	r30, r28
    19a8:	ed 54       	subi	r30, 0x4D	; 77
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	60 81       	ld	r22, Z
    19ae:	71 81       	ldd	r23, Z+1	; 0x01
    19b0:	82 81       	ldd	r24, Z+2	; 0x02
    19b2:	93 81       	ldd	r25, Z+3	; 0x03
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	4a ef       	ldi	r20, 0xFA	; 250
    19ba:	54 e4       	ldi	r21, 0x44	; 68
    19bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	f8 01       	movw	r30, r16
    19c6:	80 83       	st	Z, r24
    19c8:	91 83       	std	Z+1, r25	; 0x01
    19ca:	a2 83       	std	Z+2, r26	; 0x02
    19cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19ce:	fe 01       	movw	r30, r28
    19d0:	e1 55       	subi	r30, 0x51	; 81
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	60 81       	ld	r22, Z
    19d6:	71 81       	ldd	r23, Z+1	; 0x01
    19d8:	82 81       	ldd	r24, Z+2	; 0x02
    19da:	93 81       	ldd	r25, Z+3	; 0x03
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	40 e8       	ldi	r20, 0x80	; 128
    19e2:	5f e3       	ldi	r21, 0x3F	; 63
    19e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19e8:	88 23       	and	r24, r24
    19ea:	44 f4       	brge	.+16     	; 0x19fc <main+0x6b4>
		__ticks = 1;
    19ec:	fe 01       	movw	r30, r28
    19ee:	e3 55       	subi	r30, 0x53	; 83
    19f0:	ff 4f       	sbci	r31, 0xFF	; 255
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	91 83       	std	Z+1, r25	; 0x01
    19f8:	80 83       	st	Z, r24
    19fa:	64 c0       	rjmp	.+200    	; 0x1ac4 <main+0x77c>
	else if (__tmp > 65535)
    19fc:	fe 01       	movw	r30, r28
    19fe:	e1 55       	subi	r30, 0x51	; 81
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	60 81       	ld	r22, Z
    1a04:	71 81       	ldd	r23, Z+1	; 0x01
    1a06:	82 81       	ldd	r24, Z+2	; 0x02
    1a08:	93 81       	ldd	r25, Z+3	; 0x03
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	3f ef       	ldi	r19, 0xFF	; 255
    1a0e:	4f e7       	ldi	r20, 0x7F	; 127
    1a10:	57 e4       	ldi	r21, 0x47	; 71
    1a12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a16:	18 16       	cp	r1, r24
    1a18:	0c f0       	brlt	.+2      	; 0x1a1c <main+0x6d4>
    1a1a:	43 c0       	rjmp	.+134    	; 0x1aa2 <main+0x75a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	ed 54       	subi	r30, 0x4D	; 77
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	60 81       	ld	r22, Z
    1a24:	71 81       	ldd	r23, Z+1	; 0x01
    1a26:	82 81       	ldd	r24, Z+2	; 0x02
    1a28:	93 81       	ldd	r25, Z+3	; 0x03
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	40 e2       	ldi	r20, 0x20	; 32
    1a30:	51 e4       	ldi	r21, 0x41	; 65
    1a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	8e 01       	movw	r16, r28
    1a3c:	03 55       	subi	r16, 0x53	; 83
    1a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a40:	bc 01       	movw	r22, r24
    1a42:	cd 01       	movw	r24, r26
    1a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	f8 01       	movw	r30, r16
    1a4e:	91 83       	std	Z+1, r25	; 0x01
    1a50:	80 83       	st	Z, r24
    1a52:	1f c0       	rjmp	.+62     	; 0x1a92 <main+0x74a>
    1a54:	fe 01       	movw	r30, r28
    1a56:	e5 55       	subi	r30, 0x55	; 85
    1a58:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5a:	88 ec       	ldi	r24, 0xC8	; 200
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	91 83       	std	Z+1, r25	; 0x01
    1a60:	80 83       	st	Z, r24
    1a62:	fe 01       	movw	r30, r28
    1a64:	e5 55       	subi	r30, 0x55	; 85
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	80 81       	ld	r24, Z
    1a6a:	91 81       	ldd	r25, Z+1	; 0x01
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	f1 f7       	brne	.-4      	; 0x1a6c <main+0x724>
    1a70:	fe 01       	movw	r30, r28
    1a72:	e5 55       	subi	r30, 0x55	; 85
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	91 83       	std	Z+1, r25	; 0x01
    1a78:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7a:	de 01       	movw	r26, r28
    1a7c:	a3 55       	subi	r26, 0x53	; 83
    1a7e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a80:	fe 01       	movw	r30, r28
    1a82:	e3 55       	subi	r30, 0x53	; 83
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	80 81       	ld	r24, Z
    1a88:	91 81       	ldd	r25, Z+1	; 0x01
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	11 96       	adiw	r26, 0x01	; 1
    1a8e:	9c 93       	st	X, r25
    1a90:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a92:	fe 01       	movw	r30, r28
    1a94:	e3 55       	subi	r30, 0x53	; 83
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	80 81       	ld	r24, Z
    1a9a:	91 81       	ldd	r25, Z+1	; 0x01
    1a9c:	00 97       	sbiw	r24, 0x00	; 0
    1a9e:	d1 f6       	brne	.-76     	; 0x1a54 <main+0x70c>
    1aa0:	27 c0       	rjmp	.+78     	; 0x1af0 <main+0x7a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa2:	8e 01       	movw	r16, r28
    1aa4:	03 55       	subi	r16, 0x53	; 83
    1aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	e1 55       	subi	r30, 0x51	; 81
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	60 81       	ld	r22, Z
    1ab0:	71 81       	ldd	r23, Z+1	; 0x01
    1ab2:	82 81       	ldd	r24, Z+2	; 0x02
    1ab4:	93 81       	ldd	r25, Z+3	; 0x03
    1ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	f8 01       	movw	r30, r16
    1ac0:	91 83       	std	Z+1, r25	; 0x01
    1ac2:	80 83       	st	Z, r24
    1ac4:	de 01       	movw	r26, r28
    1ac6:	a7 55       	subi	r26, 0x57	; 87
    1ac8:	bf 4f       	sbci	r27, 0xFF	; 255
    1aca:	fe 01       	movw	r30, r28
    1acc:	e3 55       	subi	r30, 0x53	; 83
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	80 81       	ld	r24, Z
    1ad2:	91 81       	ldd	r25, Z+1	; 0x01
    1ad4:	8d 93       	st	X+, r24
    1ad6:	9c 93       	st	X, r25
    1ad8:	fe 01       	movw	r30, r28
    1ada:	e7 55       	subi	r30, 0x57	; 87
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	80 81       	ld	r24, Z
    1ae0:	91 81       	ldd	r25, Z+1	; 0x01
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
    1ae4:	f1 f7       	brne	.-4      	; 0x1ae2 <main+0x79a>
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	e7 55       	subi	r30, 0x57	; 87
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	91 83       	std	Z+1, r25	; 0x01
    1aee:	80 83       	st	Z, r24
					//Timer_init(&Timer_ConfigType_1);
					//Timer_setCallBack(door_Unlock_Timer,TIMER1);
					_delay_ms(150000);
					LCD_clearScreen();
    1af0:	0e 94 bb 22 	call	0x4576	; 0x4576 <LCD_clearScreen>
    1af4:	fe 01       	movw	r30, r28
    1af6:	eb 55       	subi	r30, 0x5B	; 91
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	a0 e2       	ldi	r26, 0x20	; 32
    1b00:	b1 e4       	ldi	r27, 0x41	; 65
    1b02:	80 83       	st	Z, r24
    1b04:	91 83       	std	Z+1, r25	; 0x01
    1b06:	a2 83       	std	Z+2, r26	; 0x02
    1b08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b0a:	8e 01       	movw	r16, r28
    1b0c:	0f 55       	subi	r16, 0x5F	; 95
    1b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b10:	fe 01       	movw	r30, r28
    1b12:	eb 55       	subi	r30, 0x5B	; 91
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	60 81       	ld	r22, Z
    1b18:	71 81       	ldd	r23, Z+1	; 0x01
    1b1a:	82 81       	ldd	r24, Z+2	; 0x02
    1b1c:	93 81       	ldd	r25, Z+3	; 0x03
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	4a ef       	ldi	r20, 0xFA	; 250
    1b24:	54 e4       	ldi	r21, 0x44	; 68
    1b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	f8 01       	movw	r30, r16
    1b30:	80 83       	st	Z, r24
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	a2 83       	std	Z+2, r26	; 0x02
    1b36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b38:	fe 01       	movw	r30, r28
    1b3a:	ef 55       	subi	r30, 0x5F	; 95
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	60 81       	ld	r22, Z
    1b40:	71 81       	ldd	r23, Z+1	; 0x01
    1b42:	82 81       	ldd	r24, Z+2	; 0x02
    1b44:	93 81       	ldd	r25, Z+3	; 0x03
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e8       	ldi	r20, 0x80	; 128
    1b4c:	5f e3       	ldi	r21, 0x3F	; 63
    1b4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b52:	88 23       	and	r24, r24
    1b54:	44 f4       	brge	.+16     	; 0x1b66 <main+0x81e>
		__ticks = 1;
    1b56:	fe 01       	movw	r30, r28
    1b58:	e1 56       	subi	r30, 0x61	; 97
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	91 83       	std	Z+1, r25	; 0x01
    1b62:	80 83       	st	Z, r24
    1b64:	64 c0       	rjmp	.+200    	; 0x1c2e <main+0x8e6>
	else if (__tmp > 65535)
    1b66:	fe 01       	movw	r30, r28
    1b68:	ef 55       	subi	r30, 0x5F	; 95
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	60 81       	ld	r22, Z
    1b6e:	71 81       	ldd	r23, Z+1	; 0x01
    1b70:	82 81       	ldd	r24, Z+2	; 0x02
    1b72:	93 81       	ldd	r25, Z+3	; 0x03
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	3f ef       	ldi	r19, 0xFF	; 255
    1b78:	4f e7       	ldi	r20, 0x7F	; 127
    1b7a:	57 e4       	ldi	r21, 0x47	; 71
    1b7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b80:	18 16       	cp	r1, r24
    1b82:	0c f0       	brlt	.+2      	; 0x1b86 <main+0x83e>
    1b84:	43 c0       	rjmp	.+134    	; 0x1c0c <main+0x8c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b86:	fe 01       	movw	r30, r28
    1b88:	eb 55       	subi	r30, 0x5B	; 91
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	60 81       	ld	r22, Z
    1b8e:	71 81       	ldd	r23, Z+1	; 0x01
    1b90:	82 81       	ldd	r24, Z+2	; 0x02
    1b92:	93 81       	ldd	r25, Z+3	; 0x03
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e2       	ldi	r20, 0x20	; 32
    1b9a:	51 e4       	ldi	r21, 0x41	; 65
    1b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	8e 01       	movw	r16, r28
    1ba6:	01 56       	subi	r16, 0x61	; 97
    1ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    1baa:	bc 01       	movw	r22, r24
    1bac:	cd 01       	movw	r24, r26
    1bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	f8 01       	movw	r30, r16
    1bb8:	91 83       	std	Z+1, r25	; 0x01
    1bba:	80 83       	st	Z, r24
    1bbc:	1f c0       	rjmp	.+62     	; 0x1bfc <main+0x8b4>
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	e3 56       	subi	r30, 0x63	; 99
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc4:	88 ec       	ldi	r24, 0xC8	; 200
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	91 83       	std	Z+1, r25	; 0x01
    1bca:	80 83       	st	Z, r24
    1bcc:	fe 01       	movw	r30, r28
    1bce:	e3 56       	subi	r30, 0x63	; 99
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	80 81       	ld	r24, Z
    1bd4:	91 81       	ldd	r25, Z+1	; 0x01
    1bd6:	01 97       	sbiw	r24, 0x01	; 1
    1bd8:	f1 f7       	brne	.-4      	; 0x1bd6 <main+0x88e>
    1bda:	fe 01       	movw	r30, r28
    1bdc:	e3 56       	subi	r30, 0x63	; 99
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	91 83       	std	Z+1, r25	; 0x01
    1be2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be4:	de 01       	movw	r26, r28
    1be6:	a1 56       	subi	r26, 0x61	; 97
    1be8:	bf 4f       	sbci	r27, 0xFF	; 255
    1bea:	fe 01       	movw	r30, r28
    1bec:	e1 56       	subi	r30, 0x61	; 97
    1bee:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf0:	80 81       	ld	r24, Z
    1bf2:	91 81       	ldd	r25, Z+1	; 0x01
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	11 96       	adiw	r26, 0x01	; 1
    1bf8:	9c 93       	st	X, r25
    1bfa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	e1 56       	subi	r30, 0x61	; 97
    1c00:	ff 4f       	sbci	r31, 0xFF	; 255
    1c02:	80 81       	ld	r24, Z
    1c04:	91 81       	ldd	r25, Z+1	; 0x01
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	d1 f6       	brne	.-76     	; 0x1bbe <main+0x876>
    1c0a:	27 c0       	rjmp	.+78     	; 0x1c5a <main+0x912>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0c:	8e 01       	movw	r16, r28
    1c0e:	01 56       	subi	r16, 0x61	; 97
    1c10:	1f 4f       	sbci	r17, 0xFF	; 255
    1c12:	fe 01       	movw	r30, r28
    1c14:	ef 55       	subi	r30, 0x5F	; 95
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	60 81       	ld	r22, Z
    1c1a:	71 81       	ldd	r23, Z+1	; 0x01
    1c1c:	82 81       	ldd	r24, Z+2	; 0x02
    1c1e:	93 81       	ldd	r25, Z+3	; 0x03
    1c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	f8 01       	movw	r30, r16
    1c2a:	91 83       	std	Z+1, r25	; 0x01
    1c2c:	80 83       	st	Z, r24
    1c2e:	de 01       	movw	r26, r28
    1c30:	a5 56       	subi	r26, 0x65	; 101
    1c32:	bf 4f       	sbci	r27, 0xFF	; 255
    1c34:	fe 01       	movw	r30, r28
    1c36:	e1 56       	subi	r30, 0x61	; 97
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	80 81       	ld	r24, Z
    1c3c:	91 81       	ldd	r25, Z+1	; 0x01
    1c3e:	8d 93       	st	X+, r24
    1c40:	9c 93       	st	X, r25
    1c42:	fe 01       	movw	r30, r28
    1c44:	e5 56       	subi	r30, 0x65	; 101
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	80 81       	ld	r24, Z
    1c4a:	91 81       	ldd	r25, Z+1	; 0x01
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <main+0x904>
    1c50:	fe 01       	movw	r30, r28
    1c52:	e5 56       	subi	r30, 0x65	; 101
    1c54:	ff 4f       	sbci	r31, 0xFF	; 255
    1c56:	91 83       	std	Z+1, r25	; 0x01
    1c58:	80 83       	st	Z, r24
					_delay_ms(10);
					/* Recieve the PIR state form CONTROL_ECU */
					PIR_State = UART_recieveByte();
    1c5a:	0e 94 90 23 	call	0x4720	; 0x4720 <UART_recieveByte>
    1c5e:	80 93 a6 01 	sts	0x01A6, r24
    1c62:	13 c0       	rjmp	.+38     	; 0x1c8a <main+0x942>
					if (PIR_State == 0) {}
					while (PIR_State == 1) {
						PIR_State = UART_recieveByte();
    1c64:	0e 94 90 23 	call	0x4720	; 0x4720 <UART_recieveByte>
    1c68:	80 93 a6 01 	sts	0x01A6, r24
						if (PIR_State == 0)
    1c6c:	80 91 a6 01 	lds	r24, 0x01A6
    1c70:	88 23       	and	r24, r24
    1c72:	79 f0       	breq	.+30     	; 0x1c92 <main+0x94a>
							break;
						LCD_displayString("Wait for People");
    1c74:	89 ee       	ldi	r24, 0xE9	; 233
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	0e 94 14 22 	call	0x4428	; 0x4428 <LCD_displayString>
						LCD_displayStringRowColumn(1,4,"to Enter    ");
    1c7c:	29 ef       	ldi	r18, 0xF9	; 249
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	64 e0       	ldi	r22, 0x04	; 4
    1c84:	a9 01       	movw	r20, r18
    1c86:	0e 94 7f 22 	call	0x44fe	; 0x44fe <LCD_displayStringRowColumn>
					LCD_clearScreen();
					_delay_ms(10);
					/* Recieve the PIR state form CONTROL_ECU */
					PIR_State = UART_recieveByte();
					if (PIR_State == 0) {}
					while (PIR_State == 1) {
    1c8a:	80 91 a6 01 	lds	r24, 0x01A6
    1c8e:	81 30       	cpi	r24, 0x01	; 1
    1c90:	49 f3       	breq	.-46     	; 0x1c64 <main+0x91c>
						if (PIR_State == 0)
							break;
						LCD_displayString("Wait for People");
						LCD_displayStringRowColumn(1,4,"to Enter    ");
					}
					LCD_clearScreen();
    1c92:	0e 94 bb 22 	call	0x4576	; 0x4576 <LCD_clearScreen>
					LCD_displayString("Locking Door");
    1c96:	86 e0       	ldi	r24, 0x06	; 6
    1c98:	91 e0       	ldi	r25, 0x01	; 1
    1c9a:	0e 94 14 22 	call	0x4428	; 0x4428 <LCD_displayString>
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	e9 56       	subi	r30, 0x69	; 105
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	9c e7       	ldi	r25, 0x7C	; 124
    1ca8:	a2 e1       	ldi	r26, 0x12	; 18
    1caa:	b8 e4       	ldi	r27, 0x48	; 72
    1cac:	80 83       	st	Z, r24
    1cae:	91 83       	std	Z+1, r25	; 0x01
    1cb0:	a2 83       	std	Z+2, r26	; 0x02
    1cb2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb4:	8e 01       	movw	r16, r28
    1cb6:	0d 56       	subi	r16, 0x6D	; 109
    1cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cba:	fe 01       	movw	r30, r28
    1cbc:	e9 56       	subi	r30, 0x69	; 105
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	60 81       	ld	r22, Z
    1cc2:	71 81       	ldd	r23, Z+1	; 0x01
    1cc4:	82 81       	ldd	r24, Z+2	; 0x02
    1cc6:	93 81       	ldd	r25, Z+3	; 0x03
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	4a ef       	ldi	r20, 0xFA	; 250
    1cce:	54 e4       	ldi	r21, 0x44	; 68
    1cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	f8 01       	movw	r30, r16
    1cda:	80 83       	st	Z, r24
    1cdc:	91 83       	std	Z+1, r25	; 0x01
    1cde:	a2 83       	std	Z+2, r26	; 0x02
    1ce0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	ed 56       	subi	r30, 0x6D	; 109
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	60 81       	ld	r22, Z
    1cea:	71 81       	ldd	r23, Z+1	; 0x01
    1cec:	82 81       	ldd	r24, Z+2	; 0x02
    1cee:	93 81       	ldd	r25, Z+3	; 0x03
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e8       	ldi	r20, 0x80	; 128
    1cf6:	5f e3       	ldi	r21, 0x3F	; 63
    1cf8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cfc:	88 23       	and	r24, r24
    1cfe:	44 f4       	brge	.+16     	; 0x1d10 <main+0x9c8>
		__ticks = 1;
    1d00:	fe 01       	movw	r30, r28
    1d02:	ef 56       	subi	r30, 0x6F	; 111
    1d04:	ff 4f       	sbci	r31, 0xFF	; 255
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	91 83       	std	Z+1, r25	; 0x01
    1d0c:	80 83       	st	Z, r24
    1d0e:	64 c0       	rjmp	.+200    	; 0x1dd8 <main+0xa90>
	else if (__tmp > 65535)
    1d10:	fe 01       	movw	r30, r28
    1d12:	ed 56       	subi	r30, 0x6D	; 109
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	60 81       	ld	r22, Z
    1d18:	71 81       	ldd	r23, Z+1	; 0x01
    1d1a:	82 81       	ldd	r24, Z+2	; 0x02
    1d1c:	93 81       	ldd	r25, Z+3	; 0x03
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	3f ef       	ldi	r19, 0xFF	; 255
    1d22:	4f e7       	ldi	r20, 0x7F	; 127
    1d24:	57 e4       	ldi	r21, 0x47	; 71
    1d26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d2a:	18 16       	cp	r1, r24
    1d2c:	0c f0       	brlt	.+2      	; 0x1d30 <main+0x9e8>
    1d2e:	43 c0       	rjmp	.+134    	; 0x1db6 <main+0xa6e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d30:	fe 01       	movw	r30, r28
    1d32:	e9 56       	subi	r30, 0x69	; 105
    1d34:	ff 4f       	sbci	r31, 0xFF	; 255
    1d36:	60 81       	ld	r22, Z
    1d38:	71 81       	ldd	r23, Z+1	; 0x01
    1d3a:	82 81       	ldd	r24, Z+2	; 0x02
    1d3c:	93 81       	ldd	r25, Z+3	; 0x03
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	40 e2       	ldi	r20, 0x20	; 32
    1d44:	51 e4       	ldi	r21, 0x41	; 65
    1d46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	8e 01       	movw	r16, r28
    1d50:	0f 56       	subi	r16, 0x6F	; 111
    1d52:	1f 4f       	sbci	r17, 0xFF	; 255
    1d54:	bc 01       	movw	r22, r24
    1d56:	cd 01       	movw	r24, r26
    1d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	f8 01       	movw	r30, r16
    1d62:	91 83       	std	Z+1, r25	; 0x01
    1d64:	80 83       	st	Z, r24
    1d66:	1f c0       	rjmp	.+62     	; 0x1da6 <main+0xa5e>
    1d68:	fe 01       	movw	r30, r28
    1d6a:	e1 57       	subi	r30, 0x71	; 113
    1d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6e:	88 ec       	ldi	r24, 0xC8	; 200
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	91 83       	std	Z+1, r25	; 0x01
    1d74:	80 83       	st	Z, r24
    1d76:	fe 01       	movw	r30, r28
    1d78:	e1 57       	subi	r30, 0x71	; 113
    1d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7c:	80 81       	ld	r24, Z
    1d7e:	91 81       	ldd	r25, Z+1	; 0x01
    1d80:	01 97       	sbiw	r24, 0x01	; 1
    1d82:	f1 f7       	brne	.-4      	; 0x1d80 <main+0xa38>
    1d84:	fe 01       	movw	r30, r28
    1d86:	e1 57       	subi	r30, 0x71	; 113
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	91 83       	std	Z+1, r25	; 0x01
    1d8c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8e:	de 01       	movw	r26, r28
    1d90:	af 56       	subi	r26, 0x6F	; 111
    1d92:	bf 4f       	sbci	r27, 0xFF	; 255
    1d94:	fe 01       	movw	r30, r28
    1d96:	ef 56       	subi	r30, 0x6F	; 111
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	80 81       	ld	r24, Z
    1d9c:	91 81       	ldd	r25, Z+1	; 0x01
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	11 96       	adiw	r26, 0x01	; 1
    1da2:	9c 93       	st	X, r25
    1da4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da6:	fe 01       	movw	r30, r28
    1da8:	ef 56       	subi	r30, 0x6F	; 111
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	80 81       	ld	r24, Z
    1dae:	91 81       	ldd	r25, Z+1	; 0x01
    1db0:	00 97       	sbiw	r24, 0x00	; 0
    1db2:	d1 f6       	brne	.-76     	; 0x1d68 <main+0xa20>
    1db4:	27 c0       	rjmp	.+78     	; 0x1e04 <main+0xabc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db6:	8e 01       	movw	r16, r28
    1db8:	0f 56       	subi	r16, 0x6F	; 111
    1dba:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	ed 56       	subi	r30, 0x6D	; 109
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	60 81       	ld	r22, Z
    1dc4:	71 81       	ldd	r23, Z+1	; 0x01
    1dc6:	82 81       	ldd	r24, Z+2	; 0x02
    1dc8:	93 81       	ldd	r25, Z+3	; 0x03
    1dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	f8 01       	movw	r30, r16
    1dd4:	91 83       	std	Z+1, r25	; 0x01
    1dd6:	80 83       	st	Z, r24
    1dd8:	de 01       	movw	r26, r28
    1dda:	a3 57       	subi	r26, 0x73	; 115
    1ddc:	bf 4f       	sbci	r27, 0xFF	; 255
    1dde:	fe 01       	movw	r30, r28
    1de0:	ef 56       	subi	r30, 0x6F	; 111
    1de2:	ff 4f       	sbci	r31, 0xFF	; 255
    1de4:	80 81       	ld	r24, Z
    1de6:	91 81       	ldd	r25, Z+1	; 0x01
    1de8:	8d 93       	st	X+, r24
    1dea:	9c 93       	st	X, r25
    1dec:	fe 01       	movw	r30, r28
    1dee:	e3 57       	subi	r30, 0x73	; 115
    1df0:	ff 4f       	sbci	r31, 0xFF	; 255
    1df2:	80 81       	ld	r24, Z
    1df4:	91 81       	ldd	r25, Z+1	; 0x01
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	f1 f7       	brne	.-4      	; 0x1df6 <main+0xaae>
    1dfa:	fe 01       	movw	r30, r28
    1dfc:	e3 57       	subi	r30, 0x73	; 115
    1dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1e00:	91 83       	std	Z+1, r25	; 0x01
    1e02:	80 83       	st	Z, r24
					//Timer_init(&Timer_ConfigType_1);
					//Timer_setCallBack(door_Lock_Timer,TIMER1);
					_delay_ms(150000);
					LCD_clearScreen();
    1e04:	0e 94 bb 22 	call	0x4576	; 0x4576 <LCD_clearScreen>
    1e08:	65 c6       	rjmp	.+3274   	; 0x2ad4 <main+0x178c>
				}
				else if (check_new_pass == 0) {
    1e0a:	80 91 a5 01 	lds	r24, 0x01A5
    1e0e:	88 23       	and	r24, r24
    1e10:	09 f0       	breq	.+2      	; 0x1e14 <main+0xacc>
    1e12:	60 c6       	rjmp	.+3264   	; 0x2ad4 <main+0x178c>
					LCD_clearScreen();
    1e14:	0e 94 bb 22 	call	0x4576	; 0x4576 <LCD_clearScreen>
					LCD_displayString("Wrong Password");
    1e18:	83 e1       	ldi	r24, 0x13	; 19
    1e1a:	91 e0       	ldi	r25, 0x01	; 1
    1e1c:	0e 94 14 22 	call	0x4428	; 0x4428 <LCD_displayString>
    1e20:	fe 01       	movw	r30, r28
    1e22:	e7 57       	subi	r30, 0x77	; 119
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	aa e7       	ldi	r26, 0x7A	; 122
    1e2c:	b4 e4       	ldi	r27, 0x44	; 68
    1e2e:	80 83       	st	Z, r24
    1e30:	91 83       	std	Z+1, r25	; 0x01
    1e32:	a2 83       	std	Z+2, r26	; 0x02
    1e34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e36:	8e 01       	movw	r16, r28
    1e38:	0b 57       	subi	r16, 0x7B	; 123
    1e3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	e7 57       	subi	r30, 0x77	; 119
    1e40:	ff 4f       	sbci	r31, 0xFF	; 255
    1e42:	60 81       	ld	r22, Z
    1e44:	71 81       	ldd	r23, Z+1	; 0x01
    1e46:	82 81       	ldd	r24, Z+2	; 0x02
    1e48:	93 81       	ldd	r25, Z+3	; 0x03
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	4a ef       	ldi	r20, 0xFA	; 250
    1e50:	54 e4       	ldi	r21, 0x44	; 68
    1e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	f8 01       	movw	r30, r16
    1e5c:	80 83       	st	Z, r24
    1e5e:	91 83       	std	Z+1, r25	; 0x01
    1e60:	a2 83       	std	Z+2, r26	; 0x02
    1e62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e64:	fe 01       	movw	r30, r28
    1e66:	eb 57       	subi	r30, 0x7B	; 123
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	60 81       	ld	r22, Z
    1e6c:	71 81       	ldd	r23, Z+1	; 0x01
    1e6e:	82 81       	ldd	r24, Z+2	; 0x02
    1e70:	93 81       	ldd	r25, Z+3	; 0x03
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	40 e8       	ldi	r20, 0x80	; 128
    1e78:	5f e3       	ldi	r21, 0x3F	; 63
    1e7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e7e:	88 23       	and	r24, r24
    1e80:	44 f4       	brge	.+16     	; 0x1e92 <main+0xb4a>
		__ticks = 1;
    1e82:	fe 01       	movw	r30, r28
    1e84:	ed 57       	subi	r30, 0x7D	; 125
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	91 83       	std	Z+1, r25	; 0x01
    1e8e:	80 83       	st	Z, r24
    1e90:	64 c0       	rjmp	.+200    	; 0x1f5a <main+0xc12>
	else if (__tmp > 65535)
    1e92:	fe 01       	movw	r30, r28
    1e94:	eb 57       	subi	r30, 0x7B	; 123
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	60 81       	ld	r22, Z
    1e9a:	71 81       	ldd	r23, Z+1	; 0x01
    1e9c:	82 81       	ldd	r24, Z+2	; 0x02
    1e9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	3f ef       	ldi	r19, 0xFF	; 255
    1ea4:	4f e7       	ldi	r20, 0x7F	; 127
    1ea6:	57 e4       	ldi	r21, 0x47	; 71
    1ea8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eac:	18 16       	cp	r1, r24
    1eae:	0c f0       	brlt	.+2      	; 0x1eb2 <main+0xb6a>
    1eb0:	43 c0       	rjmp	.+134    	; 0x1f38 <main+0xbf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	e7 57       	subi	r30, 0x77	; 119
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	60 81       	ld	r22, Z
    1eba:	71 81       	ldd	r23, Z+1	; 0x01
    1ebc:	82 81       	ldd	r24, Z+2	; 0x02
    1ebe:	93 81       	ldd	r25, Z+3	; 0x03
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	40 e2       	ldi	r20, 0x20	; 32
    1ec6:	51 e4       	ldi	r21, 0x41	; 65
    1ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	8e 01       	movw	r16, r28
    1ed2:	0d 57       	subi	r16, 0x7D	; 125
    1ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed6:	bc 01       	movw	r22, r24
    1ed8:	cd 01       	movw	r24, r26
    1eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	f8 01       	movw	r30, r16
    1ee4:	91 83       	std	Z+1, r25	; 0x01
    1ee6:	80 83       	st	Z, r24
    1ee8:	1f c0       	rjmp	.+62     	; 0x1f28 <main+0xbe0>
    1eea:	fe 01       	movw	r30, r28
    1eec:	ef 57       	subi	r30, 0x7F	; 127
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	88 ec       	ldi	r24, 0xC8	; 200
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	91 83       	std	Z+1, r25	; 0x01
    1ef6:	80 83       	st	Z, r24
    1ef8:	fe 01       	movw	r30, r28
    1efa:	ef 57       	subi	r30, 0x7F	; 127
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	80 81       	ld	r24, Z
    1f00:	91 81       	ldd	r25, Z+1	; 0x01
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <main+0xbba>
    1f06:	fe 01       	movw	r30, r28
    1f08:	ef 57       	subi	r30, 0x7F	; 127
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	91 83       	std	Z+1, r25	; 0x01
    1f0e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f10:	de 01       	movw	r26, r28
    1f12:	ad 57       	subi	r26, 0x7D	; 125
    1f14:	bf 4f       	sbci	r27, 0xFF	; 255
    1f16:	fe 01       	movw	r30, r28
    1f18:	ed 57       	subi	r30, 0x7D	; 125
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	80 81       	ld	r24, Z
    1f1e:	91 81       	ldd	r25, Z+1	; 0x01
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	11 96       	adiw	r26, 0x01	; 1
    1f24:	9c 93       	st	X, r25
    1f26:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f28:	fe 01       	movw	r30, r28
    1f2a:	ed 57       	subi	r30, 0x7D	; 125
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	80 81       	ld	r24, Z
    1f30:	91 81       	ldd	r25, Z+1	; 0x01
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	d1 f6       	brne	.-76     	; 0x1eea <main+0xba2>
    1f36:	27 c0       	rjmp	.+78     	; 0x1f86 <main+0xc3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f38:	8e 01       	movw	r16, r28
    1f3a:	0d 57       	subi	r16, 0x7D	; 125
    1f3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f3e:	fe 01       	movw	r30, r28
    1f40:	eb 57       	subi	r30, 0x7B	; 123
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	60 81       	ld	r22, Z
    1f46:	71 81       	ldd	r23, Z+1	; 0x01
    1f48:	82 81       	ldd	r24, Z+2	; 0x02
    1f4a:	93 81       	ldd	r25, Z+3	; 0x03
    1f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	f8 01       	movw	r30, r16
    1f56:	91 83       	std	Z+1, r25	; 0x01
    1f58:	80 83       	st	Z, r24
    1f5a:	de 01       	movw	r26, r28
    1f5c:	a1 58       	subi	r26, 0x81	; 129
    1f5e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f60:	fe 01       	movw	r30, r28
    1f62:	ed 57       	subi	r30, 0x7D	; 125
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	80 81       	ld	r24, Z
    1f68:	91 81       	ldd	r25, Z+1	; 0x01
    1f6a:	8d 93       	st	X+, r24
    1f6c:	9c 93       	st	X, r25
    1f6e:	fe 01       	movw	r30, r28
    1f70:	e1 58       	subi	r30, 0x81	; 129
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	80 81       	ld	r24, Z
    1f76:	91 81       	ldd	r25, Z+1	; 0x01
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <main+0xc30>
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	e1 58       	subi	r30, 0x81	; 129
    1f80:	ff 4f       	sbci	r31, 0xFF	; 255
    1f82:	91 83       	std	Z+1, r25	; 0x01
    1f84:	80 83       	st	Z, r24
					_delay_ms(1000);
					LCD_clearScreen();
    1f86:	0e 94 bb 22 	call	0x4576	; 0x4576 <LCD_clearScreen>
					error_Counter++;
    1f8a:	80 91 a1 01 	lds	r24, 0x01A1
    1f8e:	8f 5f       	subi	r24, 0xFF	; 255
    1f90:	80 93 a1 01 	sts	0x01A1, r24
					if (error_Counter != 3) {
    1f94:	80 91 a1 01 	lds	r24, 0x01A1
    1f98:	83 30       	cpi	r24, 0x03	; 3
    1f9a:	29 f0       	breq	.+10     	; 0x1fa6 <main+0xc5e>
						UART_sendByte(wait_For_Error);
    1f9c:	80 91 a2 01 	lds	r24, 0x01A2
    1fa0:	0e 94 79 23 	call	0x46f2	; 0x46f2 <UART_sendByte>
    1fa4:	97 c5       	rjmp	.+2862   	; 0x2ad4 <main+0x178c>
					}
					else if (error_Counter == 3) {
    1fa6:	80 91 a1 01 	lds	r24, 0x01A1
    1faa:	83 30       	cpi	r24, 0x03	; 3
    1fac:	09 f0       	breq	.+2      	; 0x1fb0 <main+0xc68>
    1fae:	92 c5       	rjmp	.+2852   	; 0x2ad4 <main+0x178c>
						UART_sendByte(error_Detected);
    1fb0:	80 91 96 01 	lds	r24, 0x0196
    1fb4:	0e 94 79 23 	call	0x46f2	; 0x46f2 <UART_sendByte>
						LCD_displayString("System Locked");
    1fb8:	82 e2       	ldi	r24, 0x22	; 34
    1fba:	91 e0       	ldi	r25, 0x01	; 1
    1fbc:	0e 94 14 22 	call	0x4428	; 0x4428 <LCD_displayString>
						LCD_displayStringRowColumn(1,0,"Wait for 1 min");
    1fc0:	20 e3       	ldi	r18, 0x30	; 48
    1fc2:	31 e0       	ldi	r19, 0x01	; 1
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	60 e0       	ldi	r22, 0x00	; 0
    1fc8:	a9 01       	movw	r20, r18
    1fca:	0e 94 7f 22 	call	0x44fe	; 0x44fe <LCD_displayStringRowColumn>
    1fce:	fe 01       	movw	r30, r28
    1fd0:	e5 58       	subi	r30, 0x85	; 133
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	9c e7       	ldi	r25, 0x7C	; 124
    1fd8:	a2 e1       	ldi	r26, 0x12	; 18
    1fda:	b8 e4       	ldi	r27, 0x48	; 72
    1fdc:	80 83       	st	Z, r24
    1fde:	91 83       	std	Z+1, r25	; 0x01
    1fe0:	a2 83       	std	Z+2, r26	; 0x02
    1fe2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe4:	8e 01       	movw	r16, r28
    1fe6:	09 58       	subi	r16, 0x89	; 137
    1fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fea:	fe 01       	movw	r30, r28
    1fec:	e5 58       	subi	r30, 0x85	; 133
    1fee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff0:	60 81       	ld	r22, Z
    1ff2:	71 81       	ldd	r23, Z+1	; 0x01
    1ff4:	82 81       	ldd	r24, Z+2	; 0x02
    1ff6:	93 81       	ldd	r25, Z+3	; 0x03
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	4a ef       	ldi	r20, 0xFA	; 250
    1ffe:	54 e4       	ldi	r21, 0x44	; 68
    2000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	f8 01       	movw	r30, r16
    200a:	80 83       	st	Z, r24
    200c:	91 83       	std	Z+1, r25	; 0x01
    200e:	a2 83       	std	Z+2, r26	; 0x02
    2010:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2012:	fe 01       	movw	r30, r28
    2014:	e9 58       	subi	r30, 0x89	; 137
    2016:	ff 4f       	sbci	r31, 0xFF	; 255
    2018:	60 81       	ld	r22, Z
    201a:	71 81       	ldd	r23, Z+1	; 0x01
    201c:	82 81       	ldd	r24, Z+2	; 0x02
    201e:	93 81       	ldd	r25, Z+3	; 0x03
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e8       	ldi	r20, 0x80	; 128
    2026:	5f e3       	ldi	r21, 0x3F	; 63
    2028:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    202c:	88 23       	and	r24, r24
    202e:	44 f4       	brge	.+16     	; 0x2040 <main+0xcf8>
		__ticks = 1;
    2030:	fe 01       	movw	r30, r28
    2032:	eb 58       	subi	r30, 0x8B	; 139
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	91 83       	std	Z+1, r25	; 0x01
    203c:	80 83       	st	Z, r24
    203e:	64 c0       	rjmp	.+200    	; 0x2108 <main+0xdc0>
	else if (__tmp > 65535)
    2040:	fe 01       	movw	r30, r28
    2042:	e9 58       	subi	r30, 0x89	; 137
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	60 81       	ld	r22, Z
    2048:	71 81       	ldd	r23, Z+1	; 0x01
    204a:	82 81       	ldd	r24, Z+2	; 0x02
    204c:	93 81       	ldd	r25, Z+3	; 0x03
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	3f ef       	ldi	r19, 0xFF	; 255
    2052:	4f e7       	ldi	r20, 0x7F	; 127
    2054:	57 e4       	ldi	r21, 0x47	; 71
    2056:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    205a:	18 16       	cp	r1, r24
    205c:	0c f0       	brlt	.+2      	; 0x2060 <main+0xd18>
    205e:	43 c0       	rjmp	.+134    	; 0x20e6 <main+0xd9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2060:	fe 01       	movw	r30, r28
    2062:	e5 58       	subi	r30, 0x85	; 133
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	60 81       	ld	r22, Z
    2068:	71 81       	ldd	r23, Z+1	; 0x01
    206a:	82 81       	ldd	r24, Z+2	; 0x02
    206c:	93 81       	ldd	r25, Z+3	; 0x03
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e2       	ldi	r20, 0x20	; 32
    2074:	51 e4       	ldi	r21, 0x41	; 65
    2076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	8e 01       	movw	r16, r28
    2080:	0b 58       	subi	r16, 0x8B	; 139
    2082:	1f 4f       	sbci	r17, 0xFF	; 255
    2084:	bc 01       	movw	r22, r24
    2086:	cd 01       	movw	r24, r26
    2088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	f8 01       	movw	r30, r16
    2092:	91 83       	std	Z+1, r25	; 0x01
    2094:	80 83       	st	Z, r24
    2096:	1f c0       	rjmp	.+62     	; 0x20d6 <main+0xd8e>
    2098:	fe 01       	movw	r30, r28
    209a:	ed 58       	subi	r30, 0x8D	; 141
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	88 ec       	ldi	r24, 0xC8	; 200
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	91 83       	std	Z+1, r25	; 0x01
    20a4:	80 83       	st	Z, r24
    20a6:	fe 01       	movw	r30, r28
    20a8:	ed 58       	subi	r30, 0x8D	; 141
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	80 81       	ld	r24, Z
    20ae:	91 81       	ldd	r25, Z+1	; 0x01
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <main+0xd68>
    20b4:	fe 01       	movw	r30, r28
    20b6:	ed 58       	subi	r30, 0x8D	; 141
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	91 83       	std	Z+1, r25	; 0x01
    20bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20be:	de 01       	movw	r26, r28
    20c0:	ab 58       	subi	r26, 0x8B	; 139
    20c2:	bf 4f       	sbci	r27, 0xFF	; 255
    20c4:	fe 01       	movw	r30, r28
    20c6:	eb 58       	subi	r30, 0x8B	; 139
    20c8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ca:	80 81       	ld	r24, Z
    20cc:	91 81       	ldd	r25, Z+1	; 0x01
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	11 96       	adiw	r26, 0x01	; 1
    20d2:	9c 93       	st	X, r25
    20d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d6:	fe 01       	movw	r30, r28
    20d8:	eb 58       	subi	r30, 0x8B	; 139
    20da:	ff 4f       	sbci	r31, 0xFF	; 255
    20dc:	80 81       	ld	r24, Z
    20de:	91 81       	ldd	r25, Z+1	; 0x01
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	d1 f6       	brne	.-76     	; 0x2098 <main+0xd50>
    20e4:	27 c0       	rjmp	.+78     	; 0x2134 <main+0xdec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e6:	8e 01       	movw	r16, r28
    20e8:	0b 58       	subi	r16, 0x8B	; 139
    20ea:	1f 4f       	sbci	r17, 0xFF	; 255
    20ec:	fe 01       	movw	r30, r28
    20ee:	e9 58       	subi	r30, 0x89	; 137
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	60 81       	ld	r22, Z
    20f4:	71 81       	ldd	r23, Z+1	; 0x01
    20f6:	82 81       	ldd	r24, Z+2	; 0x02
    20f8:	93 81       	ldd	r25, Z+3	; 0x03
    20fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	f8 01       	movw	r30, r16
    2104:	91 83       	std	Z+1, r25	; 0x01
    2106:	80 83       	st	Z, r24
    2108:	de 01       	movw	r26, r28
    210a:	af 58       	subi	r26, 0x8F	; 143
    210c:	bf 4f       	sbci	r27, 0xFF	; 255
    210e:	fe 01       	movw	r30, r28
    2110:	eb 58       	subi	r30, 0x8B	; 139
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	80 81       	ld	r24, Z
    2116:	91 81       	ldd	r25, Z+1	; 0x01
    2118:	8d 93       	st	X+, r24
    211a:	9c 93       	st	X, r25
    211c:	fe 01       	movw	r30, r28
    211e:	ef 58       	subi	r30, 0x8F	; 143
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	80 81       	ld	r24, Z
    2124:	91 81       	ldd	r25, Z+1	; 0x01
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	f1 f7       	brne	.-4      	; 0x2126 <main+0xdde>
    212a:	fe 01       	movw	r30, r28
    212c:	ef 58       	subi	r30, 0x8F	; 143
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	91 83       	std	Z+1, r25	; 0x01
    2132:	80 83       	st	Z, r24
						//Timer_init(&Timer_ConfigType_1);
						//Timer_setCallBack(buzzer_Timer,TIMER1);
						_delay_ms(150000);
						LCD_clearScreen();
    2134:	0e 94 bb 22 	call	0x4576	; 0x4576 <LCD_clearScreen>
						error_Counter = 0;
    2138:	10 92 a1 01 	sts	0x01A1, r1
    213c:	cb c4       	rjmp	.+2454   	; 0x2ad4 <main+0x178c>
					}
				}
			}
			else if (key == '-') {
    213e:	80 91 b2 01 	lds	r24, 0x01B2
    2142:	8d 32       	cpi	r24, 0x2D	; 45
    2144:	09 f0       	breq	.+2      	; 0x2148 <main+0xe00>
    2146:	c6 c4       	rjmp	.+2444   	; 0x2ad4 <main+0x178c>
				LCD_clearScreen();
    2148:	0e 94 bb 22 	call	0x4576	; 0x4576 <LCD_clearScreen>
				LCD_displayString("Plz enter old");
    214c:	8f e3       	ldi	r24, 0x3F	; 63
    214e:	91 e0       	ldi	r25, 0x01	; 1
    2150:	0e 94 14 22 	call	0x4428	; 0x4428 <LCD_displayString>
				LCD_moveCursor(1, 0);
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	60 e0       	ldi	r22, 0x00	; 0
    2158:	0e 94 3d 22 	call	0x447a	; 0x447a <LCD_moveCursor>
				LCD_displayString("pass:");
    215c:	8d e4       	ldi	r24, 0x4D	; 77
    215e:	91 e0       	ldi	r25, 0x01	; 1
    2160:	0e 94 14 22 	call	0x4428	; 0x4428 <LCD_displayString>
				for (int i = 0; i < 5; i++) {
    2164:	fe 01       	movw	r30, r28
    2166:	ed 51       	subi	r30, 0x1D	; 29
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	11 82       	std	Z+1, r1	; 0x01
    216c:	10 82       	st	Z, r1
    216e:	d9 c0       	rjmp	.+434    	; 0x2322 <main+0xfda>
					/* Get the pressed key number, if any switch pressed for more than 500 ms it will considered more than one press */
					key = KEYPAD_getPressedKey();
    2170:	0e 94 0f 1c 	call	0x381e	; 0x381e <KEYPAD_getPressedKey>
    2174:	80 93 b2 01 	sts	0x01B2, r24
					new_pass[i] = key;
    2178:	fe 01       	movw	r30, r28
    217a:	ed 51       	subi	r30, 0x1D	; 29
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	80 81       	ld	r24, Z
    2180:	91 81       	ldd	r25, Z+1	; 0x01
    2182:	20 91 b2 01 	lds	r18, 0x01B2
    2186:	fc 01       	movw	r30, r24
    2188:	e8 55       	subi	r30, 0x58	; 88
    218a:	fe 4f       	sbci	r31, 0xFE	; 254
    218c:	20 83       	st	Z, r18
					if ((key <= 9) && (key >= 0)) {
    218e:	80 91 b2 01 	lds	r24, 0x01B2
    2192:	8a 30       	cpi	r24, 0x0A	; 10
    2194:	20 f4       	brcc	.+8      	; 0x219e <main+0xe56>
						LCD_displayCharacter('*'); /* display the pressed keypad switch */
    2196:	8a e2       	ldi	r24, 0x2A	; 42
    2198:	0e 94 25 20 	call	0x404a	; 0x404a <LCD_displayCharacter>
    219c:	03 c0       	rjmp	.+6      	; 0x21a4 <main+0xe5c>
					} else {
						LCD_displayCharacter('*'); /* display the pressed keypad switch */
    219e:	8a e2       	ldi	r24, 0x2A	; 42
    21a0:	0e 94 25 20 	call	0x404a	; 0x404a <LCD_displayCharacter>
    21a4:	fe 01       	movw	r30, r28
    21a6:	e3 59       	subi	r30, 0x93	; 147
    21a8:	ff 4f       	sbci	r31, 0xFF	; 255
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	aa ef       	ldi	r26, 0xFA	; 250
    21b0:	b3 e4       	ldi	r27, 0x43	; 67
    21b2:	80 83       	st	Z, r24
    21b4:	91 83       	std	Z+1, r25	; 0x01
    21b6:	a2 83       	std	Z+2, r26	; 0x02
    21b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ba:	8e 01       	movw	r16, r28
    21bc:	07 59       	subi	r16, 0x97	; 151
    21be:	1f 4f       	sbci	r17, 0xFF	; 255
    21c0:	fe 01       	movw	r30, r28
    21c2:	e3 59       	subi	r30, 0x93	; 147
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	60 81       	ld	r22, Z
    21c8:	71 81       	ldd	r23, Z+1	; 0x01
    21ca:	82 81       	ldd	r24, Z+2	; 0x02
    21cc:	93 81       	ldd	r25, Z+3	; 0x03
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	4a ef       	ldi	r20, 0xFA	; 250
    21d4:	54 e4       	ldi	r21, 0x44	; 68
    21d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	f8 01       	movw	r30, r16
    21e0:	80 83       	st	Z, r24
    21e2:	91 83       	std	Z+1, r25	; 0x01
    21e4:	a2 83       	std	Z+2, r26	; 0x02
    21e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21e8:	fe 01       	movw	r30, r28
    21ea:	e7 59       	subi	r30, 0x97	; 151
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	60 81       	ld	r22, Z
    21f0:	71 81       	ldd	r23, Z+1	; 0x01
    21f2:	82 81       	ldd	r24, Z+2	; 0x02
    21f4:	93 81       	ldd	r25, Z+3	; 0x03
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e8       	ldi	r20, 0x80	; 128
    21fc:	5f e3       	ldi	r21, 0x3F	; 63
    21fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2202:	88 23       	and	r24, r24
    2204:	44 f4       	brge	.+16     	; 0x2216 <main+0xece>
		__ticks = 1;
    2206:	fe 01       	movw	r30, r28
    2208:	e9 59       	subi	r30, 0x99	; 153
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	91 83       	std	Z+1, r25	; 0x01
    2212:	80 83       	st	Z, r24
    2214:	64 c0       	rjmp	.+200    	; 0x22de <main+0xf96>
	else if (__tmp > 65535)
    2216:	fe 01       	movw	r30, r28
    2218:	e7 59       	subi	r30, 0x97	; 151
    221a:	ff 4f       	sbci	r31, 0xFF	; 255
    221c:	60 81       	ld	r22, Z
    221e:	71 81       	ldd	r23, Z+1	; 0x01
    2220:	82 81       	ldd	r24, Z+2	; 0x02
    2222:	93 81       	ldd	r25, Z+3	; 0x03
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	3f ef       	ldi	r19, 0xFF	; 255
    2228:	4f e7       	ldi	r20, 0x7F	; 127
    222a:	57 e4       	ldi	r21, 0x47	; 71
    222c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2230:	18 16       	cp	r1, r24
    2232:	0c f0       	brlt	.+2      	; 0x2236 <main+0xeee>
    2234:	43 c0       	rjmp	.+134    	; 0x22bc <main+0xf74>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2236:	fe 01       	movw	r30, r28
    2238:	e3 59       	subi	r30, 0x93	; 147
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	60 81       	ld	r22, Z
    223e:	71 81       	ldd	r23, Z+1	; 0x01
    2240:	82 81       	ldd	r24, Z+2	; 0x02
    2242:	93 81       	ldd	r25, Z+3	; 0x03
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	40 e2       	ldi	r20, 0x20	; 32
    224a:	51 e4       	ldi	r21, 0x41	; 65
    224c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	8e 01       	movw	r16, r28
    2256:	09 59       	subi	r16, 0x99	; 153
    2258:	1f 4f       	sbci	r17, 0xFF	; 255
    225a:	bc 01       	movw	r22, r24
    225c:	cd 01       	movw	r24, r26
    225e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	f8 01       	movw	r30, r16
    2268:	91 83       	std	Z+1, r25	; 0x01
    226a:	80 83       	st	Z, r24
    226c:	1f c0       	rjmp	.+62     	; 0x22ac <main+0xf64>
    226e:	fe 01       	movw	r30, r28
    2270:	eb 59       	subi	r30, 0x9B	; 155
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	88 ec       	ldi	r24, 0xC8	; 200
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	91 83       	std	Z+1, r25	; 0x01
    227a:	80 83       	st	Z, r24
    227c:	fe 01       	movw	r30, r28
    227e:	eb 59       	subi	r30, 0x9B	; 155
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	80 81       	ld	r24, Z
    2284:	91 81       	ldd	r25, Z+1	; 0x01
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	f1 f7       	brne	.-4      	; 0x2286 <main+0xf3e>
    228a:	fe 01       	movw	r30, r28
    228c:	eb 59       	subi	r30, 0x9B	; 155
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	91 83       	std	Z+1, r25	; 0x01
    2292:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2294:	de 01       	movw	r26, r28
    2296:	a9 59       	subi	r26, 0x99	; 153
    2298:	bf 4f       	sbci	r27, 0xFF	; 255
    229a:	fe 01       	movw	r30, r28
    229c:	e9 59       	subi	r30, 0x99	; 153
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	80 81       	ld	r24, Z
    22a2:	91 81       	ldd	r25, Z+1	; 0x01
    22a4:	01 97       	sbiw	r24, 0x01	; 1
    22a6:	11 96       	adiw	r26, 0x01	; 1
    22a8:	9c 93       	st	X, r25
    22aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ac:	fe 01       	movw	r30, r28
    22ae:	e9 59       	subi	r30, 0x99	; 153
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	80 81       	ld	r24, Z
    22b4:	91 81       	ldd	r25, Z+1	; 0x01
    22b6:	00 97       	sbiw	r24, 0x00	; 0
    22b8:	d1 f6       	brne	.-76     	; 0x226e <main+0xf26>
    22ba:	27 c0       	rjmp	.+78     	; 0x230a <main+0xfc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22bc:	8e 01       	movw	r16, r28
    22be:	09 59       	subi	r16, 0x99	; 153
    22c0:	1f 4f       	sbci	r17, 0xFF	; 255
    22c2:	fe 01       	movw	r30, r28
    22c4:	e7 59       	subi	r30, 0x97	; 151
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	60 81       	ld	r22, Z
    22ca:	71 81       	ldd	r23, Z+1	; 0x01
    22cc:	82 81       	ldd	r24, Z+2	; 0x02
    22ce:	93 81       	ldd	r25, Z+3	; 0x03
    22d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	f8 01       	movw	r30, r16
    22da:	91 83       	std	Z+1, r25	; 0x01
    22dc:	80 83       	st	Z, r24
    22de:	de 01       	movw	r26, r28
    22e0:	ad 59       	subi	r26, 0x9D	; 157
    22e2:	bf 4f       	sbci	r27, 0xFF	; 255
    22e4:	fe 01       	movw	r30, r28
    22e6:	e9 59       	subi	r30, 0x99	; 153
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	80 81       	ld	r24, Z
    22ec:	91 81       	ldd	r25, Z+1	; 0x01
    22ee:	8d 93       	st	X+, r24
    22f0:	9c 93       	st	X, r25
    22f2:	fe 01       	movw	r30, r28
    22f4:	ed 59       	subi	r30, 0x9D	; 157
    22f6:	ff 4f       	sbci	r31, 0xFF	; 255
    22f8:	80 81       	ld	r24, Z
    22fa:	91 81       	ldd	r25, Z+1	; 0x01
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <main+0xfb4>
    2300:	fe 01       	movw	r30, r28
    2302:	ed 59       	subi	r30, 0x9D	; 157
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	91 83       	std	Z+1, r25	; 0x01
    2308:	80 83       	st	Z, r24
			else if (key == '-') {
				LCD_clearScreen();
				LCD_displayString("Plz enter old");
				LCD_moveCursor(1, 0);
				LCD_displayString("pass:");
				for (int i = 0; i < 5; i++) {
    230a:	de 01       	movw	r26, r28
    230c:	ad 51       	subi	r26, 0x1D	; 29
    230e:	bf 4f       	sbci	r27, 0xFF	; 255
    2310:	fe 01       	movw	r30, r28
    2312:	ed 51       	subi	r30, 0x1D	; 29
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	80 81       	ld	r24, Z
    2318:	91 81       	ldd	r25, Z+1	; 0x01
    231a:	01 96       	adiw	r24, 0x01	; 1
    231c:	11 96       	adiw	r26, 0x01	; 1
    231e:	9c 93       	st	X, r25
    2320:	8e 93       	st	-X, r24
    2322:	fe 01       	movw	r30, r28
    2324:	ed 51       	subi	r30, 0x1D	; 29
    2326:	ff 4f       	sbci	r31, 0xFF	; 255
    2328:	80 81       	ld	r24, Z
    232a:	91 81       	ldd	r25, Z+1	; 0x01
    232c:	85 30       	cpi	r24, 0x05	; 5
    232e:	91 05       	cpc	r25, r1
    2330:	0c f4       	brge	.+2      	; 0x2334 <main+0xfec>
    2332:	1e cf       	rjmp	.-452    	; 0x2170 <main+0xe28>
					} else {
						LCD_displayCharacter('*'); /* display the pressed keypad switch */
					}
					_delay_ms(500); /* Press time */
				}
				key = KEYPAD_getPressedKey();
    2334:	0e 94 0f 1c 	call	0x381e	; 0x381e <KEYPAD_getPressedKey>
    2338:	80 93 b2 01 	sts	0x01B2, r24
				if (key == 13) {
    233c:	80 91 b2 01 	lds	r24, 0x01B2
    2340:	8d 30       	cpi	r24, 0x0D	; 13
    2342:	29 f5       	brne	.+74     	; 0x238e <main+0x1046>
					for (int k = 0; k < 5; k++) {
    2344:	fe 01       	movw	r30, r28
    2346:	ef 51       	subi	r30, 0x1F	; 31
    2348:	ff 4f       	sbci	r31, 0xFF	; 255
    234a:	11 82       	std	Z+1, r1	; 0x01
    234c:	10 82       	st	Z, r1
    234e:	17 c0       	rjmp	.+46     	; 0x237e <main+0x1036>
						UART_sendByte(new_pass[k]);
    2350:	fe 01       	movw	r30, r28
    2352:	ef 51       	subi	r30, 0x1F	; 31
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	80 81       	ld	r24, Z
    2358:	91 81       	ldd	r25, Z+1	; 0x01
    235a:	fc 01       	movw	r30, r24
    235c:	e8 55       	subi	r30, 0x58	; 88
    235e:	fe 4f       	sbci	r31, 0xFE	; 254
    2360:	80 81       	ld	r24, Z
    2362:	0e 94 79 23 	call	0x46f2	; 0x46f2 <UART_sendByte>
					}
					_delay_ms(500); /* Press time */
				}
				key = KEYPAD_getPressedKey();
				if (key == 13) {
					for (int k = 0; k < 5; k++) {
    2366:	de 01       	movw	r26, r28
    2368:	af 51       	subi	r26, 0x1F	; 31
    236a:	bf 4f       	sbci	r27, 0xFF	; 255
    236c:	fe 01       	movw	r30, r28
    236e:	ef 51       	subi	r30, 0x1F	; 31
    2370:	ff 4f       	sbci	r31, 0xFF	; 255
    2372:	80 81       	ld	r24, Z
    2374:	91 81       	ldd	r25, Z+1	; 0x01
    2376:	01 96       	adiw	r24, 0x01	; 1
    2378:	11 96       	adiw	r26, 0x01	; 1
    237a:	9c 93       	st	X, r25
    237c:	8e 93       	st	-X, r24
    237e:	fe 01       	movw	r30, r28
    2380:	ef 51       	subi	r30, 0x1F	; 31
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	80 81       	ld	r24, Z
    2386:	91 81       	ldd	r25, Z+1	; 0x01
    2388:	85 30       	cpi	r24, 0x05	; 5
    238a:	91 05       	cpc	r25, r1
    238c:	0c f3       	brlt	.-62     	; 0x2350 <main+0x1008>
						UART_sendByte(new_pass[k]);
					}
				}
				/* if the new password is correct, proceed the application */
				check_new_pass = UART_recieveByte();
    238e:	0e 94 90 23 	call	0x4720	; 0x4720 <UART_recieveByte>
    2392:	80 93 a5 01 	sts	0x01A5, r24
				if (check_new_pass == 1) {
    2396:	80 91 a5 01 	lds	r24, 0x01A5
    239a:	81 30       	cpi	r24, 0x01	; 1
    239c:	09 f0       	breq	.+2      	; 0x23a0 <main+0x1058>
    239e:	8b c1       	rjmp	.+790    	; 0x26b6 <main+0x136e>
					LCD_clearScreen();
    23a0:	0e 94 bb 22 	call	0x4576	; 0x4576 <LCD_clearScreen>
					LCD_displayString("Correct Password");
    23a4:	89 ec       	ldi	r24, 0xC9	; 201
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	0e 94 14 22 	call	0x4428	; 0x4428 <LCD_displayString>
    23ac:	fe 01       	movw	r30, r28
    23ae:	e1 5a       	subi	r30, 0xA1	; 161
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	aa e7       	ldi	r26, 0x7A	; 122
    23b8:	b4 e4       	ldi	r27, 0x44	; 68
    23ba:	80 83       	st	Z, r24
    23bc:	91 83       	std	Z+1, r25	; 0x01
    23be:	a2 83       	std	Z+2, r26	; 0x02
    23c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c2:	8e 01       	movw	r16, r28
    23c4:	05 5a       	subi	r16, 0xA5	; 165
    23c6:	1f 4f       	sbci	r17, 0xFF	; 255
    23c8:	fe 01       	movw	r30, r28
    23ca:	e1 5a       	subi	r30, 0xA1	; 161
    23cc:	ff 4f       	sbci	r31, 0xFF	; 255
    23ce:	60 81       	ld	r22, Z
    23d0:	71 81       	ldd	r23, Z+1	; 0x01
    23d2:	82 81       	ldd	r24, Z+2	; 0x02
    23d4:	93 81       	ldd	r25, Z+3	; 0x03
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	4a ef       	ldi	r20, 0xFA	; 250
    23dc:	54 e4       	ldi	r21, 0x44	; 68
    23de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	f8 01       	movw	r30, r16
    23e8:	80 83       	st	Z, r24
    23ea:	91 83       	std	Z+1, r25	; 0x01
    23ec:	a2 83       	std	Z+2, r26	; 0x02
    23ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23f0:	fe 01       	movw	r30, r28
    23f2:	e5 5a       	subi	r30, 0xA5	; 165
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	60 81       	ld	r22, Z
    23f8:	71 81       	ldd	r23, Z+1	; 0x01
    23fa:	82 81       	ldd	r24, Z+2	; 0x02
    23fc:	93 81       	ldd	r25, Z+3	; 0x03
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	40 e8       	ldi	r20, 0x80	; 128
    2404:	5f e3       	ldi	r21, 0x3F	; 63
    2406:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    240a:	88 23       	and	r24, r24
    240c:	44 f4       	brge	.+16     	; 0x241e <main+0x10d6>
		__ticks = 1;
    240e:	fe 01       	movw	r30, r28
    2410:	e7 5a       	subi	r30, 0xA7	; 167
    2412:	ff 4f       	sbci	r31, 0xFF	; 255
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	91 83       	std	Z+1, r25	; 0x01
    241a:	80 83       	st	Z, r24
    241c:	64 c0       	rjmp	.+200    	; 0x24e6 <main+0x119e>
	else if (__tmp > 65535)
    241e:	fe 01       	movw	r30, r28
    2420:	e5 5a       	subi	r30, 0xA5	; 165
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	60 81       	ld	r22, Z
    2426:	71 81       	ldd	r23, Z+1	; 0x01
    2428:	82 81       	ldd	r24, Z+2	; 0x02
    242a:	93 81       	ldd	r25, Z+3	; 0x03
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	3f ef       	ldi	r19, 0xFF	; 255
    2430:	4f e7       	ldi	r20, 0x7F	; 127
    2432:	57 e4       	ldi	r21, 0x47	; 71
    2434:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2438:	18 16       	cp	r1, r24
    243a:	0c f0       	brlt	.+2      	; 0x243e <main+0x10f6>
    243c:	43 c0       	rjmp	.+134    	; 0x24c4 <main+0x117c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243e:	fe 01       	movw	r30, r28
    2440:	e1 5a       	subi	r30, 0xA1	; 161
    2442:	ff 4f       	sbci	r31, 0xFF	; 255
    2444:	60 81       	ld	r22, Z
    2446:	71 81       	ldd	r23, Z+1	; 0x01
    2448:	82 81       	ldd	r24, Z+2	; 0x02
    244a:	93 81       	ldd	r25, Z+3	; 0x03
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	40 e2       	ldi	r20, 0x20	; 32
    2452:	51 e4       	ldi	r21, 0x41	; 65
    2454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	8e 01       	movw	r16, r28
    245e:	07 5a       	subi	r16, 0xA7	; 167
    2460:	1f 4f       	sbci	r17, 0xFF	; 255
    2462:	bc 01       	movw	r22, r24
    2464:	cd 01       	movw	r24, r26
    2466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	f8 01       	movw	r30, r16
    2470:	91 83       	std	Z+1, r25	; 0x01
    2472:	80 83       	st	Z, r24
    2474:	1f c0       	rjmp	.+62     	; 0x24b4 <main+0x116c>
    2476:	fe 01       	movw	r30, r28
    2478:	e9 5a       	subi	r30, 0xA9	; 169
    247a:	ff 4f       	sbci	r31, 0xFF	; 255
    247c:	88 ec       	ldi	r24, 0xC8	; 200
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	91 83       	std	Z+1, r25	; 0x01
    2482:	80 83       	st	Z, r24
    2484:	fe 01       	movw	r30, r28
    2486:	e9 5a       	subi	r30, 0xA9	; 169
    2488:	ff 4f       	sbci	r31, 0xFF	; 255
    248a:	80 81       	ld	r24, Z
    248c:	91 81       	ldd	r25, Z+1	; 0x01
    248e:	01 97       	sbiw	r24, 0x01	; 1
    2490:	f1 f7       	brne	.-4      	; 0x248e <main+0x1146>
    2492:	fe 01       	movw	r30, r28
    2494:	e9 5a       	subi	r30, 0xA9	; 169
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	91 83       	std	Z+1, r25	; 0x01
    249a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249c:	de 01       	movw	r26, r28
    249e:	a7 5a       	subi	r26, 0xA7	; 167
    24a0:	bf 4f       	sbci	r27, 0xFF	; 255
    24a2:	fe 01       	movw	r30, r28
    24a4:	e7 5a       	subi	r30, 0xA7	; 167
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	80 81       	ld	r24, Z
    24aa:	91 81       	ldd	r25, Z+1	; 0x01
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	11 96       	adiw	r26, 0x01	; 1
    24b0:	9c 93       	st	X, r25
    24b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b4:	fe 01       	movw	r30, r28
    24b6:	e7 5a       	subi	r30, 0xA7	; 167
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	80 81       	ld	r24, Z
    24bc:	91 81       	ldd	r25, Z+1	; 0x01
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	d1 f6       	brne	.-76     	; 0x2476 <main+0x112e>
    24c2:	27 c0       	rjmp	.+78     	; 0x2512 <main+0x11ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c4:	8e 01       	movw	r16, r28
    24c6:	07 5a       	subi	r16, 0xA7	; 167
    24c8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ca:	fe 01       	movw	r30, r28
    24cc:	e5 5a       	subi	r30, 0xA5	; 165
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	60 81       	ld	r22, Z
    24d2:	71 81       	ldd	r23, Z+1	; 0x01
    24d4:	82 81       	ldd	r24, Z+2	; 0x02
    24d6:	93 81       	ldd	r25, Z+3	; 0x03
    24d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	f8 01       	movw	r30, r16
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	80 83       	st	Z, r24
    24e6:	de 01       	movw	r26, r28
    24e8:	ab 5a       	subi	r26, 0xAB	; 171
    24ea:	bf 4f       	sbci	r27, 0xFF	; 255
    24ec:	fe 01       	movw	r30, r28
    24ee:	e7 5a       	subi	r30, 0xA7	; 167
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	80 81       	ld	r24, Z
    24f4:	91 81       	ldd	r25, Z+1	; 0x01
    24f6:	8d 93       	st	X+, r24
    24f8:	9c 93       	st	X, r25
    24fa:	fe 01       	movw	r30, r28
    24fc:	eb 5a       	subi	r30, 0xAB	; 171
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	80 81       	ld	r24, Z
    2502:	91 81       	ldd	r25, Z+1	; 0x01
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	f1 f7       	brne	.-4      	; 0x2504 <main+0x11bc>
    2508:	fe 01       	movw	r30, r28
    250a:	eb 5a       	subi	r30, 0xAB	; 171
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	91 83       	std	Z+1, r25	; 0x01
    2510:	80 83       	st	Z, r24
					_delay_ms(1000);
					LCD_clearScreen();
    2512:	0e 94 bb 22 	call	0x4576	; 0x4576 <LCD_clearScreen>
					/* Send the action needed to be taken to the CONTROL_ECU */
					UART_sendByte(changing_pass);
    2516:	80 91 a0 01 	lds	r24, 0x01A0
    251a:	0e 94 79 23 	call	0x46f2	; 0x46f2 <UART_sendByte>
					get_Passwords();
    251e:	0e 94 a3 05 	call	0xb46	; 0xb46 <get_Passwords>
					flag2 = UART_recieveByte();
    2522:	0e 94 90 23 	call	0x4720	; 0x4720 <UART_recieveByte>
    2526:	80 93 a7 01 	sts	0x01A7, r24
					if (flag2 == 1) {
    252a:	80 91 a7 01 	lds	r24, 0x01A7
    252e:	81 30       	cpi	r24, 0x01	; 1
    2530:	09 f0       	breq	.+2      	; 0x2534 <main+0x11ec>
    2532:	d0 c2       	rjmp	.+1440   	; 0x2ad4 <main+0x178c>
						LCD_displayString("Password changed");
    2534:	83 e5       	ldi	r24, 0x53	; 83
    2536:	91 e0       	ldi	r25, 0x01	; 1
    2538:	0e 94 14 22 	call	0x4428	; 0x4428 <LCD_displayString>
						LCD_displayStringRowColumn(1,2, "Successfully");
    253c:	24 e6       	ldi	r18, 0x64	; 100
    253e:	31 e0       	ldi	r19, 0x01	; 1
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	62 e0       	ldi	r22, 0x02	; 2
    2544:	a9 01       	movw	r20, r18
    2546:	0e 94 7f 22 	call	0x44fe	; 0x44fe <LCD_displayStringRowColumn>
    254a:	fe 01       	movw	r30, r28
    254c:	ef 5a       	subi	r30, 0xAF	; 175
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	aa e7       	ldi	r26, 0x7A	; 122
    2556:	b4 e4       	ldi	r27, 0x44	; 68
    2558:	80 83       	st	Z, r24
    255a:	91 83       	std	Z+1, r25	; 0x01
    255c:	a2 83       	std	Z+2, r26	; 0x02
    255e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2560:	8e 01       	movw	r16, r28
    2562:	03 5b       	subi	r16, 0xB3	; 179
    2564:	1f 4f       	sbci	r17, 0xFF	; 255
    2566:	fe 01       	movw	r30, r28
    2568:	ef 5a       	subi	r30, 0xAF	; 175
    256a:	ff 4f       	sbci	r31, 0xFF	; 255
    256c:	60 81       	ld	r22, Z
    256e:	71 81       	ldd	r23, Z+1	; 0x01
    2570:	82 81       	ldd	r24, Z+2	; 0x02
    2572:	93 81       	ldd	r25, Z+3	; 0x03
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	4a ef       	ldi	r20, 0xFA	; 250
    257a:	54 e4       	ldi	r21, 0x44	; 68
    257c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	f8 01       	movw	r30, r16
    2586:	80 83       	st	Z, r24
    2588:	91 83       	std	Z+1, r25	; 0x01
    258a:	a2 83       	std	Z+2, r26	; 0x02
    258c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    258e:	fe 01       	movw	r30, r28
    2590:	e3 5b       	subi	r30, 0xB3	; 179
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	60 81       	ld	r22, Z
    2596:	71 81       	ldd	r23, Z+1	; 0x01
    2598:	82 81       	ldd	r24, Z+2	; 0x02
    259a:	93 81       	ldd	r25, Z+3	; 0x03
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	40 e8       	ldi	r20, 0x80	; 128
    25a2:	5f e3       	ldi	r21, 0x3F	; 63
    25a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a8:	88 23       	and	r24, r24
    25aa:	44 f4       	brge	.+16     	; 0x25bc <main+0x1274>
		__ticks = 1;
    25ac:	fe 01       	movw	r30, r28
    25ae:	e5 5b       	subi	r30, 0xB5	; 181
    25b0:	ff 4f       	sbci	r31, 0xFF	; 255
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	91 83       	std	Z+1, r25	; 0x01
    25b8:	80 83       	st	Z, r24
    25ba:	64 c0       	rjmp	.+200    	; 0x2684 <main+0x133c>
	else if (__tmp > 65535)
    25bc:	fe 01       	movw	r30, r28
    25be:	e3 5b       	subi	r30, 0xB3	; 179
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	60 81       	ld	r22, Z
    25c4:	71 81       	ldd	r23, Z+1	; 0x01
    25c6:	82 81       	ldd	r24, Z+2	; 0x02
    25c8:	93 81       	ldd	r25, Z+3	; 0x03
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	3f ef       	ldi	r19, 0xFF	; 255
    25ce:	4f e7       	ldi	r20, 0x7F	; 127
    25d0:	57 e4       	ldi	r21, 0x47	; 71
    25d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25d6:	18 16       	cp	r1, r24
    25d8:	0c f0       	brlt	.+2      	; 0x25dc <main+0x1294>
    25da:	43 c0       	rjmp	.+134    	; 0x2662 <main+0x131a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25dc:	fe 01       	movw	r30, r28
    25de:	ef 5a       	subi	r30, 0xAF	; 175
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	60 81       	ld	r22, Z
    25e4:	71 81       	ldd	r23, Z+1	; 0x01
    25e6:	82 81       	ldd	r24, Z+2	; 0x02
    25e8:	93 81       	ldd	r25, Z+3	; 0x03
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	40 e2       	ldi	r20, 0x20	; 32
    25f0:	51 e4       	ldi	r21, 0x41	; 65
    25f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	8e 01       	movw	r16, r28
    25fc:	05 5b       	subi	r16, 0xB5	; 181
    25fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2600:	bc 01       	movw	r22, r24
    2602:	cd 01       	movw	r24, r26
    2604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	f8 01       	movw	r30, r16
    260e:	91 83       	std	Z+1, r25	; 0x01
    2610:	80 83       	st	Z, r24
    2612:	1f c0       	rjmp	.+62     	; 0x2652 <main+0x130a>
    2614:	fe 01       	movw	r30, r28
    2616:	e7 5b       	subi	r30, 0xB7	; 183
    2618:	ff 4f       	sbci	r31, 0xFF	; 255
    261a:	88 ec       	ldi	r24, 0xC8	; 200
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	91 83       	std	Z+1, r25	; 0x01
    2620:	80 83       	st	Z, r24
    2622:	fe 01       	movw	r30, r28
    2624:	e7 5b       	subi	r30, 0xB7	; 183
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	80 81       	ld	r24, Z
    262a:	91 81       	ldd	r25, Z+1	; 0x01
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	f1 f7       	brne	.-4      	; 0x262c <main+0x12e4>
    2630:	fe 01       	movw	r30, r28
    2632:	e7 5b       	subi	r30, 0xB7	; 183
    2634:	ff 4f       	sbci	r31, 0xFF	; 255
    2636:	91 83       	std	Z+1, r25	; 0x01
    2638:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    263a:	de 01       	movw	r26, r28
    263c:	a5 5b       	subi	r26, 0xB5	; 181
    263e:	bf 4f       	sbci	r27, 0xFF	; 255
    2640:	fe 01       	movw	r30, r28
    2642:	e5 5b       	subi	r30, 0xB5	; 181
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	80 81       	ld	r24, Z
    2648:	91 81       	ldd	r25, Z+1	; 0x01
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	11 96       	adiw	r26, 0x01	; 1
    264e:	9c 93       	st	X, r25
    2650:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2652:	fe 01       	movw	r30, r28
    2654:	e5 5b       	subi	r30, 0xB5	; 181
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	80 81       	ld	r24, Z
    265a:	91 81       	ldd	r25, Z+1	; 0x01
    265c:	00 97       	sbiw	r24, 0x00	; 0
    265e:	d1 f6       	brne	.-76     	; 0x2614 <main+0x12cc>
    2660:	27 c0       	rjmp	.+78     	; 0x26b0 <main+0x1368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2662:	8e 01       	movw	r16, r28
    2664:	05 5b       	subi	r16, 0xB5	; 181
    2666:	1f 4f       	sbci	r17, 0xFF	; 255
    2668:	fe 01       	movw	r30, r28
    266a:	e3 5b       	subi	r30, 0xB3	; 179
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	60 81       	ld	r22, Z
    2670:	71 81       	ldd	r23, Z+1	; 0x01
    2672:	82 81       	ldd	r24, Z+2	; 0x02
    2674:	93 81       	ldd	r25, Z+3	; 0x03
    2676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	f8 01       	movw	r30, r16
    2680:	91 83       	std	Z+1, r25	; 0x01
    2682:	80 83       	st	Z, r24
    2684:	de 01       	movw	r26, r28
    2686:	a9 5b       	subi	r26, 0xB9	; 185
    2688:	bf 4f       	sbci	r27, 0xFF	; 255
    268a:	fe 01       	movw	r30, r28
    268c:	e5 5b       	subi	r30, 0xB5	; 181
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	80 81       	ld	r24, Z
    2692:	91 81       	ldd	r25, Z+1	; 0x01
    2694:	8d 93       	st	X+, r24
    2696:	9c 93       	st	X, r25
    2698:	fe 01       	movw	r30, r28
    269a:	e9 5b       	subi	r30, 0xB9	; 185
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	80 81       	ld	r24, Z
    26a0:	91 81       	ldd	r25, Z+1	; 0x01
    26a2:	01 97       	sbiw	r24, 0x01	; 1
    26a4:	f1 f7       	brne	.-4      	; 0x26a2 <main+0x135a>
    26a6:	fe 01       	movw	r30, r28
    26a8:	e9 5b       	subi	r30, 0xB9	; 185
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	91 83       	std	Z+1, r25	; 0x01
    26ae:	80 83       	st	Z, r24
						_delay_ms(1000);
						LCD_clearScreen();
    26b0:	0e 94 bb 22 	call	0x4576	; 0x4576 <LCD_clearScreen>
    26b4:	0f c2       	rjmp	.+1054   	; 0x2ad4 <main+0x178c>
					}
				}
				else if (check_new_pass == 0) {
    26b6:	80 91 a5 01 	lds	r24, 0x01A5
    26ba:	88 23       	and	r24, r24
    26bc:	09 f0       	breq	.+2      	; 0x26c0 <main+0x1378>
    26be:	0a c2       	rjmp	.+1044   	; 0x2ad4 <main+0x178c>
					LCD_clearScreen();
    26c0:	0e 94 bb 22 	call	0x4576	; 0x4576 <LCD_clearScreen>
					LCD_displayString("Wrong Password");
    26c4:	83 e1       	ldi	r24, 0x13	; 19
    26c6:	91 e0       	ldi	r25, 0x01	; 1
    26c8:	0e 94 14 22 	call	0x4428	; 0x4428 <LCD_displayString>
    26cc:	fe 01       	movw	r30, r28
    26ce:	ed 5b       	subi	r30, 0xBD	; 189
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	aa e7       	ldi	r26, 0x7A	; 122
    26d8:	b4 e4       	ldi	r27, 0x44	; 68
    26da:	80 83       	st	Z, r24
    26dc:	91 83       	std	Z+1, r25	; 0x01
    26de:	a2 83       	std	Z+2, r26	; 0x02
    26e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e2:	8e 01       	movw	r16, r28
    26e4:	01 5c       	subi	r16, 0xC1	; 193
    26e6:	1f 4f       	sbci	r17, 0xFF	; 255
    26e8:	fe 01       	movw	r30, r28
    26ea:	ed 5b       	subi	r30, 0xBD	; 189
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	60 81       	ld	r22, Z
    26f0:	71 81       	ldd	r23, Z+1	; 0x01
    26f2:	82 81       	ldd	r24, Z+2	; 0x02
    26f4:	93 81       	ldd	r25, Z+3	; 0x03
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	4a ef       	ldi	r20, 0xFA	; 250
    26fc:	54 e4       	ldi	r21, 0x44	; 68
    26fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	f8 01       	movw	r30, r16
    2708:	80 83       	st	Z, r24
    270a:	91 83       	std	Z+1, r25	; 0x01
    270c:	a2 83       	std	Z+2, r26	; 0x02
    270e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2710:	fe 01       	movw	r30, r28
    2712:	ff 96       	adiw	r30, 0x3f	; 63
    2714:	60 81       	ld	r22, Z
    2716:	71 81       	ldd	r23, Z+1	; 0x01
    2718:	82 81       	ldd	r24, Z+2	; 0x02
    271a:	93 81       	ldd	r25, Z+3	; 0x03
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e8       	ldi	r20, 0x80	; 128
    2722:	5f e3       	ldi	r21, 0x3F	; 63
    2724:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2728:	88 23       	and	r24, r24
    272a:	2c f4       	brge	.+10     	; 0x2736 <main+0x13ee>
		__ticks = 1;
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	9e af       	std	Y+62, r25	; 0x3e
    2732:	8d af       	std	Y+61, r24	; 0x3d
    2734:	46 c0       	rjmp	.+140    	; 0x27c2 <main+0x147a>
	else if (__tmp > 65535)
    2736:	fe 01       	movw	r30, r28
    2738:	ff 96       	adiw	r30, 0x3f	; 63
    273a:	60 81       	ld	r22, Z
    273c:	71 81       	ldd	r23, Z+1	; 0x01
    273e:	82 81       	ldd	r24, Z+2	; 0x02
    2740:	93 81       	ldd	r25, Z+3	; 0x03
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	3f ef       	ldi	r19, 0xFF	; 255
    2746:	4f e7       	ldi	r20, 0x7F	; 127
    2748:	57 e4       	ldi	r21, 0x47	; 71
    274a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    274e:	18 16       	cp	r1, r24
    2750:	64 f5       	brge	.+88     	; 0x27aa <main+0x1462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2752:	fe 01       	movw	r30, r28
    2754:	ed 5b       	subi	r30, 0xBD	; 189
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	60 81       	ld	r22, Z
    275a:	71 81       	ldd	r23, Z+1	; 0x01
    275c:	82 81       	ldd	r24, Z+2	; 0x02
    275e:	93 81       	ldd	r25, Z+3	; 0x03
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	40 e2       	ldi	r20, 0x20	; 32
    2766:	51 e4       	ldi	r21, 0x41	; 65
    2768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	bc 01       	movw	r22, r24
    2772:	cd 01       	movw	r24, r26
    2774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	9e af       	std	Y+62, r25	; 0x3e
    277e:	8d af       	std	Y+61, r24	; 0x3d
    2780:	0f c0       	rjmp	.+30     	; 0x27a0 <main+0x1458>
    2782:	88 ec       	ldi	r24, 0xC8	; 200
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	9c af       	std	Y+60, r25	; 0x3c
    2788:	8b af       	std	Y+59, r24	; 0x3b
    278a:	8b ad       	ldd	r24, Y+59	; 0x3b
    278c:	9c ad       	ldd	r25, Y+60	; 0x3c
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <main+0x1446>
    2792:	9c af       	std	Y+60, r25	; 0x3c
    2794:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2796:	8d ad       	ldd	r24, Y+61	; 0x3d
    2798:	9e ad       	ldd	r25, Y+62	; 0x3e
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	9e af       	std	Y+62, r25	; 0x3e
    279e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    27a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    27a4:	00 97       	sbiw	r24, 0x00	; 0
    27a6:	69 f7       	brne	.-38     	; 0x2782 <main+0x143a>
    27a8:	16 c0       	rjmp	.+44     	; 0x27d6 <main+0x148e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27aa:	fe 01       	movw	r30, r28
    27ac:	ff 96       	adiw	r30, 0x3f	; 63
    27ae:	60 81       	ld	r22, Z
    27b0:	71 81       	ldd	r23, Z+1	; 0x01
    27b2:	82 81       	ldd	r24, Z+2	; 0x02
    27b4:	93 81       	ldd	r25, Z+3	; 0x03
    27b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	9e af       	std	Y+62, r25	; 0x3e
    27c0:	8d af       	std	Y+61, r24	; 0x3d
    27c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    27c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    27c6:	9a af       	std	Y+58, r25	; 0x3a
    27c8:	89 af       	std	Y+57, r24	; 0x39
    27ca:	89 ad       	ldd	r24, Y+57	; 0x39
    27cc:	9a ad       	ldd	r25, Y+58	; 0x3a
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	f1 f7       	brne	.-4      	; 0x27ce <main+0x1486>
    27d2:	9a af       	std	Y+58, r25	; 0x3a
    27d4:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(1000);
					LCD_clearScreen();
    27d6:	0e 94 bb 22 	call	0x4576	; 0x4576 <LCD_clearScreen>
					error_Counter++;
    27da:	80 91 a1 01 	lds	r24, 0x01A1
    27de:	8f 5f       	subi	r24, 0xFF	; 255
    27e0:	80 93 a1 01 	sts	0x01A1, r24
					if (error_Counter != 3) {
    27e4:	80 91 a1 01 	lds	r24, 0x01A1
    27e8:	83 30       	cpi	r24, 0x03	; 3
    27ea:	09 f4       	brne	.+2      	; 0x27ee <main+0x14a6>
    27ec:	77 c0       	rjmp	.+238    	; 0x28dc <main+0x1594>
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	a0 e2       	ldi	r26, 0x20	; 32
    27f4:	b1 e4       	ldi	r27, 0x41	; 65
    27f6:	8d ab       	std	Y+53, r24	; 0x35
    27f8:	9e ab       	std	Y+54, r25	; 0x36
    27fa:	af ab       	std	Y+55, r26	; 0x37
    27fc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fe:	6d a9       	ldd	r22, Y+53	; 0x35
    2800:	7e a9       	ldd	r23, Y+54	; 0x36
    2802:	8f a9       	ldd	r24, Y+55	; 0x37
    2804:	98 ad       	ldd	r25, Y+56	; 0x38
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	4a ef       	ldi	r20, 0xFA	; 250
    280c:	54 e4       	ldi	r21, 0x44	; 68
    280e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	89 ab       	std	Y+49, r24	; 0x31
    2818:	9a ab       	std	Y+50, r25	; 0x32
    281a:	ab ab       	std	Y+51, r26	; 0x33
    281c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    281e:	69 a9       	ldd	r22, Y+49	; 0x31
    2820:	7a a9       	ldd	r23, Y+50	; 0x32
    2822:	8b a9       	ldd	r24, Y+51	; 0x33
    2824:	9c a9       	ldd	r25, Y+52	; 0x34
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	40 e8       	ldi	r20, 0x80	; 128
    282c:	5f e3       	ldi	r21, 0x3F	; 63
    282e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2832:	88 23       	and	r24, r24
    2834:	2c f4       	brge	.+10     	; 0x2840 <main+0x14f8>
		__ticks = 1;
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	98 ab       	std	Y+48, r25	; 0x30
    283c:	8f a7       	std	Y+47, r24	; 0x2f
    283e:	3f c0       	rjmp	.+126    	; 0x28be <main+0x1576>
	else if (__tmp > 65535)
    2840:	69 a9       	ldd	r22, Y+49	; 0x31
    2842:	7a a9       	ldd	r23, Y+50	; 0x32
    2844:	8b a9       	ldd	r24, Y+51	; 0x33
    2846:	9c a9       	ldd	r25, Y+52	; 0x34
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	3f ef       	ldi	r19, 0xFF	; 255
    284c:	4f e7       	ldi	r20, 0x7F	; 127
    284e:	57 e4       	ldi	r21, 0x47	; 71
    2850:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2854:	18 16       	cp	r1, r24
    2856:	4c f5       	brge	.+82     	; 0x28aa <main+0x1562>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2858:	6d a9       	ldd	r22, Y+53	; 0x35
    285a:	7e a9       	ldd	r23, Y+54	; 0x36
    285c:	8f a9       	ldd	r24, Y+55	; 0x37
    285e:	98 ad       	ldd	r25, Y+56	; 0x38
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e2       	ldi	r20, 0x20	; 32
    2866:	51 e4       	ldi	r21, 0x41	; 65
    2868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	bc 01       	movw	r22, r24
    2872:	cd 01       	movw	r24, r26
    2874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	98 ab       	std	Y+48, r25	; 0x30
    287e:	8f a7       	std	Y+47, r24	; 0x2f
    2880:	0f c0       	rjmp	.+30     	; 0x28a0 <main+0x1558>
    2882:	88 ec       	ldi	r24, 0xC8	; 200
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	9e a7       	std	Y+46, r25	; 0x2e
    2888:	8d a7       	std	Y+45, r24	; 0x2d
    288a:	8d a5       	ldd	r24, Y+45	; 0x2d
    288c:	9e a5       	ldd	r25, Y+46	; 0x2e
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	f1 f7       	brne	.-4      	; 0x288e <main+0x1546>
    2892:	9e a7       	std	Y+46, r25	; 0x2e
    2894:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2896:	8f a5       	ldd	r24, Y+47	; 0x2f
    2898:	98 a9       	ldd	r25, Y+48	; 0x30
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	98 ab       	std	Y+48, r25	; 0x30
    289e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    28a2:	98 a9       	ldd	r25, Y+48	; 0x30
    28a4:	00 97       	sbiw	r24, 0x00	; 0
    28a6:	69 f7       	brne	.-38     	; 0x2882 <main+0x153a>
    28a8:	14 c0       	rjmp	.+40     	; 0x28d2 <main+0x158a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28aa:	69 a9       	ldd	r22, Y+49	; 0x31
    28ac:	7a a9       	ldd	r23, Y+50	; 0x32
    28ae:	8b a9       	ldd	r24, Y+51	; 0x33
    28b0:	9c a9       	ldd	r25, Y+52	; 0x34
    28b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	98 ab       	std	Y+48, r25	; 0x30
    28bc:	8f a7       	std	Y+47, r24	; 0x2f
    28be:	8f a5       	ldd	r24, Y+47	; 0x2f
    28c0:	98 a9       	ldd	r25, Y+48	; 0x30
    28c2:	9c a7       	std	Y+44, r25	; 0x2c
    28c4:	8b a7       	std	Y+43, r24	; 0x2b
    28c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    28c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	f1 f7       	brne	.-4      	; 0x28ca <main+0x1582>
    28ce:	9c a7       	std	Y+44, r25	; 0x2c
    28d0:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(10);
						UART_sendByte(wait_For_Error);
    28d2:	80 91 a2 01 	lds	r24, 0x01A2
    28d6:	0e 94 79 23 	call	0x46f2	; 0x46f2 <UART_sendByte>
    28da:	fc c0       	rjmp	.+504    	; 0x2ad4 <main+0x178c>
					}
					else if (error_Counter == 3) {
    28dc:	80 91 a1 01 	lds	r24, 0x01A1
    28e0:	83 30       	cpi	r24, 0x03	; 3
    28e2:	09 f0       	breq	.+2      	; 0x28e6 <main+0x159e>
    28e4:	f7 c0       	rjmp	.+494    	; 0x2ad4 <main+0x178c>
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	a0 e2       	ldi	r26, 0x20	; 32
    28ec:	b1 e4       	ldi	r27, 0x41	; 65
    28ee:	8f a3       	std	Y+39, r24	; 0x27
    28f0:	98 a7       	std	Y+40, r25	; 0x28
    28f2:	a9 a7       	std	Y+41, r26	; 0x29
    28f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f6:	6f a1       	ldd	r22, Y+39	; 0x27
    28f8:	78 a5       	ldd	r23, Y+40	; 0x28
    28fa:	89 a5       	ldd	r24, Y+41	; 0x29
    28fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	4a ef       	ldi	r20, 0xFA	; 250
    2904:	54 e4       	ldi	r21, 0x44	; 68
    2906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	8b a3       	std	Y+35, r24	; 0x23
    2910:	9c a3       	std	Y+36, r25	; 0x24
    2912:	ad a3       	std	Y+37, r26	; 0x25
    2914:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2916:	6b a1       	ldd	r22, Y+35	; 0x23
    2918:	7c a1       	ldd	r23, Y+36	; 0x24
    291a:	8d a1       	ldd	r24, Y+37	; 0x25
    291c:	9e a1       	ldd	r25, Y+38	; 0x26
    291e:	20 e0       	ldi	r18, 0x00	; 0
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	40 e8       	ldi	r20, 0x80	; 128
    2924:	5f e3       	ldi	r21, 0x3F	; 63
    2926:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    292a:	88 23       	and	r24, r24
    292c:	2c f4       	brge	.+10     	; 0x2938 <main+0x15f0>
		__ticks = 1;
    292e:	81 e0       	ldi	r24, 0x01	; 1
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	9a a3       	std	Y+34, r25	; 0x22
    2934:	89 a3       	std	Y+33, r24	; 0x21
    2936:	3f c0       	rjmp	.+126    	; 0x29b6 <main+0x166e>
	else if (__tmp > 65535)
    2938:	6b a1       	ldd	r22, Y+35	; 0x23
    293a:	7c a1       	ldd	r23, Y+36	; 0x24
    293c:	8d a1       	ldd	r24, Y+37	; 0x25
    293e:	9e a1       	ldd	r25, Y+38	; 0x26
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	3f ef       	ldi	r19, 0xFF	; 255
    2944:	4f e7       	ldi	r20, 0x7F	; 127
    2946:	57 e4       	ldi	r21, 0x47	; 71
    2948:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    294c:	18 16       	cp	r1, r24
    294e:	4c f5       	brge	.+82     	; 0x29a2 <main+0x165a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2950:	6f a1       	ldd	r22, Y+39	; 0x27
    2952:	78 a5       	ldd	r23, Y+40	; 0x28
    2954:	89 a5       	ldd	r24, Y+41	; 0x29
    2956:	9a a5       	ldd	r25, Y+42	; 0x2a
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	40 e2       	ldi	r20, 0x20	; 32
    295e:	51 e4       	ldi	r21, 0x41	; 65
    2960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	bc 01       	movw	r22, r24
    296a:	cd 01       	movw	r24, r26
    296c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	9a a3       	std	Y+34, r25	; 0x22
    2976:	89 a3       	std	Y+33, r24	; 0x21
    2978:	0f c0       	rjmp	.+30     	; 0x2998 <main+0x1650>
    297a:	88 ec       	ldi	r24, 0xC8	; 200
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	98 a3       	std	Y+32, r25	; 0x20
    2980:	8f 8f       	std	Y+31, r24	; 0x1f
    2982:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2984:	98 a1       	ldd	r25, Y+32	; 0x20
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	f1 f7       	brne	.-4      	; 0x2986 <main+0x163e>
    298a:	98 a3       	std	Y+32, r25	; 0x20
    298c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    298e:	89 a1       	ldd	r24, Y+33	; 0x21
    2990:	9a a1       	ldd	r25, Y+34	; 0x22
    2992:	01 97       	sbiw	r24, 0x01	; 1
    2994:	9a a3       	std	Y+34, r25	; 0x22
    2996:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2998:	89 a1       	ldd	r24, Y+33	; 0x21
    299a:	9a a1       	ldd	r25, Y+34	; 0x22
    299c:	00 97       	sbiw	r24, 0x00	; 0
    299e:	69 f7       	brne	.-38     	; 0x297a <main+0x1632>
    29a0:	14 c0       	rjmp	.+40     	; 0x29ca <main+0x1682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a2:	6b a1       	ldd	r22, Y+35	; 0x23
    29a4:	7c a1       	ldd	r23, Y+36	; 0x24
    29a6:	8d a1       	ldd	r24, Y+37	; 0x25
    29a8:	9e a1       	ldd	r25, Y+38	; 0x26
    29aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	9a a3       	std	Y+34, r25	; 0x22
    29b4:	89 a3       	std	Y+33, r24	; 0x21
    29b6:	89 a1       	ldd	r24, Y+33	; 0x21
    29b8:	9a a1       	ldd	r25, Y+34	; 0x22
    29ba:	9e 8f       	std	Y+30, r25	; 0x1e
    29bc:	8d 8f       	std	Y+29, r24	; 0x1d
    29be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29c2:	01 97       	sbiw	r24, 0x01	; 1
    29c4:	f1 f7       	brne	.-4      	; 0x29c2 <main+0x167a>
    29c6:	9e 8f       	std	Y+30, r25	; 0x1e
    29c8:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(10);
						UART_sendByte(error_Detected);
    29ca:	80 91 96 01 	lds	r24, 0x0196
    29ce:	0e 94 79 23 	call	0x46f2	; 0x46f2 <UART_sendByte>
						LCD_displayString("System Locked");
    29d2:	82 e2       	ldi	r24, 0x22	; 34
    29d4:	91 e0       	ldi	r25, 0x01	; 1
    29d6:	0e 94 14 22 	call	0x4428	; 0x4428 <LCD_displayString>
						LCD_displayStringRowColumn(1, 0, "Wait for 1 min");
    29da:	20 e3       	ldi	r18, 0x30	; 48
    29dc:	31 e0       	ldi	r19, 0x01	; 1
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	60 e0       	ldi	r22, 0x00	; 0
    29e2:	a9 01       	movw	r20, r18
    29e4:	0e 94 7f 22 	call	0x44fe	; 0x44fe <LCD_displayStringRowColumn>
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	9c e7       	ldi	r25, 0x7C	; 124
    29ec:	a2 e1       	ldi	r26, 0x12	; 18
    29ee:	b8 e4       	ldi	r27, 0x48	; 72
    29f0:	89 8f       	std	Y+25, r24	; 0x19
    29f2:	9a 8f       	std	Y+26, r25	; 0x1a
    29f4:	ab 8f       	std	Y+27, r26	; 0x1b
    29f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f8:	69 8d       	ldd	r22, Y+25	; 0x19
    29fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	4a ef       	ldi	r20, 0xFA	; 250
    2a06:	54 e4       	ldi	r21, 0x44	; 68
    2a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	8d 8b       	std	Y+21, r24	; 0x15
    2a12:	9e 8b       	std	Y+22, r25	; 0x16
    2a14:	af 8b       	std	Y+23, r26	; 0x17
    2a16:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a18:	6d 89       	ldd	r22, Y+21	; 0x15
    2a1a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a1c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a1e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	40 e8       	ldi	r20, 0x80	; 128
    2a26:	5f e3       	ldi	r21, 0x3F	; 63
    2a28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a2c:	88 23       	and	r24, r24
    2a2e:	2c f4       	brge	.+10     	; 0x2a3a <main+0x16f2>
		__ticks = 1;
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	9c 8b       	std	Y+20, r25	; 0x14
    2a36:	8b 8b       	std	Y+19, r24	; 0x13
    2a38:	3f c0       	rjmp	.+126    	; 0x2ab8 <main+0x1770>
	else if (__tmp > 65535)
    2a3a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a3c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a3e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a40:	98 8d       	ldd	r25, Y+24	; 0x18
    2a42:	20 e0       	ldi	r18, 0x00	; 0
    2a44:	3f ef       	ldi	r19, 0xFF	; 255
    2a46:	4f e7       	ldi	r20, 0x7F	; 127
    2a48:	57 e4       	ldi	r21, 0x47	; 71
    2a4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a4e:	18 16       	cp	r1, r24
    2a50:	4c f5       	brge	.+82     	; 0x2aa4 <main+0x175c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a52:	69 8d       	ldd	r22, Y+25	; 0x19
    2a54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	40 e2       	ldi	r20, 0x20	; 32
    2a60:	51 e4       	ldi	r21, 0x41	; 65
    2a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	bc 01       	movw	r22, r24
    2a6c:	cd 01       	movw	r24, r26
    2a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	9c 8b       	std	Y+20, r25	; 0x14
    2a78:	8b 8b       	std	Y+19, r24	; 0x13
    2a7a:	0f c0       	rjmp	.+30     	; 0x2a9a <main+0x1752>
    2a7c:	88 ec       	ldi	r24, 0xC8	; 200
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	9a 8b       	std	Y+18, r25	; 0x12
    2a82:	89 8b       	std	Y+17, r24	; 0x11
    2a84:	89 89       	ldd	r24, Y+17	; 0x11
    2a86:	9a 89       	ldd	r25, Y+18	; 0x12
    2a88:	01 97       	sbiw	r24, 0x01	; 1
    2a8a:	f1 f7       	brne	.-4      	; 0x2a88 <main+0x1740>
    2a8c:	9a 8b       	std	Y+18, r25	; 0x12
    2a8e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a90:	8b 89       	ldd	r24, Y+19	; 0x13
    2a92:	9c 89       	ldd	r25, Y+20	; 0x14
    2a94:	01 97       	sbiw	r24, 0x01	; 1
    2a96:	9c 8b       	std	Y+20, r25	; 0x14
    2a98:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a9a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a9c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a9e:	00 97       	sbiw	r24, 0x00	; 0
    2aa0:	69 f7       	brne	.-38     	; 0x2a7c <main+0x1734>
    2aa2:	14 c0       	rjmp	.+40     	; 0x2acc <main+0x1784>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa4:	6d 89       	ldd	r22, Y+21	; 0x15
    2aa6:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa8:	8f 89       	ldd	r24, Y+23	; 0x17
    2aaa:	98 8d       	ldd	r25, Y+24	; 0x18
    2aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	9c 8b       	std	Y+20, r25	; 0x14
    2ab6:	8b 8b       	std	Y+19, r24	; 0x13
    2ab8:	8b 89       	ldd	r24, Y+19	; 0x13
    2aba:	9c 89       	ldd	r25, Y+20	; 0x14
    2abc:	98 8b       	std	Y+16, r25	; 0x10
    2abe:	8f 87       	std	Y+15, r24	; 0x0f
    2ac0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ac2:	98 89       	ldd	r25, Y+16	; 0x10
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	f1 f7       	brne	.-4      	; 0x2ac4 <main+0x177c>
    2ac8:	98 8b       	std	Y+16, r25	; 0x10
    2aca:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(150000);
						LCD_clearScreen();
    2acc:	0e 94 bb 22 	call	0x4576	; 0x4576 <LCD_clearScreen>
						error_Counter = 0;
    2ad0:	10 92 a1 01 	sts	0x01A1, r1

		get_Passwords();
		/* Receive the result of comparison between the 2 passwords from the CONTROL_ECU */
		flag1 = UART_recieveByte();
		/* Proceed the application in case 2 passwords are equal */
		while (flag1 == 1) {
    2ad4:	80 91 9e 01 	lds	r24, 0x019E
    2ad8:	81 30       	cpi	r24, 0x01	; 1
    2ada:	11 f4       	brne	.+4      	; 0x2ae0 <main+0x1798>
    2adc:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <main+0xda>
					}
				}
			}
		}
		/* DO NOT Proceed the application in case 2 passwords are not equal */
		if (flag1 == 0) {
    2ae0:	80 91 9e 01 	lds	r24, 0x019E
    2ae4:	88 23       	and	r24, r24
    2ae6:	11 f0       	breq	.+4      	; 0x2aec <main+0x17a4>
    2ae8:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <main+0xca>
			LCD_displayString("Wrong Entry!!");
    2aec:	81 e7       	ldi	r24, 0x71	; 113
    2aee:	91 e0       	ldi	r25, 0x01	; 1
    2af0:	0e 94 14 22 	call	0x4428	; 0x4428 <LCD_displayString>
			LCD_displayStringRowColumn(1,0,"Plz try again");
    2af4:	2f e7       	ldi	r18, 0x7F	; 127
    2af6:	31 e0       	ldi	r19, 0x01	; 1
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	60 e0       	ldi	r22, 0x00	; 0
    2afc:	a9 01       	movw	r20, r18
    2afe:	0e 94 7f 22 	call	0x44fe	; 0x44fe <LCD_displayStringRowColumn>
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	aa e7       	ldi	r26, 0x7A	; 122
    2b08:	b4 e4       	ldi	r27, 0x44	; 68
    2b0a:	8b 87       	std	Y+11, r24	; 0x0b
    2b0c:	9c 87       	std	Y+12, r25	; 0x0c
    2b0e:	ad 87       	std	Y+13, r26	; 0x0d
    2b10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	4a ef       	ldi	r20, 0xFA	; 250
    2b20:	54 e4       	ldi	r21, 0x44	; 68
    2b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	8f 83       	std	Y+7, r24	; 0x07
    2b2c:	98 87       	std	Y+8, r25	; 0x08
    2b2e:	a9 87       	std	Y+9, r26	; 0x09
    2b30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b32:	6f 81       	ldd	r22, Y+7	; 0x07
    2b34:	78 85       	ldd	r23, Y+8	; 0x08
    2b36:	89 85       	ldd	r24, Y+9	; 0x09
    2b38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	40 e8       	ldi	r20, 0x80	; 128
    2b40:	5f e3       	ldi	r21, 0x3F	; 63
    2b42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b46:	88 23       	and	r24, r24
    2b48:	2c f4       	brge	.+10     	; 0x2b54 <main+0x180c>
		__ticks = 1;
    2b4a:	81 e0       	ldi	r24, 0x01	; 1
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	9e 83       	std	Y+6, r25	; 0x06
    2b50:	8d 83       	std	Y+5, r24	; 0x05
    2b52:	3f c0       	rjmp	.+126    	; 0x2bd2 <main+0x188a>
	else if (__tmp > 65535)
    2b54:	6f 81       	ldd	r22, Y+7	; 0x07
    2b56:	78 85       	ldd	r23, Y+8	; 0x08
    2b58:	89 85       	ldd	r24, Y+9	; 0x09
    2b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	3f ef       	ldi	r19, 0xFF	; 255
    2b60:	4f e7       	ldi	r20, 0x7F	; 127
    2b62:	57 e4       	ldi	r21, 0x47	; 71
    2b64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b68:	18 16       	cp	r1, r24
    2b6a:	4c f5       	brge	.+82     	; 0x2bbe <main+0x1876>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	40 e2       	ldi	r20, 0x20	; 32
    2b7a:	51 e4       	ldi	r21, 0x41	; 65
    2b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	bc 01       	movw	r22, r24
    2b86:	cd 01       	movw	r24, r26
    2b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	9e 83       	std	Y+6, r25	; 0x06
    2b92:	8d 83       	std	Y+5, r24	; 0x05
    2b94:	0f c0       	rjmp	.+30     	; 0x2bb4 <main+0x186c>
    2b96:	88 ec       	ldi	r24, 0xC8	; 200
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	9c 83       	std	Y+4, r25	; 0x04
    2b9c:	8b 83       	std	Y+3, r24	; 0x03
    2b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba2:	01 97       	sbiw	r24, 0x01	; 1
    2ba4:	f1 f7       	brne	.-4      	; 0x2ba2 <main+0x185a>
    2ba6:	9c 83       	std	Y+4, r25	; 0x04
    2ba8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2baa:	8d 81       	ldd	r24, Y+5	; 0x05
    2bac:	9e 81       	ldd	r25, Y+6	; 0x06
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	9e 83       	std	Y+6, r25	; 0x06
    2bb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb8:	00 97       	sbiw	r24, 0x00	; 0
    2bba:	69 f7       	brne	.-38     	; 0x2b96 <main+0x184e>
    2bbc:	14 c0       	rjmp	.+40     	; 0x2be6 <main+0x189e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bbe:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc0:	78 85       	ldd	r23, Y+8	; 0x08
    2bc2:	89 85       	ldd	r24, Y+9	; 0x09
    2bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	9e 83       	std	Y+6, r25	; 0x06
    2bd0:	8d 83       	std	Y+5, r24	; 0x05
    2bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd6:	9a 83       	std	Y+2, r25	; 0x02
    2bd8:	89 83       	std	Y+1, r24	; 0x01
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
    2bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	f1 f7       	brne	.-4      	; 0x2bde <main+0x1896>
    2be2:	9a 83       	std	Y+2, r25	; 0x02
    2be4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			LCD_clearScreen();
    2be6:	0e 94 bb 22 	call	0x4576	; 0x4576 <LCD_clearScreen>
    2bea:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <main+0xca>

00002bee <__vector_11>:
#include <avr/interrupt.h>
#include "common_macros.h"
/* Global variable to hold the address of the call back function in the application */
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER0_OVF_vect) {
    2bee:	1f 92       	push	r1
    2bf0:	0f 92       	push	r0
    2bf2:	0f b6       	in	r0, 0x3f	; 63
    2bf4:	0f 92       	push	r0
    2bf6:	11 24       	eor	r1, r1
    2bf8:	2f 93       	push	r18
    2bfa:	3f 93       	push	r19
    2bfc:	4f 93       	push	r20
    2bfe:	5f 93       	push	r21
    2c00:	6f 93       	push	r22
    2c02:	7f 93       	push	r23
    2c04:	8f 93       	push	r24
    2c06:	9f 93       	push	r25
    2c08:	af 93       	push	r26
    2c0a:	bf 93       	push	r27
    2c0c:	ef 93       	push	r30
    2c0e:	ff 93       	push	r31
    2c10:	df 93       	push	r29
    2c12:	cf 93       	push	r28
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR) {
    2c18:	80 91 a3 01 	lds	r24, 0x01A3
    2c1c:	90 91 a4 01 	lds	r25, 0x01A4
    2c20:	00 97       	sbiw	r24, 0x00	; 0
    2c22:	29 f0       	breq	.+10     	; 0x2c2e <__vector_11+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2c24:	e0 91 a3 01 	lds	r30, 0x01A3
    2c28:	f0 91 a4 01 	lds	r31, 0x01A4
    2c2c:	09 95       	icall
	}
}
    2c2e:	cf 91       	pop	r28
    2c30:	df 91       	pop	r29
    2c32:	ff 91       	pop	r31
    2c34:	ef 91       	pop	r30
    2c36:	bf 91       	pop	r27
    2c38:	af 91       	pop	r26
    2c3a:	9f 91       	pop	r25
    2c3c:	8f 91       	pop	r24
    2c3e:	7f 91       	pop	r23
    2c40:	6f 91       	pop	r22
    2c42:	5f 91       	pop	r21
    2c44:	4f 91       	pop	r20
    2c46:	3f 91       	pop	r19
    2c48:	2f 91       	pop	r18
    2c4a:	0f 90       	pop	r0
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	0f 90       	pop	r0
    2c50:	1f 90       	pop	r1
    2c52:	18 95       	reti

00002c54 <__vector_9>:

ISR(TIMER1_OVF_vect) {
    2c54:	1f 92       	push	r1
    2c56:	0f 92       	push	r0
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	0f 92       	push	r0
    2c5c:	11 24       	eor	r1, r1
    2c5e:	2f 93       	push	r18
    2c60:	3f 93       	push	r19
    2c62:	4f 93       	push	r20
    2c64:	5f 93       	push	r21
    2c66:	6f 93       	push	r22
    2c68:	7f 93       	push	r23
    2c6a:	8f 93       	push	r24
    2c6c:	9f 93       	push	r25
    2c6e:	af 93       	push	r26
    2c70:	bf 93       	push	r27
    2c72:	ef 93       	push	r30
    2c74:	ff 93       	push	r31
    2c76:	df 93       	push	r29
    2c78:	cf 93       	push	r28
    2c7a:	cd b7       	in	r28, 0x3d	; 61
    2c7c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR) {
    2c7e:	80 91 a3 01 	lds	r24, 0x01A3
    2c82:	90 91 a4 01 	lds	r25, 0x01A4
    2c86:	00 97       	sbiw	r24, 0x00	; 0
    2c88:	29 f0       	breq	.+10     	; 0x2c94 <__vector_9+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2c8a:	e0 91 a3 01 	lds	r30, 0x01A3
    2c8e:	f0 91 a4 01 	lds	r31, 0x01A4
    2c92:	09 95       	icall
	}
}
    2c94:	cf 91       	pop	r28
    2c96:	df 91       	pop	r29
    2c98:	ff 91       	pop	r31
    2c9a:	ef 91       	pop	r30
    2c9c:	bf 91       	pop	r27
    2c9e:	af 91       	pop	r26
    2ca0:	9f 91       	pop	r25
    2ca2:	8f 91       	pop	r24
    2ca4:	7f 91       	pop	r23
    2ca6:	6f 91       	pop	r22
    2ca8:	5f 91       	pop	r21
    2caa:	4f 91       	pop	r20
    2cac:	3f 91       	pop	r19
    2cae:	2f 91       	pop	r18
    2cb0:	0f 90       	pop	r0
    2cb2:	0f be       	out	0x3f, r0	; 63
    2cb4:	0f 90       	pop	r0
    2cb6:	1f 90       	pop	r1
    2cb8:	18 95       	reti

00002cba <__vector_5>:

ISR(TIMER2_OVF_vect) {
    2cba:	1f 92       	push	r1
    2cbc:	0f 92       	push	r0
    2cbe:	0f b6       	in	r0, 0x3f	; 63
    2cc0:	0f 92       	push	r0
    2cc2:	11 24       	eor	r1, r1
    2cc4:	2f 93       	push	r18
    2cc6:	3f 93       	push	r19
    2cc8:	4f 93       	push	r20
    2cca:	5f 93       	push	r21
    2ccc:	6f 93       	push	r22
    2cce:	7f 93       	push	r23
    2cd0:	8f 93       	push	r24
    2cd2:	9f 93       	push	r25
    2cd4:	af 93       	push	r26
    2cd6:	bf 93       	push	r27
    2cd8:	ef 93       	push	r30
    2cda:	ff 93       	push	r31
    2cdc:	df 93       	push	r29
    2cde:	cf 93       	push	r28
    2ce0:	cd b7       	in	r28, 0x3d	; 61
    2ce2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR) {
    2ce4:	80 91 a3 01 	lds	r24, 0x01A3
    2ce8:	90 91 a4 01 	lds	r25, 0x01A4
    2cec:	00 97       	sbiw	r24, 0x00	; 0
    2cee:	29 f0       	breq	.+10     	; 0x2cfa <__vector_5+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2cf0:	e0 91 a3 01 	lds	r30, 0x01A3
    2cf4:	f0 91 a4 01 	lds	r31, 0x01A4
    2cf8:	09 95       	icall
	}
}
    2cfa:	cf 91       	pop	r28
    2cfc:	df 91       	pop	r29
    2cfe:	ff 91       	pop	r31
    2d00:	ef 91       	pop	r30
    2d02:	bf 91       	pop	r27
    2d04:	af 91       	pop	r26
    2d06:	9f 91       	pop	r25
    2d08:	8f 91       	pop	r24
    2d0a:	7f 91       	pop	r23
    2d0c:	6f 91       	pop	r22
    2d0e:	5f 91       	pop	r21
    2d10:	4f 91       	pop	r20
    2d12:	3f 91       	pop	r19
    2d14:	2f 91       	pop	r18
    2d16:	0f 90       	pop	r0
    2d18:	0f be       	out	0x3f, r0	; 63
    2d1a:	0f 90       	pop	r0
    2d1c:	1f 90       	pop	r1
    2d1e:	18 95       	reti

00002d20 <__vector_10>:

ISR(TIMER0_COMP_vect) {
    2d20:	1f 92       	push	r1
    2d22:	0f 92       	push	r0
    2d24:	0f b6       	in	r0, 0x3f	; 63
    2d26:	0f 92       	push	r0
    2d28:	11 24       	eor	r1, r1
    2d2a:	2f 93       	push	r18
    2d2c:	3f 93       	push	r19
    2d2e:	4f 93       	push	r20
    2d30:	5f 93       	push	r21
    2d32:	6f 93       	push	r22
    2d34:	7f 93       	push	r23
    2d36:	8f 93       	push	r24
    2d38:	9f 93       	push	r25
    2d3a:	af 93       	push	r26
    2d3c:	bf 93       	push	r27
    2d3e:	ef 93       	push	r30
    2d40:	ff 93       	push	r31
    2d42:	df 93       	push	r29
    2d44:	cf 93       	push	r28
    2d46:	cd b7       	in	r28, 0x3d	; 61
    2d48:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR) {
    2d4a:	80 91 a3 01 	lds	r24, 0x01A3
    2d4e:	90 91 a4 01 	lds	r25, 0x01A4
    2d52:	00 97       	sbiw	r24, 0x00	; 0
    2d54:	29 f0       	breq	.+10     	; 0x2d60 <__vector_10+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2d56:	e0 91 a3 01 	lds	r30, 0x01A3
    2d5a:	f0 91 a4 01 	lds	r31, 0x01A4
    2d5e:	09 95       	icall
	}
}
    2d60:	cf 91       	pop	r28
    2d62:	df 91       	pop	r29
    2d64:	ff 91       	pop	r31
    2d66:	ef 91       	pop	r30
    2d68:	bf 91       	pop	r27
    2d6a:	af 91       	pop	r26
    2d6c:	9f 91       	pop	r25
    2d6e:	8f 91       	pop	r24
    2d70:	7f 91       	pop	r23
    2d72:	6f 91       	pop	r22
    2d74:	5f 91       	pop	r21
    2d76:	4f 91       	pop	r20
    2d78:	3f 91       	pop	r19
    2d7a:	2f 91       	pop	r18
    2d7c:	0f 90       	pop	r0
    2d7e:	0f be       	out	0x3f, r0	; 63
    2d80:	0f 90       	pop	r0
    2d82:	1f 90       	pop	r1
    2d84:	18 95       	reti

00002d86 <__vector_7>:

ISR(TIMER1_COMPA_vect) {
    2d86:	1f 92       	push	r1
    2d88:	0f 92       	push	r0
    2d8a:	0f b6       	in	r0, 0x3f	; 63
    2d8c:	0f 92       	push	r0
    2d8e:	11 24       	eor	r1, r1
    2d90:	2f 93       	push	r18
    2d92:	3f 93       	push	r19
    2d94:	4f 93       	push	r20
    2d96:	5f 93       	push	r21
    2d98:	6f 93       	push	r22
    2d9a:	7f 93       	push	r23
    2d9c:	8f 93       	push	r24
    2d9e:	9f 93       	push	r25
    2da0:	af 93       	push	r26
    2da2:	bf 93       	push	r27
    2da4:	ef 93       	push	r30
    2da6:	ff 93       	push	r31
    2da8:	df 93       	push	r29
    2daa:	cf 93       	push	r28
    2dac:	cd b7       	in	r28, 0x3d	; 61
    2dae:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR) {
    2db0:	80 91 a3 01 	lds	r24, 0x01A3
    2db4:	90 91 a4 01 	lds	r25, 0x01A4
    2db8:	00 97       	sbiw	r24, 0x00	; 0
    2dba:	29 f0       	breq	.+10     	; 0x2dc6 <__vector_7+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2dbc:	e0 91 a3 01 	lds	r30, 0x01A3
    2dc0:	f0 91 a4 01 	lds	r31, 0x01A4
    2dc4:	09 95       	icall
	}
}
    2dc6:	cf 91       	pop	r28
    2dc8:	df 91       	pop	r29
    2dca:	ff 91       	pop	r31
    2dcc:	ef 91       	pop	r30
    2dce:	bf 91       	pop	r27
    2dd0:	af 91       	pop	r26
    2dd2:	9f 91       	pop	r25
    2dd4:	8f 91       	pop	r24
    2dd6:	7f 91       	pop	r23
    2dd8:	6f 91       	pop	r22
    2dda:	5f 91       	pop	r21
    2ddc:	4f 91       	pop	r20
    2dde:	3f 91       	pop	r19
    2de0:	2f 91       	pop	r18
    2de2:	0f 90       	pop	r0
    2de4:	0f be       	out	0x3f, r0	; 63
    2de6:	0f 90       	pop	r0
    2de8:	1f 90       	pop	r1
    2dea:	18 95       	reti

00002dec <__vector_4>:

ISR(TIMER2_COMP_vect) {
    2dec:	1f 92       	push	r1
    2dee:	0f 92       	push	r0
    2df0:	0f b6       	in	r0, 0x3f	; 63
    2df2:	0f 92       	push	r0
    2df4:	11 24       	eor	r1, r1
    2df6:	2f 93       	push	r18
    2df8:	3f 93       	push	r19
    2dfa:	4f 93       	push	r20
    2dfc:	5f 93       	push	r21
    2dfe:	6f 93       	push	r22
    2e00:	7f 93       	push	r23
    2e02:	8f 93       	push	r24
    2e04:	9f 93       	push	r25
    2e06:	af 93       	push	r26
    2e08:	bf 93       	push	r27
    2e0a:	ef 93       	push	r30
    2e0c:	ff 93       	push	r31
    2e0e:	df 93       	push	r29
    2e10:	cf 93       	push	r28
    2e12:	cd b7       	in	r28, 0x3d	; 61
    2e14:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR) {
    2e16:	80 91 a3 01 	lds	r24, 0x01A3
    2e1a:	90 91 a4 01 	lds	r25, 0x01A4
    2e1e:	00 97       	sbiw	r24, 0x00	; 0
    2e20:	29 f0       	breq	.+10     	; 0x2e2c <__vector_4+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2e22:	e0 91 a3 01 	lds	r30, 0x01A3
    2e26:	f0 91 a4 01 	lds	r31, 0x01A4
    2e2a:	09 95       	icall
	}
}
    2e2c:	cf 91       	pop	r28
    2e2e:	df 91       	pop	r29
    2e30:	ff 91       	pop	r31
    2e32:	ef 91       	pop	r30
    2e34:	bf 91       	pop	r27
    2e36:	af 91       	pop	r26
    2e38:	9f 91       	pop	r25
    2e3a:	8f 91       	pop	r24
    2e3c:	7f 91       	pop	r23
    2e3e:	6f 91       	pop	r22
    2e40:	5f 91       	pop	r21
    2e42:	4f 91       	pop	r20
    2e44:	3f 91       	pop	r19
    2e46:	2f 91       	pop	r18
    2e48:	0f 90       	pop	r0
    2e4a:	0f be       	out	0x3f, r0	; 63
    2e4c:	0f 90       	pop	r0
    2e4e:	1f 90       	pop	r1
    2e50:	18 95       	reti

00002e52 <Timer_init>:

void Timer_init(const Timer_ConfigType * Config_Ptr) {
    2e52:	df 93       	push	r29
    2e54:	cf 93       	push	r28
    2e56:	00 d0       	rcall	.+0      	; 0x2e58 <Timer_init+0x6>
    2e58:	cd b7       	in	r28, 0x3d	; 61
    2e5a:	de b7       	in	r29, 0x3e	; 62
    2e5c:	9a 83       	std	Y+2, r25	; 0x02
    2e5e:	89 83       	std	Y+1, r24	; 0x01

	if (Config_Ptr->timer_ID == Timer_0) {
    2e60:	e9 81       	ldd	r30, Y+1	; 0x01
    2e62:	fa 81       	ldd	r31, Y+2	; 0x02
    2e64:	84 81       	ldd	r24, Z+4	; 0x04
    2e66:	88 23       	and	r24, r24
    2e68:	09 f0       	breq	.+2      	; 0x2e6c <Timer_init+0x1a>
    2e6a:	5f c0       	rjmp	.+190    	; 0x2f2a <Timer_init+0xd8>

		TCNT0 = Config_Ptr->timer_InitialValue;
    2e6c:	a2 e5       	ldi	r26, 0x52	; 82
    2e6e:	b0 e0       	ldi	r27, 0x00	; 0
    2e70:	e9 81       	ldd	r30, Y+1	; 0x01
    2e72:	fa 81       	ldd	r31, Y+2	; 0x02
    2e74:	80 81       	ld	r24, Z
    2e76:	91 81       	ldd	r25, Z+1	; 0x01
    2e78:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->timer_clock);
    2e7a:	a3 e5       	ldi	r26, 0x53	; 83
    2e7c:	b0 e0       	ldi	r27, 0x00	; 0
    2e7e:	e3 e5       	ldi	r30, 0x53	; 83
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	80 81       	ld	r24, Z
    2e84:	98 2f       	mov	r25, r24
    2e86:	98 7f       	andi	r25, 0xF8	; 248
    2e88:	e9 81       	ldd	r30, Y+1	; 0x01
    2e8a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e8c:	85 81       	ldd	r24, Z+5	; 0x05
    2e8e:	89 2b       	or	r24, r25
    2e90:	8c 93       	st	X, r24
		if (Config_Ptr->timer_mode == Normal_Mode) {
    2e92:	e9 81       	ldd	r30, Y+1	; 0x01
    2e94:	fa 81       	ldd	r31, Y+2	; 0x02
    2e96:	86 81       	ldd	r24, Z+6	; 0x06
    2e98:	88 23       	and	r24, r24
    2e9a:	e9 f4       	brne	.+58     	; 0x2ed6 <Timer_init+0x84>
			CLEAR_BIT(TCCR0,WGM00);
    2e9c:	a3 e5       	ldi	r26, 0x53	; 83
    2e9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ea0:	e3 e5       	ldi	r30, 0x53	; 83
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	80 81       	ld	r24, Z
    2ea6:	8f 7b       	andi	r24, 0xBF	; 191
    2ea8:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,WGM01);
    2eaa:	a3 e5       	ldi	r26, 0x53	; 83
    2eac:	b0 e0       	ldi	r27, 0x00	; 0
    2eae:	e3 e5       	ldi	r30, 0x53	; 83
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	80 81       	ld	r24, Z
    2eb4:	87 7f       	andi	r24, 0xF7	; 247
    2eb6:	8c 93       	st	X, r24
			SET_BIT(TCCR0,FOC0);
    2eb8:	a3 e5       	ldi	r26, 0x53	; 83
    2eba:	b0 e0       	ldi	r27, 0x00	; 0
    2ebc:	e3 e5       	ldi	r30, 0x53	; 83
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	80 81       	ld	r24, Z
    2ec2:	80 68       	ori	r24, 0x80	; 128
    2ec4:	8c 93       	st	X, r24
			SET_BIT(TIMSK, TOIE0);
    2ec6:	a9 e5       	ldi	r26, 0x59	; 89
    2ec8:	b0 e0       	ldi	r27, 0x00	; 0
    2eca:	e9 e5       	ldi	r30, 0x59	; 89
    2ecc:	f0 e0       	ldi	r31, 0x00	; 0
    2ece:	80 81       	ld	r24, Z
    2ed0:	81 60       	ori	r24, 0x01	; 1
    2ed2:	8c 93       	st	X, r24
    2ed4:	20 c1       	rjmp	.+576    	; 0x3116 <Timer_init+0x2c4>
		}
		else if (Config_Ptr->timer_mode == CTC_Mode){
    2ed6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ed8:	fa 81       	ldd	r31, Y+2	; 0x02
    2eda:	86 81       	ldd	r24, Z+6	; 0x06
    2edc:	81 30       	cpi	r24, 0x01	; 1
    2ede:	09 f0       	breq	.+2      	; 0x2ee2 <Timer_init+0x90>
    2ee0:	1a c1       	rjmp	.+564    	; 0x3116 <Timer_init+0x2c4>
			CLEAR_BIT(TCCR0,WGM00);
    2ee2:	a3 e5       	ldi	r26, 0x53	; 83
    2ee4:	b0 e0       	ldi	r27, 0x00	; 0
    2ee6:	e3 e5       	ldi	r30, 0x53	; 83
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	80 81       	ld	r24, Z
    2eec:	8f 7b       	andi	r24, 0xBF	; 191
    2eee:	8c 93       	st	X, r24
			SET_BIT(TCCR0,WGM01);
    2ef0:	a3 e5       	ldi	r26, 0x53	; 83
    2ef2:	b0 e0       	ldi	r27, 0x00	; 0
    2ef4:	e3 e5       	ldi	r30, 0x53	; 83
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	80 81       	ld	r24, Z
    2efa:	88 60       	ori	r24, 0x08	; 8
    2efc:	8c 93       	st	X, r24
			SET_BIT(TCCR0,FOC0);
    2efe:	a3 e5       	ldi	r26, 0x53	; 83
    2f00:	b0 e0       	ldi	r27, 0x00	; 0
    2f02:	e3 e5       	ldi	r30, 0x53	; 83
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	80 81       	ld	r24, Z
    2f08:	80 68       	ori	r24, 0x80	; 128
    2f0a:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE0);
    2f0c:	a9 e5       	ldi	r26, 0x59	; 89
    2f0e:	b0 e0       	ldi	r27, 0x00	; 0
    2f10:	e9 e5       	ldi	r30, 0x59	; 89
    2f12:	f0 e0       	ldi	r31, 0x00	; 0
    2f14:	80 81       	ld	r24, Z
    2f16:	82 60       	ori	r24, 0x02	; 2
    2f18:	8c 93       	st	X, r24
			OCR0 = Config_Ptr->timer_compare_MatchValue;
    2f1a:	ac e5       	ldi	r26, 0x5C	; 92
    2f1c:	b0 e0       	ldi	r27, 0x00	; 0
    2f1e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f20:	fa 81       	ldd	r31, Y+2	; 0x02
    2f22:	82 81       	ldd	r24, Z+2	; 0x02
    2f24:	93 81       	ldd	r25, Z+3	; 0x03
    2f26:	8c 93       	st	X, r24
    2f28:	f6 c0       	rjmp	.+492    	; 0x3116 <Timer_init+0x2c4>
		}
	}
	else if(Config_Ptr->timer_ID == Timer_1) {
    2f2a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f2c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f2e:	84 81       	ldd	r24, Z+4	; 0x04
    2f30:	81 30       	cpi	r24, 0x01	; 1
    2f32:	09 f0       	breq	.+2      	; 0x2f36 <Timer_init+0xe4>
    2f34:	8d c0       	rjmp	.+282    	; 0x3050 <Timer_init+0x1fe>

		TCNT1 = Config_Ptr->timer_InitialValue;
    2f36:	ac e4       	ldi	r26, 0x4C	; 76
    2f38:	b0 e0       	ldi	r27, 0x00	; 0
    2f3a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f3c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f3e:	80 81       	ld	r24, Z
    2f40:	91 81       	ldd	r25, Z+1	; 0x01
    2f42:	11 96       	adiw	r26, 0x01	; 1
    2f44:	9c 93       	st	X, r25
    2f46:	8e 93       	st	-X, r24
		TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->timer_clock);
    2f48:	ae e4       	ldi	r26, 0x4E	; 78
    2f4a:	b0 e0       	ldi	r27, 0x00	; 0
    2f4c:	ee e4       	ldi	r30, 0x4E	; 78
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	80 81       	ld	r24, Z
    2f52:	98 2f       	mov	r25, r24
    2f54:	98 7f       	andi	r25, 0xF8	; 248
    2f56:	e9 81       	ldd	r30, Y+1	; 0x01
    2f58:	fa 81       	ldd	r31, Y+2	; 0x02
    2f5a:	85 81       	ldd	r24, Z+5	; 0x05
    2f5c:	89 2b       	or	r24, r25
    2f5e:	8c 93       	st	X, r24
		if (Config_Ptr->timer_mode == Normal_Mode) {
    2f60:	e9 81       	ldd	r30, Y+1	; 0x01
    2f62:	fa 81       	ldd	r31, Y+2	; 0x02
    2f64:	86 81       	ldd	r24, Z+6	; 0x06
    2f66:	88 23       	and	r24, r24
    2f68:	91 f5       	brne	.+100    	; 0x2fce <Timer_init+0x17c>
			SET_BIT(TCCR1A,FOC1A);
    2f6a:	af e4       	ldi	r26, 0x4F	; 79
    2f6c:	b0 e0       	ldi	r27, 0x00	; 0
    2f6e:	ef e4       	ldi	r30, 0x4F	; 79
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	80 81       	ld	r24, Z
    2f74:	88 60       	ori	r24, 0x08	; 8
    2f76:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,FOC1B);
    2f78:	af e4       	ldi	r26, 0x4F	; 79
    2f7a:	b0 e0       	ldi	r27, 0x00	; 0
    2f7c:	ef e4       	ldi	r30, 0x4F	; 79
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	80 81       	ld	r24, Z
    2f82:	84 60       	ori	r24, 0x04	; 4
    2f84:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM10);
    2f86:	af e4       	ldi	r26, 0x4F	; 79
    2f88:	b0 e0       	ldi	r27, 0x00	; 0
    2f8a:	ef e4       	ldi	r30, 0x4F	; 79
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	80 81       	ld	r24, Z
    2f90:	8e 7f       	andi	r24, 0xFE	; 254
    2f92:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM11);
    2f94:	af e4       	ldi	r26, 0x4F	; 79
    2f96:	b0 e0       	ldi	r27, 0x00	; 0
    2f98:	ef e4       	ldi	r30, 0x4F	; 79
    2f9a:	f0 e0       	ldi	r31, 0x00	; 0
    2f9c:	80 81       	ld	r24, Z
    2f9e:	8d 7f       	andi	r24, 0xFD	; 253
    2fa0:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM12);
    2fa2:	ae e4       	ldi	r26, 0x4E	; 78
    2fa4:	b0 e0       	ldi	r27, 0x00	; 0
    2fa6:	ee e4       	ldi	r30, 0x4E	; 78
    2fa8:	f0 e0       	ldi	r31, 0x00	; 0
    2faa:	80 81       	ld	r24, Z
    2fac:	87 7f       	andi	r24, 0xF7	; 247
    2fae:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM13);
    2fb0:	ae e4       	ldi	r26, 0x4E	; 78
    2fb2:	b0 e0       	ldi	r27, 0x00	; 0
    2fb4:	ee e4       	ldi	r30, 0x4E	; 78
    2fb6:	f0 e0       	ldi	r31, 0x00	; 0
    2fb8:	80 81       	ld	r24, Z
    2fba:	8f 7e       	andi	r24, 0xEF	; 239
    2fbc:	8c 93       	st	X, r24
			SET_BIT(TIMSK, TOIE1);
    2fbe:	a9 e5       	ldi	r26, 0x59	; 89
    2fc0:	b0 e0       	ldi	r27, 0x00	; 0
    2fc2:	e9 e5       	ldi	r30, 0x59	; 89
    2fc4:	f0 e0       	ldi	r31, 0x00	; 0
    2fc6:	80 81       	ld	r24, Z
    2fc8:	84 60       	ori	r24, 0x04	; 4
    2fca:	8c 93       	st	X, r24
    2fcc:	a4 c0       	rjmp	.+328    	; 0x3116 <Timer_init+0x2c4>
		}
		else if (Config_Ptr->timer_mode == CTC_Mode) {
    2fce:	e9 81       	ldd	r30, Y+1	; 0x01
    2fd0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fd2:	86 81       	ldd	r24, Z+6	; 0x06
    2fd4:	81 30       	cpi	r24, 0x01	; 1
    2fd6:	09 f0       	breq	.+2      	; 0x2fda <Timer_init+0x188>
    2fd8:	9e c0       	rjmp	.+316    	; 0x3116 <Timer_init+0x2c4>
			SET_BIT(TCCR1A,FOC1A);
    2fda:	af e4       	ldi	r26, 0x4F	; 79
    2fdc:	b0 e0       	ldi	r27, 0x00	; 0
    2fde:	ef e4       	ldi	r30, 0x4F	; 79
    2fe0:	f0 e0       	ldi	r31, 0x00	; 0
    2fe2:	80 81       	ld	r24, Z
    2fe4:	88 60       	ori	r24, 0x08	; 8
    2fe6:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,FOC1B);
    2fe8:	af e4       	ldi	r26, 0x4F	; 79
    2fea:	b0 e0       	ldi	r27, 0x00	; 0
    2fec:	ef e4       	ldi	r30, 0x4F	; 79
    2fee:	f0 e0       	ldi	r31, 0x00	; 0
    2ff0:	80 81       	ld	r24, Z
    2ff2:	84 60       	ori	r24, 0x04	; 4
    2ff4:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM10);
    2ff6:	af e4       	ldi	r26, 0x4F	; 79
    2ff8:	b0 e0       	ldi	r27, 0x00	; 0
    2ffa:	ef e4       	ldi	r30, 0x4F	; 79
    2ffc:	f0 e0       	ldi	r31, 0x00	; 0
    2ffe:	80 81       	ld	r24, Z
    3000:	8e 7f       	andi	r24, 0xFE	; 254
    3002:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM11);
    3004:	af e4       	ldi	r26, 0x4F	; 79
    3006:	b0 e0       	ldi	r27, 0x00	; 0
    3008:	ef e4       	ldi	r30, 0x4F	; 79
    300a:	f0 e0       	ldi	r31, 0x00	; 0
    300c:	80 81       	ld	r24, Z
    300e:	8d 7f       	andi	r24, 0xFD	; 253
    3010:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,WGM12);
    3012:	ae e4       	ldi	r26, 0x4E	; 78
    3014:	b0 e0       	ldi	r27, 0x00	; 0
    3016:	ee e4       	ldi	r30, 0x4E	; 78
    3018:	f0 e0       	ldi	r31, 0x00	; 0
    301a:	80 81       	ld	r24, Z
    301c:	88 60       	ori	r24, 0x08	; 8
    301e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM13);
    3020:	ae e4       	ldi	r26, 0x4E	; 78
    3022:	b0 e0       	ldi	r27, 0x00	; 0
    3024:	ee e4       	ldi	r30, 0x4E	; 78
    3026:	f0 e0       	ldi	r31, 0x00	; 0
    3028:	80 81       	ld	r24, Z
    302a:	8f 7e       	andi	r24, 0xEF	; 239
    302c:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE1A);
    302e:	a9 e5       	ldi	r26, 0x59	; 89
    3030:	b0 e0       	ldi	r27, 0x00	; 0
    3032:	e9 e5       	ldi	r30, 0x59	; 89
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	80 81       	ld	r24, Z
    3038:	80 61       	ori	r24, 0x10	; 16
    303a:	8c 93       	st	X, r24
			OCR1A = Config_Ptr->timer_compare_MatchValue;
    303c:	aa e4       	ldi	r26, 0x4A	; 74
    303e:	b0 e0       	ldi	r27, 0x00	; 0
    3040:	e9 81       	ldd	r30, Y+1	; 0x01
    3042:	fa 81       	ldd	r31, Y+2	; 0x02
    3044:	82 81       	ldd	r24, Z+2	; 0x02
    3046:	93 81       	ldd	r25, Z+3	; 0x03
    3048:	11 96       	adiw	r26, 0x01	; 1
    304a:	9c 93       	st	X, r25
    304c:	8e 93       	st	-X, r24
    304e:	63 c0       	rjmp	.+198    	; 0x3116 <Timer_init+0x2c4>
		}
	}
	else if (Config_Ptr->timer_ID == Timer_2) {
    3050:	e9 81       	ldd	r30, Y+1	; 0x01
    3052:	fa 81       	ldd	r31, Y+2	; 0x02
    3054:	84 81       	ldd	r24, Z+4	; 0x04
    3056:	82 30       	cpi	r24, 0x02	; 2
    3058:	09 f0       	breq	.+2      	; 0x305c <Timer_init+0x20a>
    305a:	5d c0       	rjmp	.+186    	; 0x3116 <Timer_init+0x2c4>

		TCNT2 = Config_Ptr->timer_InitialValue;
    305c:	a4 e4       	ldi	r26, 0x44	; 68
    305e:	b0 e0       	ldi	r27, 0x00	; 0
    3060:	e9 81       	ldd	r30, Y+1	; 0x01
    3062:	fa 81       	ldd	r31, Y+2	; 0x02
    3064:	80 81       	ld	r24, Z
    3066:	91 81       	ldd	r25, Z+1	; 0x01
    3068:	8c 93       	st	X, r24
		TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->timer_clock);
    306a:	a5 e4       	ldi	r26, 0x45	; 69
    306c:	b0 e0       	ldi	r27, 0x00	; 0
    306e:	e5 e4       	ldi	r30, 0x45	; 69
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	80 81       	ld	r24, Z
    3074:	98 2f       	mov	r25, r24
    3076:	98 7f       	andi	r25, 0xF8	; 248
    3078:	e9 81       	ldd	r30, Y+1	; 0x01
    307a:	fa 81       	ldd	r31, Y+2	; 0x02
    307c:	85 81       	ldd	r24, Z+5	; 0x05
    307e:	89 2b       	or	r24, r25
    3080:	8c 93       	st	X, r24
		if (Config_Ptr->timer_mode == Normal_Mode) {
    3082:	e9 81       	ldd	r30, Y+1	; 0x01
    3084:	fa 81       	ldd	r31, Y+2	; 0x02
    3086:	86 81       	ldd	r24, Z+6	; 0x06
    3088:	88 23       	and	r24, r24
    308a:	e9 f4       	brne	.+58     	; 0x30c6 <Timer_init+0x274>
			CLEAR_BIT(TCCR2,WGM20);
    308c:	a5 e4       	ldi	r26, 0x45	; 69
    308e:	b0 e0       	ldi	r27, 0x00	; 0
    3090:	e5 e4       	ldi	r30, 0x45	; 69
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	80 81       	ld	r24, Z
    3096:	8f 7b       	andi	r24, 0xBF	; 191
    3098:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,WGM21);
    309a:	a5 e4       	ldi	r26, 0x45	; 69
    309c:	b0 e0       	ldi	r27, 0x00	; 0
    309e:	e5 e4       	ldi	r30, 0x45	; 69
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	80 81       	ld	r24, Z
    30a4:	87 7f       	andi	r24, 0xF7	; 247
    30a6:	8c 93       	st	X, r24
			SET_BIT(TCCR2,FOC2);
    30a8:	a5 e4       	ldi	r26, 0x45	; 69
    30aa:	b0 e0       	ldi	r27, 0x00	; 0
    30ac:	e5 e4       	ldi	r30, 0x45	; 69
    30ae:	f0 e0       	ldi	r31, 0x00	; 0
    30b0:	80 81       	ld	r24, Z
    30b2:	80 68       	ori	r24, 0x80	; 128
    30b4:	8c 93       	st	X, r24
			SET_BIT(TIMSK, TOIE2);
    30b6:	a9 e5       	ldi	r26, 0x59	; 89
    30b8:	b0 e0       	ldi	r27, 0x00	; 0
    30ba:	e9 e5       	ldi	r30, 0x59	; 89
    30bc:	f0 e0       	ldi	r31, 0x00	; 0
    30be:	80 81       	ld	r24, Z
    30c0:	80 64       	ori	r24, 0x40	; 64
    30c2:	8c 93       	st	X, r24
    30c4:	28 c0       	rjmp	.+80     	; 0x3116 <Timer_init+0x2c4>
		}
		else if (Config_Ptr->timer_mode == CTC_Mode) {
    30c6:	e9 81       	ldd	r30, Y+1	; 0x01
    30c8:	fa 81       	ldd	r31, Y+2	; 0x02
    30ca:	86 81       	ldd	r24, Z+6	; 0x06
    30cc:	81 30       	cpi	r24, 0x01	; 1
    30ce:	19 f5       	brne	.+70     	; 0x3116 <Timer_init+0x2c4>
			CLEAR_BIT(TCCR2, WGM20);
    30d0:	a5 e4       	ldi	r26, 0x45	; 69
    30d2:	b0 e0       	ldi	r27, 0x00	; 0
    30d4:	e5 e4       	ldi	r30, 0x45	; 69
    30d6:	f0 e0       	ldi	r31, 0x00	; 0
    30d8:	80 81       	ld	r24, Z
    30da:	8f 7b       	andi	r24, 0xBF	; 191
    30dc:	8c 93       	st	X, r24
			SET_BIT(TCCR2, WGM21);
    30de:	a5 e4       	ldi	r26, 0x45	; 69
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	e5 e4       	ldi	r30, 0x45	; 69
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	80 81       	ld	r24, Z
    30e8:	88 60       	ori	r24, 0x08	; 8
    30ea:	8c 93       	st	X, r24
			SET_BIT(TCCR2, FOC2);
    30ec:	a5 e4       	ldi	r26, 0x45	; 69
    30ee:	b0 e0       	ldi	r27, 0x00	; 0
    30f0:	e5 e4       	ldi	r30, 0x45	; 69
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	80 81       	ld	r24, Z
    30f6:	80 68       	ori	r24, 0x80	; 128
    30f8:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE2);
    30fa:	a9 e5       	ldi	r26, 0x59	; 89
    30fc:	b0 e0       	ldi	r27, 0x00	; 0
    30fe:	e9 e5       	ldi	r30, 0x59	; 89
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	80 81       	ld	r24, Z
    3104:	80 68       	ori	r24, 0x80	; 128
    3106:	8c 93       	st	X, r24
			OCR2 = Config_Ptr->timer_compare_MatchValue;
    3108:	a3 e4       	ldi	r26, 0x43	; 67
    310a:	b0 e0       	ldi	r27, 0x00	; 0
    310c:	e9 81       	ldd	r30, Y+1	; 0x01
    310e:	fa 81       	ldd	r31, Y+2	; 0x02
    3110:	82 81       	ldd	r24, Z+2	; 0x02
    3112:	93 81       	ldd	r25, Z+3	; 0x03
    3114:	8c 93       	st	X, r24
		}
	}
}
    3116:	0f 90       	pop	r0
    3118:	0f 90       	pop	r0
    311a:	cf 91       	pop	r28
    311c:	df 91       	pop	r29
    311e:	08 95       	ret

00003120 <Timer_deInit>:

void Timer_deInit(Timer_ID_Type timer_type) {
    3120:	df 93       	push	r29
    3122:	cf 93       	push	r28
    3124:	0f 92       	push	r0
    3126:	cd b7       	in	r28, 0x3d	; 61
    3128:	de b7       	in	r29, 0x3e	; 62
    312a:	89 83       	std	Y+1, r24	; 0x01

	g_callBackPtr = NULL_PTR;
    312c:	10 92 a4 01 	sts	0x01A4, r1
    3130:	10 92 a3 01 	sts	0x01A3, r1
	if (timer_type == Timer_0) {
    3134:	89 81       	ldd	r24, Y+1	; 0x01
    3136:	88 23       	and	r24, r24
    3138:	39 f4       	brne	.+14     	; 0x3148 <Timer_deInit+0x28>
		TCNT0 = 0;
    313a:	e2 e5       	ldi	r30, 0x52	; 82
    313c:	f0 e0       	ldi	r31, 0x00	; 0
    313e:	10 82       	st	Z, r1
		OCR0 = 0;
    3140:	ec e5       	ldi	r30, 0x5C	; 92
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	10 82       	st	Z, r1
    3146:	14 c0       	rjmp	.+40     	; 0x3170 <Timer_deInit+0x50>
	} else if (timer_type == Timer_1) {
    3148:	89 81       	ldd	r24, Y+1	; 0x01
    314a:	81 30       	cpi	r24, 0x01	; 1
    314c:	41 f4       	brne	.+16     	; 0x315e <Timer_deInit+0x3e>
		TCCR1B = 0;
    314e:	ee e4       	ldi	r30, 0x4E	; 78
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	10 82       	st	Z, r1
		TCNT1 = 0;
    3154:	ec e4       	ldi	r30, 0x4C	; 76
    3156:	f0 e0       	ldi	r31, 0x00	; 0
    3158:	11 82       	std	Z+1, r1	; 0x01
    315a:	10 82       	st	Z, r1
    315c:	09 c0       	rjmp	.+18     	; 0x3170 <Timer_deInit+0x50>
	} else if (timer_type == Timer_2) {
    315e:	89 81       	ldd	r24, Y+1	; 0x01
    3160:	82 30       	cpi	r24, 0x02	; 2
    3162:	31 f4       	brne	.+12     	; 0x3170 <Timer_deInit+0x50>
		TCCR2 = 0;
    3164:	e5 e4       	ldi	r30, 0x45	; 69
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	10 82       	st	Z, r1
		TCNT2 = 0;
    316a:	e4 e4       	ldi	r30, 0x44	; 68
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	10 82       	st	Z, r1
	}
}
    3170:	0f 90       	pop	r0
    3172:	cf 91       	pop	r28
    3174:	df 91       	pop	r29
    3176:	08 95       	ret

00003178 <Timer_setCallBack>:

void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID) {
    3178:	df 93       	push	r29
    317a:	cf 93       	push	r28
    317c:	00 d0       	rcall	.+0      	; 0x317e <Timer_setCallBack+0x6>
    317e:	0f 92       	push	r0
    3180:	cd b7       	in	r28, 0x3d	; 61
    3182:	de b7       	in	r29, 0x3e	; 62
    3184:	9a 83       	std	Y+2, r25	; 0x02
    3186:	89 83       	std	Y+1, r24	; 0x01
    3188:	6b 83       	std	Y+3, r22	; 0x03

	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    318a:	89 81       	ldd	r24, Y+1	; 0x01
    318c:	9a 81       	ldd	r25, Y+2	; 0x02
    318e:	90 93 a4 01 	sts	0x01A4, r25
    3192:	80 93 a3 01 	sts	0x01A3, r24
}
    3196:	0f 90       	pop	r0
    3198:	0f 90       	pop	r0
    319a:	0f 90       	pop	r0
    319c:	cf 91       	pop	r28
    319e:	df 91       	pop	r29
    31a0:	08 95       	ret

000031a2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    31a2:	df 93       	push	r29
    31a4:	cf 93       	push	r28
    31a6:	00 d0       	rcall	.+0      	; 0x31a8 <GPIO_setupPinDirection+0x6>
    31a8:	00 d0       	rcall	.+0      	; 0x31aa <GPIO_setupPinDirection+0x8>
    31aa:	0f 92       	push	r0
    31ac:	cd b7       	in	r28, 0x3d	; 61
    31ae:	de b7       	in	r29, 0x3e	; 62
    31b0:	89 83       	std	Y+1, r24	; 0x01
    31b2:	6a 83       	std	Y+2, r22	; 0x02
    31b4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    31b6:	8a 81       	ldd	r24, Y+2	; 0x02
    31b8:	88 30       	cpi	r24, 0x08	; 8
    31ba:	08 f0       	brcs	.+2      	; 0x31be <GPIO_setupPinDirection+0x1c>
    31bc:	d5 c0       	rjmp	.+426    	; 0x3368 <GPIO_setupPinDirection+0x1c6>
    31be:	89 81       	ldd	r24, Y+1	; 0x01
    31c0:	84 30       	cpi	r24, 0x04	; 4
    31c2:	08 f0       	brcs	.+2      	; 0x31c6 <GPIO_setupPinDirection+0x24>
    31c4:	d1 c0       	rjmp	.+418    	; 0x3368 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    31c6:	89 81       	ldd	r24, Y+1	; 0x01
    31c8:	28 2f       	mov	r18, r24
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	3d 83       	std	Y+5, r19	; 0x05
    31ce:	2c 83       	std	Y+4, r18	; 0x04
    31d0:	8c 81       	ldd	r24, Y+4	; 0x04
    31d2:	9d 81       	ldd	r25, Y+5	; 0x05
    31d4:	81 30       	cpi	r24, 0x01	; 1
    31d6:	91 05       	cpc	r25, r1
    31d8:	09 f4       	brne	.+2      	; 0x31dc <GPIO_setupPinDirection+0x3a>
    31da:	43 c0       	rjmp	.+134    	; 0x3262 <GPIO_setupPinDirection+0xc0>
    31dc:	2c 81       	ldd	r18, Y+4	; 0x04
    31de:	3d 81       	ldd	r19, Y+5	; 0x05
    31e0:	22 30       	cpi	r18, 0x02	; 2
    31e2:	31 05       	cpc	r19, r1
    31e4:	2c f4       	brge	.+10     	; 0x31f0 <GPIO_setupPinDirection+0x4e>
    31e6:	8c 81       	ldd	r24, Y+4	; 0x04
    31e8:	9d 81       	ldd	r25, Y+5	; 0x05
    31ea:	00 97       	sbiw	r24, 0x00	; 0
    31ec:	71 f0       	breq	.+28     	; 0x320a <GPIO_setupPinDirection+0x68>
    31ee:	bc c0       	rjmp	.+376    	; 0x3368 <GPIO_setupPinDirection+0x1c6>
    31f0:	2c 81       	ldd	r18, Y+4	; 0x04
    31f2:	3d 81       	ldd	r19, Y+5	; 0x05
    31f4:	22 30       	cpi	r18, 0x02	; 2
    31f6:	31 05       	cpc	r19, r1
    31f8:	09 f4       	brne	.+2      	; 0x31fc <GPIO_setupPinDirection+0x5a>
    31fa:	5f c0       	rjmp	.+190    	; 0x32ba <GPIO_setupPinDirection+0x118>
    31fc:	8c 81       	ldd	r24, Y+4	; 0x04
    31fe:	9d 81       	ldd	r25, Y+5	; 0x05
    3200:	83 30       	cpi	r24, 0x03	; 3
    3202:	91 05       	cpc	r25, r1
    3204:	09 f4       	brne	.+2      	; 0x3208 <GPIO_setupPinDirection+0x66>
    3206:	85 c0       	rjmp	.+266    	; 0x3312 <GPIO_setupPinDirection+0x170>
    3208:	af c0       	rjmp	.+350    	; 0x3368 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    320a:	8b 81       	ldd	r24, Y+3	; 0x03
    320c:	81 30       	cpi	r24, 0x01	; 1
    320e:	a1 f4       	brne	.+40     	; 0x3238 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    3210:	aa e3       	ldi	r26, 0x3A	; 58
    3212:	b0 e0       	ldi	r27, 0x00	; 0
    3214:	ea e3       	ldi	r30, 0x3A	; 58
    3216:	f0 e0       	ldi	r31, 0x00	; 0
    3218:	80 81       	ld	r24, Z
    321a:	48 2f       	mov	r20, r24
    321c:	8a 81       	ldd	r24, Y+2	; 0x02
    321e:	28 2f       	mov	r18, r24
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	81 e0       	ldi	r24, 0x01	; 1
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	02 2e       	mov	r0, r18
    3228:	02 c0       	rjmp	.+4      	; 0x322e <GPIO_setupPinDirection+0x8c>
    322a:	88 0f       	add	r24, r24
    322c:	99 1f       	adc	r25, r25
    322e:	0a 94       	dec	r0
    3230:	e2 f7       	brpl	.-8      	; 0x322a <GPIO_setupPinDirection+0x88>
    3232:	84 2b       	or	r24, r20
    3234:	8c 93       	st	X, r24
    3236:	98 c0       	rjmp	.+304    	; 0x3368 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    3238:	aa e3       	ldi	r26, 0x3A	; 58
    323a:	b0 e0       	ldi	r27, 0x00	; 0
    323c:	ea e3       	ldi	r30, 0x3A	; 58
    323e:	f0 e0       	ldi	r31, 0x00	; 0
    3240:	80 81       	ld	r24, Z
    3242:	48 2f       	mov	r20, r24
    3244:	8a 81       	ldd	r24, Y+2	; 0x02
    3246:	28 2f       	mov	r18, r24
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	02 2e       	mov	r0, r18
    3250:	02 c0       	rjmp	.+4      	; 0x3256 <GPIO_setupPinDirection+0xb4>
    3252:	88 0f       	add	r24, r24
    3254:	99 1f       	adc	r25, r25
    3256:	0a 94       	dec	r0
    3258:	e2 f7       	brpl	.-8      	; 0x3252 <GPIO_setupPinDirection+0xb0>
    325a:	80 95       	com	r24
    325c:	84 23       	and	r24, r20
    325e:	8c 93       	st	X, r24
    3260:	83 c0       	rjmp	.+262    	; 0x3368 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    3262:	8b 81       	ldd	r24, Y+3	; 0x03
    3264:	81 30       	cpi	r24, 0x01	; 1
    3266:	a1 f4       	brne	.+40     	; 0x3290 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    3268:	a7 e3       	ldi	r26, 0x37	; 55
    326a:	b0 e0       	ldi	r27, 0x00	; 0
    326c:	e7 e3       	ldi	r30, 0x37	; 55
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	80 81       	ld	r24, Z
    3272:	48 2f       	mov	r20, r24
    3274:	8a 81       	ldd	r24, Y+2	; 0x02
    3276:	28 2f       	mov	r18, r24
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	81 e0       	ldi	r24, 0x01	; 1
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	02 2e       	mov	r0, r18
    3280:	02 c0       	rjmp	.+4      	; 0x3286 <GPIO_setupPinDirection+0xe4>
    3282:	88 0f       	add	r24, r24
    3284:	99 1f       	adc	r25, r25
    3286:	0a 94       	dec	r0
    3288:	e2 f7       	brpl	.-8      	; 0x3282 <GPIO_setupPinDirection+0xe0>
    328a:	84 2b       	or	r24, r20
    328c:	8c 93       	st	X, r24
    328e:	6c c0       	rjmp	.+216    	; 0x3368 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    3290:	a7 e3       	ldi	r26, 0x37	; 55
    3292:	b0 e0       	ldi	r27, 0x00	; 0
    3294:	e7 e3       	ldi	r30, 0x37	; 55
    3296:	f0 e0       	ldi	r31, 0x00	; 0
    3298:	80 81       	ld	r24, Z
    329a:	48 2f       	mov	r20, r24
    329c:	8a 81       	ldd	r24, Y+2	; 0x02
    329e:	28 2f       	mov	r18, r24
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	02 2e       	mov	r0, r18
    32a8:	02 c0       	rjmp	.+4      	; 0x32ae <GPIO_setupPinDirection+0x10c>
    32aa:	88 0f       	add	r24, r24
    32ac:	99 1f       	adc	r25, r25
    32ae:	0a 94       	dec	r0
    32b0:	e2 f7       	brpl	.-8      	; 0x32aa <GPIO_setupPinDirection+0x108>
    32b2:	80 95       	com	r24
    32b4:	84 23       	and	r24, r20
    32b6:	8c 93       	st	X, r24
    32b8:	57 c0       	rjmp	.+174    	; 0x3368 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    32ba:	8b 81       	ldd	r24, Y+3	; 0x03
    32bc:	81 30       	cpi	r24, 0x01	; 1
    32be:	a1 f4       	brne	.+40     	; 0x32e8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    32c0:	a4 e3       	ldi	r26, 0x34	; 52
    32c2:	b0 e0       	ldi	r27, 0x00	; 0
    32c4:	e4 e3       	ldi	r30, 0x34	; 52
    32c6:	f0 e0       	ldi	r31, 0x00	; 0
    32c8:	80 81       	ld	r24, Z
    32ca:	48 2f       	mov	r20, r24
    32cc:	8a 81       	ldd	r24, Y+2	; 0x02
    32ce:	28 2f       	mov	r18, r24
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	02 2e       	mov	r0, r18
    32d8:	02 c0       	rjmp	.+4      	; 0x32de <GPIO_setupPinDirection+0x13c>
    32da:	88 0f       	add	r24, r24
    32dc:	99 1f       	adc	r25, r25
    32de:	0a 94       	dec	r0
    32e0:	e2 f7       	brpl	.-8      	; 0x32da <GPIO_setupPinDirection+0x138>
    32e2:	84 2b       	or	r24, r20
    32e4:	8c 93       	st	X, r24
    32e6:	40 c0       	rjmp	.+128    	; 0x3368 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    32e8:	a4 e3       	ldi	r26, 0x34	; 52
    32ea:	b0 e0       	ldi	r27, 0x00	; 0
    32ec:	e4 e3       	ldi	r30, 0x34	; 52
    32ee:	f0 e0       	ldi	r31, 0x00	; 0
    32f0:	80 81       	ld	r24, Z
    32f2:	48 2f       	mov	r20, r24
    32f4:	8a 81       	ldd	r24, Y+2	; 0x02
    32f6:	28 2f       	mov	r18, r24
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	02 2e       	mov	r0, r18
    3300:	02 c0       	rjmp	.+4      	; 0x3306 <GPIO_setupPinDirection+0x164>
    3302:	88 0f       	add	r24, r24
    3304:	99 1f       	adc	r25, r25
    3306:	0a 94       	dec	r0
    3308:	e2 f7       	brpl	.-8      	; 0x3302 <GPIO_setupPinDirection+0x160>
    330a:	80 95       	com	r24
    330c:	84 23       	and	r24, r20
    330e:	8c 93       	st	X, r24
    3310:	2b c0       	rjmp	.+86     	; 0x3368 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    3312:	8b 81       	ldd	r24, Y+3	; 0x03
    3314:	81 30       	cpi	r24, 0x01	; 1
    3316:	a1 f4       	brne	.+40     	; 0x3340 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    3318:	a1 e3       	ldi	r26, 0x31	; 49
    331a:	b0 e0       	ldi	r27, 0x00	; 0
    331c:	e1 e3       	ldi	r30, 0x31	; 49
    331e:	f0 e0       	ldi	r31, 0x00	; 0
    3320:	80 81       	ld	r24, Z
    3322:	48 2f       	mov	r20, r24
    3324:	8a 81       	ldd	r24, Y+2	; 0x02
    3326:	28 2f       	mov	r18, r24
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	81 e0       	ldi	r24, 0x01	; 1
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	02 2e       	mov	r0, r18
    3330:	02 c0       	rjmp	.+4      	; 0x3336 <GPIO_setupPinDirection+0x194>
    3332:	88 0f       	add	r24, r24
    3334:	99 1f       	adc	r25, r25
    3336:	0a 94       	dec	r0
    3338:	e2 f7       	brpl	.-8      	; 0x3332 <GPIO_setupPinDirection+0x190>
    333a:	84 2b       	or	r24, r20
    333c:	8c 93       	st	X, r24
    333e:	14 c0       	rjmp	.+40     	; 0x3368 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    3340:	a1 e3       	ldi	r26, 0x31	; 49
    3342:	b0 e0       	ldi	r27, 0x00	; 0
    3344:	e1 e3       	ldi	r30, 0x31	; 49
    3346:	f0 e0       	ldi	r31, 0x00	; 0
    3348:	80 81       	ld	r24, Z
    334a:	48 2f       	mov	r20, r24
    334c:	8a 81       	ldd	r24, Y+2	; 0x02
    334e:	28 2f       	mov	r18, r24
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	02 2e       	mov	r0, r18
    3358:	02 c0       	rjmp	.+4      	; 0x335e <GPIO_setupPinDirection+0x1bc>
    335a:	88 0f       	add	r24, r24
    335c:	99 1f       	adc	r25, r25
    335e:	0a 94       	dec	r0
    3360:	e2 f7       	brpl	.-8      	; 0x335a <GPIO_setupPinDirection+0x1b8>
    3362:	80 95       	com	r24
    3364:	84 23       	and	r24, r20
    3366:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    3368:	0f 90       	pop	r0
    336a:	0f 90       	pop	r0
    336c:	0f 90       	pop	r0
    336e:	0f 90       	pop	r0
    3370:	0f 90       	pop	r0
    3372:	cf 91       	pop	r28
    3374:	df 91       	pop	r29
    3376:	08 95       	ret

00003378 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    3378:	df 93       	push	r29
    337a:	cf 93       	push	r28
    337c:	00 d0       	rcall	.+0      	; 0x337e <GPIO_writePin+0x6>
    337e:	00 d0       	rcall	.+0      	; 0x3380 <GPIO_writePin+0x8>
    3380:	0f 92       	push	r0
    3382:	cd b7       	in	r28, 0x3d	; 61
    3384:	de b7       	in	r29, 0x3e	; 62
    3386:	89 83       	std	Y+1, r24	; 0x01
    3388:	6a 83       	std	Y+2, r22	; 0x02
    338a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    338c:	8a 81       	ldd	r24, Y+2	; 0x02
    338e:	88 30       	cpi	r24, 0x08	; 8
    3390:	08 f0       	brcs	.+2      	; 0x3394 <GPIO_writePin+0x1c>
    3392:	d5 c0       	rjmp	.+426    	; 0x353e <GPIO_writePin+0x1c6>
    3394:	89 81       	ldd	r24, Y+1	; 0x01
    3396:	84 30       	cpi	r24, 0x04	; 4
    3398:	08 f0       	brcs	.+2      	; 0x339c <GPIO_writePin+0x24>
    339a:	d1 c0       	rjmp	.+418    	; 0x353e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    339c:	89 81       	ldd	r24, Y+1	; 0x01
    339e:	28 2f       	mov	r18, r24
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	3d 83       	std	Y+5, r19	; 0x05
    33a4:	2c 83       	std	Y+4, r18	; 0x04
    33a6:	8c 81       	ldd	r24, Y+4	; 0x04
    33a8:	9d 81       	ldd	r25, Y+5	; 0x05
    33aa:	81 30       	cpi	r24, 0x01	; 1
    33ac:	91 05       	cpc	r25, r1
    33ae:	09 f4       	brne	.+2      	; 0x33b2 <GPIO_writePin+0x3a>
    33b0:	43 c0       	rjmp	.+134    	; 0x3438 <GPIO_writePin+0xc0>
    33b2:	2c 81       	ldd	r18, Y+4	; 0x04
    33b4:	3d 81       	ldd	r19, Y+5	; 0x05
    33b6:	22 30       	cpi	r18, 0x02	; 2
    33b8:	31 05       	cpc	r19, r1
    33ba:	2c f4       	brge	.+10     	; 0x33c6 <GPIO_writePin+0x4e>
    33bc:	8c 81       	ldd	r24, Y+4	; 0x04
    33be:	9d 81       	ldd	r25, Y+5	; 0x05
    33c0:	00 97       	sbiw	r24, 0x00	; 0
    33c2:	71 f0       	breq	.+28     	; 0x33e0 <GPIO_writePin+0x68>
    33c4:	bc c0       	rjmp	.+376    	; 0x353e <GPIO_writePin+0x1c6>
    33c6:	2c 81       	ldd	r18, Y+4	; 0x04
    33c8:	3d 81       	ldd	r19, Y+5	; 0x05
    33ca:	22 30       	cpi	r18, 0x02	; 2
    33cc:	31 05       	cpc	r19, r1
    33ce:	09 f4       	brne	.+2      	; 0x33d2 <GPIO_writePin+0x5a>
    33d0:	5f c0       	rjmp	.+190    	; 0x3490 <GPIO_writePin+0x118>
    33d2:	8c 81       	ldd	r24, Y+4	; 0x04
    33d4:	9d 81       	ldd	r25, Y+5	; 0x05
    33d6:	83 30       	cpi	r24, 0x03	; 3
    33d8:	91 05       	cpc	r25, r1
    33da:	09 f4       	brne	.+2      	; 0x33de <GPIO_writePin+0x66>
    33dc:	85 c0       	rjmp	.+266    	; 0x34e8 <GPIO_writePin+0x170>
    33de:	af c0       	rjmp	.+350    	; 0x353e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    33e0:	8b 81       	ldd	r24, Y+3	; 0x03
    33e2:	81 30       	cpi	r24, 0x01	; 1
    33e4:	a1 f4       	brne	.+40     	; 0x340e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    33e6:	ab e3       	ldi	r26, 0x3B	; 59
    33e8:	b0 e0       	ldi	r27, 0x00	; 0
    33ea:	eb e3       	ldi	r30, 0x3B	; 59
    33ec:	f0 e0       	ldi	r31, 0x00	; 0
    33ee:	80 81       	ld	r24, Z
    33f0:	48 2f       	mov	r20, r24
    33f2:	8a 81       	ldd	r24, Y+2	; 0x02
    33f4:	28 2f       	mov	r18, r24
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	81 e0       	ldi	r24, 0x01	; 1
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	02 2e       	mov	r0, r18
    33fe:	02 c0       	rjmp	.+4      	; 0x3404 <GPIO_writePin+0x8c>
    3400:	88 0f       	add	r24, r24
    3402:	99 1f       	adc	r25, r25
    3404:	0a 94       	dec	r0
    3406:	e2 f7       	brpl	.-8      	; 0x3400 <GPIO_writePin+0x88>
    3408:	84 2b       	or	r24, r20
    340a:	8c 93       	st	X, r24
    340c:	98 c0       	rjmp	.+304    	; 0x353e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    340e:	ab e3       	ldi	r26, 0x3B	; 59
    3410:	b0 e0       	ldi	r27, 0x00	; 0
    3412:	eb e3       	ldi	r30, 0x3B	; 59
    3414:	f0 e0       	ldi	r31, 0x00	; 0
    3416:	80 81       	ld	r24, Z
    3418:	48 2f       	mov	r20, r24
    341a:	8a 81       	ldd	r24, Y+2	; 0x02
    341c:	28 2f       	mov	r18, r24
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	81 e0       	ldi	r24, 0x01	; 1
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	02 2e       	mov	r0, r18
    3426:	02 c0       	rjmp	.+4      	; 0x342c <GPIO_writePin+0xb4>
    3428:	88 0f       	add	r24, r24
    342a:	99 1f       	adc	r25, r25
    342c:	0a 94       	dec	r0
    342e:	e2 f7       	brpl	.-8      	; 0x3428 <GPIO_writePin+0xb0>
    3430:	80 95       	com	r24
    3432:	84 23       	and	r24, r20
    3434:	8c 93       	st	X, r24
    3436:	83 c0       	rjmp	.+262    	; 0x353e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    3438:	8b 81       	ldd	r24, Y+3	; 0x03
    343a:	81 30       	cpi	r24, 0x01	; 1
    343c:	a1 f4       	brne	.+40     	; 0x3466 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    343e:	a8 e3       	ldi	r26, 0x38	; 56
    3440:	b0 e0       	ldi	r27, 0x00	; 0
    3442:	e8 e3       	ldi	r30, 0x38	; 56
    3444:	f0 e0       	ldi	r31, 0x00	; 0
    3446:	80 81       	ld	r24, Z
    3448:	48 2f       	mov	r20, r24
    344a:	8a 81       	ldd	r24, Y+2	; 0x02
    344c:	28 2f       	mov	r18, r24
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	02 2e       	mov	r0, r18
    3456:	02 c0       	rjmp	.+4      	; 0x345c <GPIO_writePin+0xe4>
    3458:	88 0f       	add	r24, r24
    345a:	99 1f       	adc	r25, r25
    345c:	0a 94       	dec	r0
    345e:	e2 f7       	brpl	.-8      	; 0x3458 <GPIO_writePin+0xe0>
    3460:	84 2b       	or	r24, r20
    3462:	8c 93       	st	X, r24
    3464:	6c c0       	rjmp	.+216    	; 0x353e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    3466:	a8 e3       	ldi	r26, 0x38	; 56
    3468:	b0 e0       	ldi	r27, 0x00	; 0
    346a:	e8 e3       	ldi	r30, 0x38	; 56
    346c:	f0 e0       	ldi	r31, 0x00	; 0
    346e:	80 81       	ld	r24, Z
    3470:	48 2f       	mov	r20, r24
    3472:	8a 81       	ldd	r24, Y+2	; 0x02
    3474:	28 2f       	mov	r18, r24
    3476:	30 e0       	ldi	r19, 0x00	; 0
    3478:	81 e0       	ldi	r24, 0x01	; 1
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	02 2e       	mov	r0, r18
    347e:	02 c0       	rjmp	.+4      	; 0x3484 <GPIO_writePin+0x10c>
    3480:	88 0f       	add	r24, r24
    3482:	99 1f       	adc	r25, r25
    3484:	0a 94       	dec	r0
    3486:	e2 f7       	brpl	.-8      	; 0x3480 <GPIO_writePin+0x108>
    3488:	80 95       	com	r24
    348a:	84 23       	and	r24, r20
    348c:	8c 93       	st	X, r24
    348e:	57 c0       	rjmp	.+174    	; 0x353e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    3490:	8b 81       	ldd	r24, Y+3	; 0x03
    3492:	81 30       	cpi	r24, 0x01	; 1
    3494:	a1 f4       	brne	.+40     	; 0x34be <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    3496:	a5 e3       	ldi	r26, 0x35	; 53
    3498:	b0 e0       	ldi	r27, 0x00	; 0
    349a:	e5 e3       	ldi	r30, 0x35	; 53
    349c:	f0 e0       	ldi	r31, 0x00	; 0
    349e:	80 81       	ld	r24, Z
    34a0:	48 2f       	mov	r20, r24
    34a2:	8a 81       	ldd	r24, Y+2	; 0x02
    34a4:	28 2f       	mov	r18, r24
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	81 e0       	ldi	r24, 0x01	; 1
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	02 2e       	mov	r0, r18
    34ae:	02 c0       	rjmp	.+4      	; 0x34b4 <GPIO_writePin+0x13c>
    34b0:	88 0f       	add	r24, r24
    34b2:	99 1f       	adc	r25, r25
    34b4:	0a 94       	dec	r0
    34b6:	e2 f7       	brpl	.-8      	; 0x34b0 <GPIO_writePin+0x138>
    34b8:	84 2b       	or	r24, r20
    34ba:	8c 93       	st	X, r24
    34bc:	40 c0       	rjmp	.+128    	; 0x353e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    34be:	a5 e3       	ldi	r26, 0x35	; 53
    34c0:	b0 e0       	ldi	r27, 0x00	; 0
    34c2:	e5 e3       	ldi	r30, 0x35	; 53
    34c4:	f0 e0       	ldi	r31, 0x00	; 0
    34c6:	80 81       	ld	r24, Z
    34c8:	48 2f       	mov	r20, r24
    34ca:	8a 81       	ldd	r24, Y+2	; 0x02
    34cc:	28 2f       	mov	r18, r24
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	81 e0       	ldi	r24, 0x01	; 1
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	02 2e       	mov	r0, r18
    34d6:	02 c0       	rjmp	.+4      	; 0x34dc <GPIO_writePin+0x164>
    34d8:	88 0f       	add	r24, r24
    34da:	99 1f       	adc	r25, r25
    34dc:	0a 94       	dec	r0
    34de:	e2 f7       	brpl	.-8      	; 0x34d8 <GPIO_writePin+0x160>
    34e0:	80 95       	com	r24
    34e2:	84 23       	and	r24, r20
    34e4:	8c 93       	st	X, r24
    34e6:	2b c0       	rjmp	.+86     	; 0x353e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    34e8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ea:	81 30       	cpi	r24, 0x01	; 1
    34ec:	a1 f4       	brne	.+40     	; 0x3516 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    34ee:	a2 e3       	ldi	r26, 0x32	; 50
    34f0:	b0 e0       	ldi	r27, 0x00	; 0
    34f2:	e2 e3       	ldi	r30, 0x32	; 50
    34f4:	f0 e0       	ldi	r31, 0x00	; 0
    34f6:	80 81       	ld	r24, Z
    34f8:	48 2f       	mov	r20, r24
    34fa:	8a 81       	ldd	r24, Y+2	; 0x02
    34fc:	28 2f       	mov	r18, r24
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	02 2e       	mov	r0, r18
    3506:	02 c0       	rjmp	.+4      	; 0x350c <GPIO_writePin+0x194>
    3508:	88 0f       	add	r24, r24
    350a:	99 1f       	adc	r25, r25
    350c:	0a 94       	dec	r0
    350e:	e2 f7       	brpl	.-8      	; 0x3508 <GPIO_writePin+0x190>
    3510:	84 2b       	or	r24, r20
    3512:	8c 93       	st	X, r24
    3514:	14 c0       	rjmp	.+40     	; 0x353e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    3516:	a2 e3       	ldi	r26, 0x32	; 50
    3518:	b0 e0       	ldi	r27, 0x00	; 0
    351a:	e2 e3       	ldi	r30, 0x32	; 50
    351c:	f0 e0       	ldi	r31, 0x00	; 0
    351e:	80 81       	ld	r24, Z
    3520:	48 2f       	mov	r20, r24
    3522:	8a 81       	ldd	r24, Y+2	; 0x02
    3524:	28 2f       	mov	r18, r24
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	02 2e       	mov	r0, r18
    352e:	02 c0       	rjmp	.+4      	; 0x3534 <GPIO_writePin+0x1bc>
    3530:	88 0f       	add	r24, r24
    3532:	99 1f       	adc	r25, r25
    3534:	0a 94       	dec	r0
    3536:	e2 f7       	brpl	.-8      	; 0x3530 <GPIO_writePin+0x1b8>
    3538:	80 95       	com	r24
    353a:	84 23       	and	r24, r20
    353c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    353e:	0f 90       	pop	r0
    3540:	0f 90       	pop	r0
    3542:	0f 90       	pop	r0
    3544:	0f 90       	pop	r0
    3546:	0f 90       	pop	r0
    3548:	cf 91       	pop	r28
    354a:	df 91       	pop	r29
    354c:	08 95       	ret

0000354e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    354e:	df 93       	push	r29
    3550:	cf 93       	push	r28
    3552:	00 d0       	rcall	.+0      	; 0x3554 <GPIO_readPin+0x6>
    3554:	00 d0       	rcall	.+0      	; 0x3556 <GPIO_readPin+0x8>
    3556:	0f 92       	push	r0
    3558:	cd b7       	in	r28, 0x3d	; 61
    355a:	de b7       	in	r29, 0x3e	; 62
    355c:	8a 83       	std	Y+2, r24	; 0x02
    355e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    3560:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    3562:	8b 81       	ldd	r24, Y+3	; 0x03
    3564:	88 30       	cpi	r24, 0x08	; 8
    3566:	08 f0       	brcs	.+2      	; 0x356a <GPIO_readPin+0x1c>
    3568:	84 c0       	rjmp	.+264    	; 0x3672 <GPIO_readPin+0x124>
    356a:	8a 81       	ldd	r24, Y+2	; 0x02
    356c:	84 30       	cpi	r24, 0x04	; 4
    356e:	08 f0       	brcs	.+2      	; 0x3572 <GPIO_readPin+0x24>
    3570:	80 c0       	rjmp	.+256    	; 0x3672 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    3572:	8a 81       	ldd	r24, Y+2	; 0x02
    3574:	28 2f       	mov	r18, r24
    3576:	30 e0       	ldi	r19, 0x00	; 0
    3578:	3d 83       	std	Y+5, r19	; 0x05
    357a:	2c 83       	std	Y+4, r18	; 0x04
    357c:	4c 81       	ldd	r20, Y+4	; 0x04
    357e:	5d 81       	ldd	r21, Y+5	; 0x05
    3580:	41 30       	cpi	r20, 0x01	; 1
    3582:	51 05       	cpc	r21, r1
    3584:	79 f1       	breq	.+94     	; 0x35e4 <GPIO_readPin+0x96>
    3586:	8c 81       	ldd	r24, Y+4	; 0x04
    3588:	9d 81       	ldd	r25, Y+5	; 0x05
    358a:	82 30       	cpi	r24, 0x02	; 2
    358c:	91 05       	cpc	r25, r1
    358e:	34 f4       	brge	.+12     	; 0x359c <GPIO_readPin+0x4e>
    3590:	2c 81       	ldd	r18, Y+4	; 0x04
    3592:	3d 81       	ldd	r19, Y+5	; 0x05
    3594:	21 15       	cp	r18, r1
    3596:	31 05       	cpc	r19, r1
    3598:	69 f0       	breq	.+26     	; 0x35b4 <GPIO_readPin+0x66>
    359a:	6b c0       	rjmp	.+214    	; 0x3672 <GPIO_readPin+0x124>
    359c:	4c 81       	ldd	r20, Y+4	; 0x04
    359e:	5d 81       	ldd	r21, Y+5	; 0x05
    35a0:	42 30       	cpi	r20, 0x02	; 2
    35a2:	51 05       	cpc	r21, r1
    35a4:	b9 f1       	breq	.+110    	; 0x3614 <GPIO_readPin+0xc6>
    35a6:	8c 81       	ldd	r24, Y+4	; 0x04
    35a8:	9d 81       	ldd	r25, Y+5	; 0x05
    35aa:	83 30       	cpi	r24, 0x03	; 3
    35ac:	91 05       	cpc	r25, r1
    35ae:	09 f4       	brne	.+2      	; 0x35b2 <GPIO_readPin+0x64>
    35b0:	49 c0       	rjmp	.+146    	; 0x3644 <GPIO_readPin+0xf6>
    35b2:	5f c0       	rjmp	.+190    	; 0x3672 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    35b4:	e9 e3       	ldi	r30, 0x39	; 57
    35b6:	f0 e0       	ldi	r31, 0x00	; 0
    35b8:	80 81       	ld	r24, Z
    35ba:	28 2f       	mov	r18, r24
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	8b 81       	ldd	r24, Y+3	; 0x03
    35c0:	88 2f       	mov	r24, r24
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	a9 01       	movw	r20, r18
    35c6:	02 c0       	rjmp	.+4      	; 0x35cc <GPIO_readPin+0x7e>
    35c8:	55 95       	asr	r21
    35ca:	47 95       	ror	r20
    35cc:	8a 95       	dec	r24
    35ce:	e2 f7       	brpl	.-8      	; 0x35c8 <GPIO_readPin+0x7a>
    35d0:	ca 01       	movw	r24, r20
    35d2:	81 70       	andi	r24, 0x01	; 1
    35d4:	90 70       	andi	r25, 0x00	; 0
    35d6:	88 23       	and	r24, r24
    35d8:	19 f0       	breq	.+6      	; 0x35e0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    35da:	81 e0       	ldi	r24, 0x01	; 1
    35dc:	89 83       	std	Y+1, r24	; 0x01
    35de:	49 c0       	rjmp	.+146    	; 0x3672 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    35e0:	19 82       	std	Y+1, r1	; 0x01
    35e2:	47 c0       	rjmp	.+142    	; 0x3672 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    35e4:	e6 e3       	ldi	r30, 0x36	; 54
    35e6:	f0 e0       	ldi	r31, 0x00	; 0
    35e8:	80 81       	ld	r24, Z
    35ea:	28 2f       	mov	r18, r24
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	8b 81       	ldd	r24, Y+3	; 0x03
    35f0:	88 2f       	mov	r24, r24
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	a9 01       	movw	r20, r18
    35f6:	02 c0       	rjmp	.+4      	; 0x35fc <GPIO_readPin+0xae>
    35f8:	55 95       	asr	r21
    35fa:	47 95       	ror	r20
    35fc:	8a 95       	dec	r24
    35fe:	e2 f7       	brpl	.-8      	; 0x35f8 <GPIO_readPin+0xaa>
    3600:	ca 01       	movw	r24, r20
    3602:	81 70       	andi	r24, 0x01	; 1
    3604:	90 70       	andi	r25, 0x00	; 0
    3606:	88 23       	and	r24, r24
    3608:	19 f0       	breq	.+6      	; 0x3610 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    360a:	81 e0       	ldi	r24, 0x01	; 1
    360c:	89 83       	std	Y+1, r24	; 0x01
    360e:	31 c0       	rjmp	.+98     	; 0x3672 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    3610:	19 82       	std	Y+1, r1	; 0x01
    3612:	2f c0       	rjmp	.+94     	; 0x3672 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    3614:	e3 e3       	ldi	r30, 0x33	; 51
    3616:	f0 e0       	ldi	r31, 0x00	; 0
    3618:	80 81       	ld	r24, Z
    361a:	28 2f       	mov	r18, r24
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	8b 81       	ldd	r24, Y+3	; 0x03
    3620:	88 2f       	mov	r24, r24
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	a9 01       	movw	r20, r18
    3626:	02 c0       	rjmp	.+4      	; 0x362c <GPIO_readPin+0xde>
    3628:	55 95       	asr	r21
    362a:	47 95       	ror	r20
    362c:	8a 95       	dec	r24
    362e:	e2 f7       	brpl	.-8      	; 0x3628 <GPIO_readPin+0xda>
    3630:	ca 01       	movw	r24, r20
    3632:	81 70       	andi	r24, 0x01	; 1
    3634:	90 70       	andi	r25, 0x00	; 0
    3636:	88 23       	and	r24, r24
    3638:	19 f0       	breq	.+6      	; 0x3640 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    363a:	81 e0       	ldi	r24, 0x01	; 1
    363c:	89 83       	std	Y+1, r24	; 0x01
    363e:	19 c0       	rjmp	.+50     	; 0x3672 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    3640:	19 82       	std	Y+1, r1	; 0x01
    3642:	17 c0       	rjmp	.+46     	; 0x3672 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    3644:	e0 e3       	ldi	r30, 0x30	; 48
    3646:	f0 e0       	ldi	r31, 0x00	; 0
    3648:	80 81       	ld	r24, Z
    364a:	28 2f       	mov	r18, r24
    364c:	30 e0       	ldi	r19, 0x00	; 0
    364e:	8b 81       	ldd	r24, Y+3	; 0x03
    3650:	88 2f       	mov	r24, r24
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	a9 01       	movw	r20, r18
    3656:	02 c0       	rjmp	.+4      	; 0x365c <GPIO_readPin+0x10e>
    3658:	55 95       	asr	r21
    365a:	47 95       	ror	r20
    365c:	8a 95       	dec	r24
    365e:	e2 f7       	brpl	.-8      	; 0x3658 <GPIO_readPin+0x10a>
    3660:	ca 01       	movw	r24, r20
    3662:	81 70       	andi	r24, 0x01	; 1
    3664:	90 70       	andi	r25, 0x00	; 0
    3666:	88 23       	and	r24, r24
    3668:	19 f0       	breq	.+6      	; 0x3670 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    366a:	81 e0       	ldi	r24, 0x01	; 1
    366c:	89 83       	std	Y+1, r24	; 0x01
    366e:	01 c0       	rjmp	.+2      	; 0x3672 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    3670:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    3672:	89 81       	ldd	r24, Y+1	; 0x01
}
    3674:	0f 90       	pop	r0
    3676:	0f 90       	pop	r0
    3678:	0f 90       	pop	r0
    367a:	0f 90       	pop	r0
    367c:	0f 90       	pop	r0
    367e:	cf 91       	pop	r28
    3680:	df 91       	pop	r29
    3682:	08 95       	ret

00003684 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    3684:	df 93       	push	r29
    3686:	cf 93       	push	r28
    3688:	00 d0       	rcall	.+0      	; 0x368a <GPIO_setupPortDirection+0x6>
    368a:	00 d0       	rcall	.+0      	; 0x368c <GPIO_setupPortDirection+0x8>
    368c:	cd b7       	in	r28, 0x3d	; 61
    368e:	de b7       	in	r29, 0x3e	; 62
    3690:	89 83       	std	Y+1, r24	; 0x01
    3692:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    3694:	89 81       	ldd	r24, Y+1	; 0x01
    3696:	84 30       	cpi	r24, 0x04	; 4
    3698:	90 f5       	brcc	.+100    	; 0x36fe <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    369a:	89 81       	ldd	r24, Y+1	; 0x01
    369c:	28 2f       	mov	r18, r24
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	3c 83       	std	Y+4, r19	; 0x04
    36a2:	2b 83       	std	Y+3, r18	; 0x03
    36a4:	8b 81       	ldd	r24, Y+3	; 0x03
    36a6:	9c 81       	ldd	r25, Y+4	; 0x04
    36a8:	81 30       	cpi	r24, 0x01	; 1
    36aa:	91 05       	cpc	r25, r1
    36ac:	d1 f0       	breq	.+52     	; 0x36e2 <GPIO_setupPortDirection+0x5e>
    36ae:	2b 81       	ldd	r18, Y+3	; 0x03
    36b0:	3c 81       	ldd	r19, Y+4	; 0x04
    36b2:	22 30       	cpi	r18, 0x02	; 2
    36b4:	31 05       	cpc	r19, r1
    36b6:	2c f4       	brge	.+10     	; 0x36c2 <GPIO_setupPortDirection+0x3e>
    36b8:	8b 81       	ldd	r24, Y+3	; 0x03
    36ba:	9c 81       	ldd	r25, Y+4	; 0x04
    36bc:	00 97       	sbiw	r24, 0x00	; 0
    36be:	61 f0       	breq	.+24     	; 0x36d8 <GPIO_setupPortDirection+0x54>
    36c0:	1e c0       	rjmp	.+60     	; 0x36fe <GPIO_setupPortDirection+0x7a>
    36c2:	2b 81       	ldd	r18, Y+3	; 0x03
    36c4:	3c 81       	ldd	r19, Y+4	; 0x04
    36c6:	22 30       	cpi	r18, 0x02	; 2
    36c8:	31 05       	cpc	r19, r1
    36ca:	81 f0       	breq	.+32     	; 0x36ec <GPIO_setupPortDirection+0x68>
    36cc:	8b 81       	ldd	r24, Y+3	; 0x03
    36ce:	9c 81       	ldd	r25, Y+4	; 0x04
    36d0:	83 30       	cpi	r24, 0x03	; 3
    36d2:	91 05       	cpc	r25, r1
    36d4:	81 f0       	breq	.+32     	; 0x36f6 <GPIO_setupPortDirection+0x72>
    36d6:	13 c0       	rjmp	.+38     	; 0x36fe <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    36d8:	ea e3       	ldi	r30, 0x3A	; 58
    36da:	f0 e0       	ldi	r31, 0x00	; 0
    36dc:	8a 81       	ldd	r24, Y+2	; 0x02
    36de:	80 83       	st	Z, r24
    36e0:	0e c0       	rjmp	.+28     	; 0x36fe <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    36e2:	e7 e3       	ldi	r30, 0x37	; 55
    36e4:	f0 e0       	ldi	r31, 0x00	; 0
    36e6:	8a 81       	ldd	r24, Y+2	; 0x02
    36e8:	80 83       	st	Z, r24
    36ea:	09 c0       	rjmp	.+18     	; 0x36fe <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    36ec:	e4 e3       	ldi	r30, 0x34	; 52
    36ee:	f0 e0       	ldi	r31, 0x00	; 0
    36f0:	8a 81       	ldd	r24, Y+2	; 0x02
    36f2:	80 83       	st	Z, r24
    36f4:	04 c0       	rjmp	.+8      	; 0x36fe <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    36f6:	e1 e3       	ldi	r30, 0x31	; 49
    36f8:	f0 e0       	ldi	r31, 0x00	; 0
    36fa:	8a 81       	ldd	r24, Y+2	; 0x02
    36fc:	80 83       	st	Z, r24
			break;
		}
	}
}
    36fe:	0f 90       	pop	r0
    3700:	0f 90       	pop	r0
    3702:	0f 90       	pop	r0
    3704:	0f 90       	pop	r0
    3706:	cf 91       	pop	r28
    3708:	df 91       	pop	r29
    370a:	08 95       	ret

0000370c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    370c:	df 93       	push	r29
    370e:	cf 93       	push	r28
    3710:	00 d0       	rcall	.+0      	; 0x3712 <GPIO_writePort+0x6>
    3712:	00 d0       	rcall	.+0      	; 0x3714 <GPIO_writePort+0x8>
    3714:	cd b7       	in	r28, 0x3d	; 61
    3716:	de b7       	in	r29, 0x3e	; 62
    3718:	89 83       	std	Y+1, r24	; 0x01
    371a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    371c:	89 81       	ldd	r24, Y+1	; 0x01
    371e:	84 30       	cpi	r24, 0x04	; 4
    3720:	90 f5       	brcc	.+100    	; 0x3786 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    3722:	89 81       	ldd	r24, Y+1	; 0x01
    3724:	28 2f       	mov	r18, r24
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	3c 83       	std	Y+4, r19	; 0x04
    372a:	2b 83       	std	Y+3, r18	; 0x03
    372c:	8b 81       	ldd	r24, Y+3	; 0x03
    372e:	9c 81       	ldd	r25, Y+4	; 0x04
    3730:	81 30       	cpi	r24, 0x01	; 1
    3732:	91 05       	cpc	r25, r1
    3734:	d1 f0       	breq	.+52     	; 0x376a <GPIO_writePort+0x5e>
    3736:	2b 81       	ldd	r18, Y+3	; 0x03
    3738:	3c 81       	ldd	r19, Y+4	; 0x04
    373a:	22 30       	cpi	r18, 0x02	; 2
    373c:	31 05       	cpc	r19, r1
    373e:	2c f4       	brge	.+10     	; 0x374a <GPIO_writePort+0x3e>
    3740:	8b 81       	ldd	r24, Y+3	; 0x03
    3742:	9c 81       	ldd	r25, Y+4	; 0x04
    3744:	00 97       	sbiw	r24, 0x00	; 0
    3746:	61 f0       	breq	.+24     	; 0x3760 <GPIO_writePort+0x54>
    3748:	1e c0       	rjmp	.+60     	; 0x3786 <GPIO_writePort+0x7a>
    374a:	2b 81       	ldd	r18, Y+3	; 0x03
    374c:	3c 81       	ldd	r19, Y+4	; 0x04
    374e:	22 30       	cpi	r18, 0x02	; 2
    3750:	31 05       	cpc	r19, r1
    3752:	81 f0       	breq	.+32     	; 0x3774 <GPIO_writePort+0x68>
    3754:	8b 81       	ldd	r24, Y+3	; 0x03
    3756:	9c 81       	ldd	r25, Y+4	; 0x04
    3758:	83 30       	cpi	r24, 0x03	; 3
    375a:	91 05       	cpc	r25, r1
    375c:	81 f0       	breq	.+32     	; 0x377e <GPIO_writePort+0x72>
    375e:	13 c0       	rjmp	.+38     	; 0x3786 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    3760:	eb e3       	ldi	r30, 0x3B	; 59
    3762:	f0 e0       	ldi	r31, 0x00	; 0
    3764:	8a 81       	ldd	r24, Y+2	; 0x02
    3766:	80 83       	st	Z, r24
    3768:	0e c0       	rjmp	.+28     	; 0x3786 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    376a:	e8 e3       	ldi	r30, 0x38	; 56
    376c:	f0 e0       	ldi	r31, 0x00	; 0
    376e:	8a 81       	ldd	r24, Y+2	; 0x02
    3770:	80 83       	st	Z, r24
    3772:	09 c0       	rjmp	.+18     	; 0x3786 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    3774:	e5 e3       	ldi	r30, 0x35	; 53
    3776:	f0 e0       	ldi	r31, 0x00	; 0
    3778:	8a 81       	ldd	r24, Y+2	; 0x02
    377a:	80 83       	st	Z, r24
    377c:	04 c0       	rjmp	.+8      	; 0x3786 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    377e:	e2 e3       	ldi	r30, 0x32	; 50
    3780:	f0 e0       	ldi	r31, 0x00	; 0
    3782:	8a 81       	ldd	r24, Y+2	; 0x02
    3784:	80 83       	st	Z, r24
			break;
		}
	}
}
    3786:	0f 90       	pop	r0
    3788:	0f 90       	pop	r0
    378a:	0f 90       	pop	r0
    378c:	0f 90       	pop	r0
    378e:	cf 91       	pop	r28
    3790:	df 91       	pop	r29
    3792:	08 95       	ret

00003794 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    3794:	df 93       	push	r29
    3796:	cf 93       	push	r28
    3798:	00 d0       	rcall	.+0      	; 0x379a <GPIO_readPort+0x6>
    379a:	00 d0       	rcall	.+0      	; 0x379c <GPIO_readPort+0x8>
    379c:	cd b7       	in	r28, 0x3d	; 61
    379e:	de b7       	in	r29, 0x3e	; 62
    37a0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    37a2:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    37a4:	8a 81       	ldd	r24, Y+2	; 0x02
    37a6:	84 30       	cpi	r24, 0x04	; 4
    37a8:	90 f5       	brcc	.+100    	; 0x380e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    37aa:	8a 81       	ldd	r24, Y+2	; 0x02
    37ac:	28 2f       	mov	r18, r24
    37ae:	30 e0       	ldi	r19, 0x00	; 0
    37b0:	3c 83       	std	Y+4, r19	; 0x04
    37b2:	2b 83       	std	Y+3, r18	; 0x03
    37b4:	8b 81       	ldd	r24, Y+3	; 0x03
    37b6:	9c 81       	ldd	r25, Y+4	; 0x04
    37b8:	81 30       	cpi	r24, 0x01	; 1
    37ba:	91 05       	cpc	r25, r1
    37bc:	d1 f0       	breq	.+52     	; 0x37f2 <GPIO_readPort+0x5e>
    37be:	2b 81       	ldd	r18, Y+3	; 0x03
    37c0:	3c 81       	ldd	r19, Y+4	; 0x04
    37c2:	22 30       	cpi	r18, 0x02	; 2
    37c4:	31 05       	cpc	r19, r1
    37c6:	2c f4       	brge	.+10     	; 0x37d2 <GPIO_readPort+0x3e>
    37c8:	8b 81       	ldd	r24, Y+3	; 0x03
    37ca:	9c 81       	ldd	r25, Y+4	; 0x04
    37cc:	00 97       	sbiw	r24, 0x00	; 0
    37ce:	61 f0       	breq	.+24     	; 0x37e8 <GPIO_readPort+0x54>
    37d0:	1e c0       	rjmp	.+60     	; 0x380e <GPIO_readPort+0x7a>
    37d2:	2b 81       	ldd	r18, Y+3	; 0x03
    37d4:	3c 81       	ldd	r19, Y+4	; 0x04
    37d6:	22 30       	cpi	r18, 0x02	; 2
    37d8:	31 05       	cpc	r19, r1
    37da:	81 f0       	breq	.+32     	; 0x37fc <GPIO_readPort+0x68>
    37dc:	8b 81       	ldd	r24, Y+3	; 0x03
    37de:	9c 81       	ldd	r25, Y+4	; 0x04
    37e0:	83 30       	cpi	r24, 0x03	; 3
    37e2:	91 05       	cpc	r25, r1
    37e4:	81 f0       	breq	.+32     	; 0x3806 <GPIO_readPort+0x72>
    37e6:	13 c0       	rjmp	.+38     	; 0x380e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    37e8:	e9 e3       	ldi	r30, 0x39	; 57
    37ea:	f0 e0       	ldi	r31, 0x00	; 0
    37ec:	80 81       	ld	r24, Z
    37ee:	89 83       	std	Y+1, r24	; 0x01
    37f0:	0e c0       	rjmp	.+28     	; 0x380e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    37f2:	e6 e3       	ldi	r30, 0x36	; 54
    37f4:	f0 e0       	ldi	r31, 0x00	; 0
    37f6:	80 81       	ld	r24, Z
    37f8:	89 83       	std	Y+1, r24	; 0x01
    37fa:	09 c0       	rjmp	.+18     	; 0x380e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    37fc:	e3 e3       	ldi	r30, 0x33	; 51
    37fe:	f0 e0       	ldi	r31, 0x00	; 0
    3800:	80 81       	ld	r24, Z
    3802:	89 83       	std	Y+1, r24	; 0x01
    3804:	04 c0       	rjmp	.+8      	; 0x380e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    3806:	e0 e3       	ldi	r30, 0x30	; 48
    3808:	f0 e0       	ldi	r31, 0x00	; 0
    380a:	80 81       	ld	r24, Z
    380c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    380e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3810:	0f 90       	pop	r0
    3812:	0f 90       	pop	r0
    3814:	0f 90       	pop	r0
    3816:	0f 90       	pop	r0
    3818:	cf 91       	pop	r28
    381a:	df 91       	pop	r29
    381c:	08 95       	ret

0000381e <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    381e:	df 93       	push	r29
    3820:	cf 93       	push	r28
    3822:	cd b7       	in	r28, 0x3d	; 61
    3824:	de b7       	in	r29, 0x3e	; 62
    3826:	60 97       	sbiw	r28, 0x10	; 16
    3828:	0f b6       	in	r0, 0x3f	; 63
    382a:	f8 94       	cli
    382c:	de bf       	out	0x3e, r29	; 62
    382e:	0f be       	out	0x3f, r0	; 63
    3830:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    3832:	81 e0       	ldi	r24, 0x01	; 1
    3834:	60 e0       	ldi	r22, 0x00	; 0
    3836:	40 e0       	ldi	r20, 0x00	; 0
    3838:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    383c:	81 e0       	ldi	r24, 0x01	; 1
    383e:	61 e0       	ldi	r22, 0x01	; 1
    3840:	40 e0       	ldi	r20, 0x00	; 0
    3842:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    3846:	81 e0       	ldi	r24, 0x01	; 1
    3848:	62 e0       	ldi	r22, 0x02	; 2
    384a:	40 e0       	ldi	r20, 0x00	; 0
    384c:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    3850:	81 e0       	ldi	r24, 0x01	; 1
    3852:	63 e0       	ldi	r22, 0x03	; 3
    3854:	40 e0       	ldi	r20, 0x00	; 0
    3856:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    385a:	81 e0       	ldi	r24, 0x01	; 1
    385c:	64 e0       	ldi	r22, 0x04	; 4
    385e:	40 e0       	ldi	r20, 0x00	; 0
    3860:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    3864:	81 e0       	ldi	r24, 0x01	; 1
    3866:	65 e0       	ldi	r22, 0x05	; 5
    3868:	40 e0       	ldi	r20, 0x00	; 0
    386a:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    386e:	81 e0       	ldi	r24, 0x01	; 1
    3870:	66 e0       	ldi	r22, 0x06	; 6
    3872:	40 e0       	ldi	r20, 0x00	; 0
    3874:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    3878:	81 e0       	ldi	r24, 0x01	; 1
    387a:	67 e0       	ldi	r22, 0x07	; 7
    387c:	40 e0       	ldi	r20, 0x00	; 0
    387e:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    3882:	1f 86       	std	Y+15, r1	; 0x0f
    3884:	ab c0       	rjmp	.+342    	; 0x39dc <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    3886:	81 e0       	ldi	r24, 0x01	; 1
    3888:	6f 85       	ldd	r22, Y+15	; 0x0f
    388a:	41 e0       	ldi	r20, 0x01	; 1
    388c:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    3890:	81 e0       	ldi	r24, 0x01	; 1
    3892:	6f 85       	ldd	r22, Y+15	; 0x0f
    3894:	40 e0       	ldi	r20, 0x00	; 0
    3896:	0e 94 bc 19 	call	0x3378	; 0x3378 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    389a:	18 8a       	std	Y+16, r1	; 0x10
    389c:	22 c0       	rjmp	.+68     	; 0x38e2 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    389e:	88 89       	ldd	r24, Y+16	; 0x10
    38a0:	98 2f       	mov	r25, r24
    38a2:	9c 5f       	subi	r25, 0xFC	; 252
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	69 2f       	mov	r22, r25
    38a8:	0e 94 a7 1a 	call	0x354e	; 0x354e <GPIO_readPin>
    38ac:	88 23       	and	r24, r24
    38ae:	b1 f4       	brne	.+44     	; 0x38dc <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    38b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    38b2:	88 2f       	mov	r24, r24
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	88 0f       	add	r24, r24
    38b8:	99 1f       	adc	r25, r25
    38ba:	88 0f       	add	r24, r24
    38bc:	99 1f       	adc	r25, r25
    38be:	98 2f       	mov	r25, r24
    38c0:	88 89       	ldd	r24, Y+16	; 0x10
    38c2:	89 0f       	add	r24, r25
    38c4:	8f 5f       	subi	r24, 0xFF	; 255
    38c6:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    38ca:	60 96       	adiw	r28, 0x10	; 16
    38cc:	0f b6       	in	r0, 0x3f	; 63
    38ce:	f8 94       	cli
    38d0:	de bf       	out	0x3e, r29	; 62
    38d2:	0f be       	out	0x3f, r0	; 63
    38d4:	cd bf       	out	0x3d, r28	; 61
    38d6:	cf 91       	pop	r28
    38d8:	df 91       	pop	r29
    38da:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    38dc:	88 89       	ldd	r24, Y+16	; 0x10
    38de:	8f 5f       	subi	r24, 0xFF	; 255
    38e0:	88 8b       	std	Y+16, r24	; 0x10
    38e2:	88 89       	ldd	r24, Y+16	; 0x10
    38e4:	84 30       	cpi	r24, 0x04	; 4
    38e6:	d8 f2       	brcs	.-74     	; 0x389e <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    38e8:	81 e0       	ldi	r24, 0x01	; 1
    38ea:	6f 85       	ldd	r22, Y+15	; 0x0f
    38ec:	40 e0       	ldi	r20, 0x00	; 0
    38ee:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <GPIO_setupPinDirection>
    38f2:	80 e0       	ldi	r24, 0x00	; 0
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	a0 ea       	ldi	r26, 0xA0	; 160
    38f8:	b0 e4       	ldi	r27, 0x40	; 64
    38fa:	8b 87       	std	Y+11, r24	; 0x0b
    38fc:	9c 87       	std	Y+12, r25	; 0x0c
    38fe:	ad 87       	std	Y+13, r26	; 0x0d
    3900:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3902:	6b 85       	ldd	r22, Y+11	; 0x0b
    3904:	7c 85       	ldd	r23, Y+12	; 0x0c
    3906:	8d 85       	ldd	r24, Y+13	; 0x0d
    3908:	9e 85       	ldd	r25, Y+14	; 0x0e
    390a:	20 e0       	ldi	r18, 0x00	; 0
    390c:	30 e0       	ldi	r19, 0x00	; 0
    390e:	4a ef       	ldi	r20, 0xFA	; 250
    3910:	54 e4       	ldi	r21, 0x44	; 68
    3912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3916:	dc 01       	movw	r26, r24
    3918:	cb 01       	movw	r24, r22
    391a:	8f 83       	std	Y+7, r24	; 0x07
    391c:	98 87       	std	Y+8, r25	; 0x08
    391e:	a9 87       	std	Y+9, r26	; 0x09
    3920:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3922:	6f 81       	ldd	r22, Y+7	; 0x07
    3924:	78 85       	ldd	r23, Y+8	; 0x08
    3926:	89 85       	ldd	r24, Y+9	; 0x09
    3928:	9a 85       	ldd	r25, Y+10	; 0x0a
    392a:	20 e0       	ldi	r18, 0x00	; 0
    392c:	30 e0       	ldi	r19, 0x00	; 0
    392e:	40 e8       	ldi	r20, 0x80	; 128
    3930:	5f e3       	ldi	r21, 0x3F	; 63
    3932:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3936:	88 23       	and	r24, r24
    3938:	2c f4       	brge	.+10     	; 0x3944 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    393a:	81 e0       	ldi	r24, 0x01	; 1
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	9e 83       	std	Y+6, r25	; 0x06
    3940:	8d 83       	std	Y+5, r24	; 0x05
    3942:	3f c0       	rjmp	.+126    	; 0x39c2 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    3944:	6f 81       	ldd	r22, Y+7	; 0x07
    3946:	78 85       	ldd	r23, Y+8	; 0x08
    3948:	89 85       	ldd	r24, Y+9	; 0x09
    394a:	9a 85       	ldd	r25, Y+10	; 0x0a
    394c:	20 e0       	ldi	r18, 0x00	; 0
    394e:	3f ef       	ldi	r19, 0xFF	; 255
    3950:	4f e7       	ldi	r20, 0x7F	; 127
    3952:	57 e4       	ldi	r21, 0x47	; 71
    3954:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3958:	18 16       	cp	r1, r24
    395a:	4c f5       	brge	.+82     	; 0x39ae <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    395c:	6b 85       	ldd	r22, Y+11	; 0x0b
    395e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3960:	8d 85       	ldd	r24, Y+13	; 0x0d
    3962:	9e 85       	ldd	r25, Y+14	; 0x0e
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	40 e2       	ldi	r20, 0x20	; 32
    396a:	51 e4       	ldi	r21, 0x41	; 65
    396c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3970:	dc 01       	movw	r26, r24
    3972:	cb 01       	movw	r24, r22
    3974:	bc 01       	movw	r22, r24
    3976:	cd 01       	movw	r24, r26
    3978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    397c:	dc 01       	movw	r26, r24
    397e:	cb 01       	movw	r24, r22
    3980:	9e 83       	std	Y+6, r25	; 0x06
    3982:	8d 83       	std	Y+5, r24	; 0x05
    3984:	0f c0       	rjmp	.+30     	; 0x39a4 <KEYPAD_getPressedKey+0x186>
    3986:	88 ec       	ldi	r24, 0xC8	; 200
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	9c 83       	std	Y+4, r25	; 0x04
    398c:	8b 83       	std	Y+3, r24	; 0x03
    398e:	8b 81       	ldd	r24, Y+3	; 0x03
    3990:	9c 81       	ldd	r25, Y+4	; 0x04
    3992:	01 97       	sbiw	r24, 0x01	; 1
    3994:	f1 f7       	brne	.-4      	; 0x3992 <KEYPAD_getPressedKey+0x174>
    3996:	9c 83       	std	Y+4, r25	; 0x04
    3998:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    399a:	8d 81       	ldd	r24, Y+5	; 0x05
    399c:	9e 81       	ldd	r25, Y+6	; 0x06
    399e:	01 97       	sbiw	r24, 0x01	; 1
    39a0:	9e 83       	std	Y+6, r25	; 0x06
    39a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39a4:	8d 81       	ldd	r24, Y+5	; 0x05
    39a6:	9e 81       	ldd	r25, Y+6	; 0x06
    39a8:	00 97       	sbiw	r24, 0x00	; 0
    39aa:	69 f7       	brne	.-38     	; 0x3986 <KEYPAD_getPressedKey+0x168>
    39ac:	14 c0       	rjmp	.+40     	; 0x39d6 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ae:	6f 81       	ldd	r22, Y+7	; 0x07
    39b0:	78 85       	ldd	r23, Y+8	; 0x08
    39b2:	89 85       	ldd	r24, Y+9	; 0x09
    39b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    39b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ba:	dc 01       	movw	r26, r24
    39bc:	cb 01       	movw	r24, r22
    39be:	9e 83       	std	Y+6, r25	; 0x06
    39c0:	8d 83       	std	Y+5, r24	; 0x05
    39c2:	8d 81       	ldd	r24, Y+5	; 0x05
    39c4:	9e 81       	ldd	r25, Y+6	; 0x06
    39c6:	9a 83       	std	Y+2, r25	; 0x02
    39c8:	89 83       	std	Y+1, r24	; 0x01
    39ca:	89 81       	ldd	r24, Y+1	; 0x01
    39cc:	9a 81       	ldd	r25, Y+2	; 0x02
    39ce:	01 97       	sbiw	r24, 0x01	; 1
    39d0:	f1 f7       	brne	.-4      	; 0x39ce <KEYPAD_getPressedKey+0x1b0>
    39d2:	9a 83       	std	Y+2, r25	; 0x02
    39d4:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    39d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    39d8:	8f 5f       	subi	r24, 0xFF	; 255
    39da:	8f 87       	std	Y+15, r24	; 0x0f
    39dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    39de:	84 30       	cpi	r24, 0x04	; 4
    39e0:	08 f4       	brcc	.+2      	; 0x39e4 <KEYPAD_getPressedKey+0x1c6>
    39e2:	51 cf       	rjmp	.-350    	; 0x3886 <KEYPAD_getPressedKey+0x68>
    39e4:	4e cf       	rjmp	.-356    	; 0x3882 <KEYPAD_getPressedKey+0x64>

000039e6 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    39e6:	df 93       	push	r29
    39e8:	cf 93       	push	r28
    39ea:	00 d0       	rcall	.+0      	; 0x39ec <KEYPAD_4x4_adjustKeyNumber+0x6>
    39ec:	00 d0       	rcall	.+0      	; 0x39ee <KEYPAD_4x4_adjustKeyNumber+0x8>
    39ee:	cd b7       	in	r28, 0x3d	; 61
    39f0:	de b7       	in	r29, 0x3e	; 62
    39f2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    39f4:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    39f6:	8a 81       	ldd	r24, Y+2	; 0x02
    39f8:	28 2f       	mov	r18, r24
    39fa:	30 e0       	ldi	r19, 0x00	; 0
    39fc:	3c 83       	std	Y+4, r19	; 0x04
    39fe:	2b 83       	std	Y+3, r18	; 0x03
    3a00:	8b 81       	ldd	r24, Y+3	; 0x03
    3a02:	9c 81       	ldd	r25, Y+4	; 0x04
    3a04:	88 30       	cpi	r24, 0x08	; 8
    3a06:	91 05       	cpc	r25, r1
    3a08:	09 f4       	brne	.+2      	; 0x3a0c <KEYPAD_4x4_adjustKeyNumber+0x26>
    3a0a:	70 c0       	rjmp	.+224    	; 0x3aec <KEYPAD_4x4_adjustKeyNumber+0x106>
    3a0c:	2b 81       	ldd	r18, Y+3	; 0x03
    3a0e:	3c 81       	ldd	r19, Y+4	; 0x04
    3a10:	29 30       	cpi	r18, 0x09	; 9
    3a12:	31 05       	cpc	r19, r1
    3a14:	5c f5       	brge	.+86     	; 0x3a6c <KEYPAD_4x4_adjustKeyNumber+0x86>
    3a16:	8b 81       	ldd	r24, Y+3	; 0x03
    3a18:	9c 81       	ldd	r25, Y+4	; 0x04
    3a1a:	84 30       	cpi	r24, 0x04	; 4
    3a1c:	91 05       	cpc	r25, r1
    3a1e:	09 f4       	brne	.+2      	; 0x3a22 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    3a20:	59 c0       	rjmp	.+178    	; 0x3ad4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    3a22:	2b 81       	ldd	r18, Y+3	; 0x03
    3a24:	3c 81       	ldd	r19, Y+4	; 0x04
    3a26:	25 30       	cpi	r18, 0x05	; 5
    3a28:	31 05       	cpc	r19, r1
    3a2a:	9c f4       	brge	.+38     	; 0x3a52 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    3a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3a30:	82 30       	cpi	r24, 0x02	; 2
    3a32:	91 05       	cpc	r25, r1
    3a34:	09 f4       	brne	.+2      	; 0x3a38 <KEYPAD_4x4_adjustKeyNumber+0x52>
    3a36:	48 c0       	rjmp	.+144    	; 0x3ac8 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    3a38:	2b 81       	ldd	r18, Y+3	; 0x03
    3a3a:	3c 81       	ldd	r19, Y+4	; 0x04
    3a3c:	23 30       	cpi	r18, 0x03	; 3
    3a3e:	31 05       	cpc	r19, r1
    3a40:	0c f0       	brlt	.+2      	; 0x3a44 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    3a42:	45 c0       	rjmp	.+138    	; 0x3ace <KEYPAD_4x4_adjustKeyNumber+0xe8>
    3a44:	8b 81       	ldd	r24, Y+3	; 0x03
    3a46:	9c 81       	ldd	r25, Y+4	; 0x04
    3a48:	81 30       	cpi	r24, 0x01	; 1
    3a4a:	91 05       	cpc	r25, r1
    3a4c:	09 f4       	brne	.+2      	; 0x3a50 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    3a4e:	39 c0       	rjmp	.+114    	; 0x3ac2 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    3a50:	67 c0       	rjmp	.+206    	; 0x3b20 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    3a52:	2b 81       	ldd	r18, Y+3	; 0x03
    3a54:	3c 81       	ldd	r19, Y+4	; 0x04
    3a56:	26 30       	cpi	r18, 0x06	; 6
    3a58:	31 05       	cpc	r19, r1
    3a5a:	09 f4       	brne	.+2      	; 0x3a5e <KEYPAD_4x4_adjustKeyNumber+0x78>
    3a5c:	41 c0       	rjmp	.+130    	; 0x3ae0 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    3a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a60:	9c 81       	ldd	r25, Y+4	; 0x04
    3a62:	87 30       	cpi	r24, 0x07	; 7
    3a64:	91 05       	cpc	r25, r1
    3a66:	0c f0       	brlt	.+2      	; 0x3a6a <KEYPAD_4x4_adjustKeyNumber+0x84>
    3a68:	3e c0       	rjmp	.+124    	; 0x3ae6 <KEYPAD_4x4_adjustKeyNumber+0x100>
    3a6a:	37 c0       	rjmp	.+110    	; 0x3ada <KEYPAD_4x4_adjustKeyNumber+0xf4>
    3a6c:	2b 81       	ldd	r18, Y+3	; 0x03
    3a6e:	3c 81       	ldd	r19, Y+4	; 0x04
    3a70:	2c 30       	cpi	r18, 0x0C	; 12
    3a72:	31 05       	cpc	r19, r1
    3a74:	09 f4       	brne	.+2      	; 0x3a78 <KEYPAD_4x4_adjustKeyNumber+0x92>
    3a76:	46 c0       	rjmp	.+140    	; 0x3b04 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    3a78:	8b 81       	ldd	r24, Y+3	; 0x03
    3a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a7c:	8d 30       	cpi	r24, 0x0D	; 13
    3a7e:	91 05       	cpc	r25, r1
    3a80:	5c f4       	brge	.+22     	; 0x3a98 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    3a82:	2b 81       	ldd	r18, Y+3	; 0x03
    3a84:	3c 81       	ldd	r19, Y+4	; 0x04
    3a86:	2a 30       	cpi	r18, 0x0A	; 10
    3a88:	31 05       	cpc	r19, r1
    3a8a:	b1 f1       	breq	.+108    	; 0x3af8 <KEYPAD_4x4_adjustKeyNumber+0x112>
    3a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    3a90:	8b 30       	cpi	r24, 0x0B	; 11
    3a92:	91 05       	cpc	r25, r1
    3a94:	a4 f5       	brge	.+104    	; 0x3afe <KEYPAD_4x4_adjustKeyNumber+0x118>
    3a96:	2d c0       	rjmp	.+90     	; 0x3af2 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    3a98:	2b 81       	ldd	r18, Y+3	; 0x03
    3a9a:	3c 81       	ldd	r19, Y+4	; 0x04
    3a9c:	2e 30       	cpi	r18, 0x0E	; 14
    3a9e:	31 05       	cpc	r19, r1
    3aa0:	b9 f1       	breq	.+110    	; 0x3b10 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    3aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    3aa6:	8e 30       	cpi	r24, 0x0E	; 14
    3aa8:	91 05       	cpc	r25, r1
    3aaa:	7c f1       	brlt	.+94     	; 0x3b0a <KEYPAD_4x4_adjustKeyNumber+0x124>
    3aac:	2b 81       	ldd	r18, Y+3	; 0x03
    3aae:	3c 81       	ldd	r19, Y+4	; 0x04
    3ab0:	2f 30       	cpi	r18, 0x0F	; 15
    3ab2:	31 05       	cpc	r19, r1
    3ab4:	79 f1       	breq	.+94     	; 0x3b14 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    3ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    3aba:	80 31       	cpi	r24, 0x10	; 16
    3abc:	91 05       	cpc	r25, r1
    3abe:	69 f1       	breq	.+90     	; 0x3b1a <KEYPAD_4x4_adjustKeyNumber+0x134>
    3ac0:	2f c0       	rjmp	.+94     	; 0x3b20 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    3ac2:	87 e0       	ldi	r24, 0x07	; 7
    3ac4:	89 83       	std	Y+1, r24	; 0x01
    3ac6:	2e c0       	rjmp	.+92     	; 0x3b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    3ac8:	88 e0       	ldi	r24, 0x08	; 8
    3aca:	89 83       	std	Y+1, r24	; 0x01
    3acc:	2b c0       	rjmp	.+86     	; 0x3b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    3ace:	89 e0       	ldi	r24, 0x09	; 9
    3ad0:	89 83       	std	Y+1, r24	; 0x01
    3ad2:	28 c0       	rjmp	.+80     	; 0x3b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    3ad4:	85 e2       	ldi	r24, 0x25	; 37
    3ad6:	89 83       	std	Y+1, r24	; 0x01
    3ad8:	25 c0       	rjmp	.+74     	; 0x3b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    3ada:	84 e0       	ldi	r24, 0x04	; 4
    3adc:	89 83       	std	Y+1, r24	; 0x01
    3ade:	22 c0       	rjmp	.+68     	; 0x3b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    3ae0:	85 e0       	ldi	r24, 0x05	; 5
    3ae2:	89 83       	std	Y+1, r24	; 0x01
    3ae4:	1f c0       	rjmp	.+62     	; 0x3b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    3ae6:	86 e0       	ldi	r24, 0x06	; 6
    3ae8:	89 83       	std	Y+1, r24	; 0x01
    3aea:	1c c0       	rjmp	.+56     	; 0x3b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    3aec:	8a e2       	ldi	r24, 0x2A	; 42
    3aee:	89 83       	std	Y+1, r24	; 0x01
    3af0:	19 c0       	rjmp	.+50     	; 0x3b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    3af2:	81 e0       	ldi	r24, 0x01	; 1
    3af4:	89 83       	std	Y+1, r24	; 0x01
    3af6:	16 c0       	rjmp	.+44     	; 0x3b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    3af8:	82 e0       	ldi	r24, 0x02	; 2
    3afa:	89 83       	std	Y+1, r24	; 0x01
    3afc:	13 c0       	rjmp	.+38     	; 0x3b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    3afe:	83 e0       	ldi	r24, 0x03	; 3
    3b00:	89 83       	std	Y+1, r24	; 0x01
    3b02:	10 c0       	rjmp	.+32     	; 0x3b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    3b04:	8d e2       	ldi	r24, 0x2D	; 45
    3b06:	89 83       	std	Y+1, r24	; 0x01
    3b08:	0d c0       	rjmp	.+26     	; 0x3b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    3b0a:	8d e0       	ldi	r24, 0x0D	; 13
    3b0c:	89 83       	std	Y+1, r24	; 0x01
    3b0e:	0a c0       	rjmp	.+20     	; 0x3b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    3b10:	19 82       	std	Y+1, r1	; 0x01
    3b12:	08 c0       	rjmp	.+16     	; 0x3b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    3b14:	8d e3       	ldi	r24, 0x3D	; 61
    3b16:	89 83       	std	Y+1, r24	; 0x01
    3b18:	05 c0       	rjmp	.+10     	; 0x3b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    3b1a:	8b e2       	ldi	r24, 0x2B	; 43
    3b1c:	89 83       	std	Y+1, r24	; 0x01
    3b1e:	02 c0       	rjmp	.+4      	; 0x3b24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    3b20:	8a 81       	ldd	r24, Y+2	; 0x02
    3b22:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    3b24:	89 81       	ldd	r24, Y+1	; 0x01
} 
    3b26:	0f 90       	pop	r0
    3b28:	0f 90       	pop	r0
    3b2a:	0f 90       	pop	r0
    3b2c:	0f 90       	pop	r0
    3b2e:	cf 91       	pop	r28
    3b30:	df 91       	pop	r29
    3b32:	08 95       	ret

00003b34 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    3b34:	df 93       	push	r29
    3b36:	cf 93       	push	r28
    3b38:	cd b7       	in	r28, 0x3d	; 61
    3b3a:	de b7       	in	r29, 0x3e	; 62
    3b3c:	2e 97       	sbiw	r28, 0x0e	; 14
    3b3e:	0f b6       	in	r0, 0x3f	; 63
    3b40:	f8 94       	cli
    3b42:	de bf       	out	0x3e, r29	; 62
    3b44:	0f be       	out	0x3f, r0	; 63
    3b46:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    3b48:	82 e0       	ldi	r24, 0x02	; 2
    3b4a:	60 e0       	ldi	r22, 0x00	; 0
    3b4c:	41 e0       	ldi	r20, 0x01	; 1
    3b4e:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    3b52:	82 e0       	ldi	r24, 0x02	; 2
    3b54:	61 e0       	ldi	r22, 0x01	; 1
    3b56:	41 e0       	ldi	r20, 0x01	; 1
    3b58:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <GPIO_setupPinDirection>
    3b5c:	80 e0       	ldi	r24, 0x00	; 0
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	a0 ea       	ldi	r26, 0xA0	; 160
    3b62:	b1 e4       	ldi	r27, 0x41	; 65
    3b64:	8b 87       	std	Y+11, r24	; 0x0b
    3b66:	9c 87       	std	Y+12, r25	; 0x0c
    3b68:	ad 87       	std	Y+13, r26	; 0x0d
    3b6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b70:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b72:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	30 e0       	ldi	r19, 0x00	; 0
    3b78:	4a ef       	ldi	r20, 0xFA	; 250
    3b7a:	54 e4       	ldi	r21, 0x44	; 68
    3b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b80:	dc 01       	movw	r26, r24
    3b82:	cb 01       	movw	r24, r22
    3b84:	8f 83       	std	Y+7, r24	; 0x07
    3b86:	98 87       	std	Y+8, r25	; 0x08
    3b88:	a9 87       	std	Y+9, r26	; 0x09
    3b8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b8e:	78 85       	ldd	r23, Y+8	; 0x08
    3b90:	89 85       	ldd	r24, Y+9	; 0x09
    3b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b94:	20 e0       	ldi	r18, 0x00	; 0
    3b96:	30 e0       	ldi	r19, 0x00	; 0
    3b98:	40 e8       	ldi	r20, 0x80	; 128
    3b9a:	5f e3       	ldi	r21, 0x3F	; 63
    3b9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ba0:	88 23       	and	r24, r24
    3ba2:	2c f4       	brge	.+10     	; 0x3bae <LCD_init+0x7a>
		__ticks = 1;
    3ba4:	81 e0       	ldi	r24, 0x01	; 1
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	9e 83       	std	Y+6, r25	; 0x06
    3baa:	8d 83       	std	Y+5, r24	; 0x05
    3bac:	3f c0       	rjmp	.+126    	; 0x3c2c <LCD_init+0xf8>
	else if (__tmp > 65535)
    3bae:	6f 81       	ldd	r22, Y+7	; 0x07
    3bb0:	78 85       	ldd	r23, Y+8	; 0x08
    3bb2:	89 85       	ldd	r24, Y+9	; 0x09
    3bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bb6:	20 e0       	ldi	r18, 0x00	; 0
    3bb8:	3f ef       	ldi	r19, 0xFF	; 255
    3bba:	4f e7       	ldi	r20, 0x7F	; 127
    3bbc:	57 e4       	ldi	r21, 0x47	; 71
    3bbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bc2:	18 16       	cp	r1, r24
    3bc4:	4c f5       	brge	.+82     	; 0x3c18 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bca:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bce:	20 e0       	ldi	r18, 0x00	; 0
    3bd0:	30 e0       	ldi	r19, 0x00	; 0
    3bd2:	40 e2       	ldi	r20, 0x20	; 32
    3bd4:	51 e4       	ldi	r21, 0x41	; 65
    3bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bda:	dc 01       	movw	r26, r24
    3bdc:	cb 01       	movw	r24, r22
    3bde:	bc 01       	movw	r22, r24
    3be0:	cd 01       	movw	r24, r26
    3be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be6:	dc 01       	movw	r26, r24
    3be8:	cb 01       	movw	r24, r22
    3bea:	9e 83       	std	Y+6, r25	; 0x06
    3bec:	8d 83       	std	Y+5, r24	; 0x05
    3bee:	0f c0       	rjmp	.+30     	; 0x3c0e <LCD_init+0xda>
    3bf0:	88 ec       	ldi	r24, 0xC8	; 200
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	9c 83       	std	Y+4, r25	; 0x04
    3bf6:	8b 83       	std	Y+3, r24	; 0x03
    3bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    3bfc:	01 97       	sbiw	r24, 0x01	; 1
    3bfe:	f1 f7       	brne	.-4      	; 0x3bfc <LCD_init+0xc8>
    3c00:	9c 83       	std	Y+4, r25	; 0x04
    3c02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c04:	8d 81       	ldd	r24, Y+5	; 0x05
    3c06:	9e 81       	ldd	r25, Y+6	; 0x06
    3c08:	01 97       	sbiw	r24, 0x01	; 1
    3c0a:	9e 83       	std	Y+6, r25	; 0x06
    3c0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c10:	9e 81       	ldd	r25, Y+6	; 0x06
    3c12:	00 97       	sbiw	r24, 0x00	; 0
    3c14:	69 f7       	brne	.-38     	; 0x3bf0 <LCD_init+0xbc>
    3c16:	14 c0       	rjmp	.+40     	; 0x3c40 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c18:	6f 81       	ldd	r22, Y+7	; 0x07
    3c1a:	78 85       	ldd	r23, Y+8	; 0x08
    3c1c:	89 85       	ldd	r24, Y+9	; 0x09
    3c1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c24:	dc 01       	movw	r26, r24
    3c26:	cb 01       	movw	r24, r22
    3c28:	9e 83       	std	Y+6, r25	; 0x06
    3c2a:	8d 83       	std	Y+5, r24	; 0x05
    3c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c30:	9a 83       	std	Y+2, r25	; 0x02
    3c32:	89 83       	std	Y+1, r24	; 0x01
    3c34:	89 81       	ldd	r24, Y+1	; 0x01
    3c36:	9a 81       	ldd	r25, Y+2	; 0x02
    3c38:	01 97       	sbiw	r24, 0x01	; 1
    3c3a:	f1 f7       	brne	.-4      	; 0x3c38 <LCD_init+0x104>
    3c3c:	9a 83       	std	Y+2, r25	; 0x02
    3c3e:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    3c40:	80 e0       	ldi	r24, 0x00	; 0
    3c42:	6f ef       	ldi	r22, 0xFF	; 255
    3c44:	0e 94 42 1b 	call	0x3684	; 0x3684 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    3c48:	88 e3       	ldi	r24, 0x38	; 56
    3c4a:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    3c4e:	8c e0       	ldi	r24, 0x0C	; 12
    3c50:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    3c54:	81 e0       	ldi	r24, 0x01	; 1
    3c56:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <LCD_sendCommand>
}
    3c5a:	2e 96       	adiw	r28, 0x0e	; 14
    3c5c:	0f b6       	in	r0, 0x3f	; 63
    3c5e:	f8 94       	cli
    3c60:	de bf       	out	0x3e, r29	; 62
    3c62:	0f be       	out	0x3f, r0	; 63
    3c64:	cd bf       	out	0x3d, r28	; 61
    3c66:	cf 91       	pop	r28
    3c68:	df 91       	pop	r29
    3c6a:	08 95       	ret

00003c6c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    3c6c:	df 93       	push	r29
    3c6e:	cf 93       	push	r28
    3c70:	cd b7       	in	r28, 0x3d	; 61
    3c72:	de b7       	in	r29, 0x3e	; 62
    3c74:	e9 97       	sbiw	r28, 0x39	; 57
    3c76:	0f b6       	in	r0, 0x3f	; 63
    3c78:	f8 94       	cli
    3c7a:	de bf       	out	0x3e, r29	; 62
    3c7c:	0f be       	out	0x3f, r0	; 63
    3c7e:	cd bf       	out	0x3d, r28	; 61
    3c80:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    3c82:	82 e0       	ldi	r24, 0x02	; 2
    3c84:	60 e0       	ldi	r22, 0x00	; 0
    3c86:	40 e0       	ldi	r20, 0x00	; 0
    3c88:	0e 94 bc 19 	call	0x3378	; 0x3378 <GPIO_writePin>
    3c8c:	80 e0       	ldi	r24, 0x00	; 0
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	a0 e8       	ldi	r26, 0x80	; 128
    3c92:	bf e3       	ldi	r27, 0x3F	; 63
    3c94:	8d ab       	std	Y+53, r24	; 0x35
    3c96:	9e ab       	std	Y+54, r25	; 0x36
    3c98:	af ab       	std	Y+55, r26	; 0x37
    3c9a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c9c:	6d a9       	ldd	r22, Y+53	; 0x35
    3c9e:	7e a9       	ldd	r23, Y+54	; 0x36
    3ca0:	8f a9       	ldd	r24, Y+55	; 0x37
    3ca2:	98 ad       	ldd	r25, Y+56	; 0x38
    3ca4:	20 e0       	ldi	r18, 0x00	; 0
    3ca6:	30 e0       	ldi	r19, 0x00	; 0
    3ca8:	4a ef       	ldi	r20, 0xFA	; 250
    3caa:	54 e4       	ldi	r21, 0x44	; 68
    3cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cb0:	dc 01       	movw	r26, r24
    3cb2:	cb 01       	movw	r24, r22
    3cb4:	89 ab       	std	Y+49, r24	; 0x31
    3cb6:	9a ab       	std	Y+50, r25	; 0x32
    3cb8:	ab ab       	std	Y+51, r26	; 0x33
    3cba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3cbc:	69 a9       	ldd	r22, Y+49	; 0x31
    3cbe:	7a a9       	ldd	r23, Y+50	; 0x32
    3cc0:	8b a9       	ldd	r24, Y+51	; 0x33
    3cc2:	9c a9       	ldd	r25, Y+52	; 0x34
    3cc4:	20 e0       	ldi	r18, 0x00	; 0
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	40 e8       	ldi	r20, 0x80	; 128
    3cca:	5f e3       	ldi	r21, 0x3F	; 63
    3ccc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cd0:	88 23       	and	r24, r24
    3cd2:	2c f4       	brge	.+10     	; 0x3cde <LCD_sendCommand+0x72>
		__ticks = 1;
    3cd4:	81 e0       	ldi	r24, 0x01	; 1
    3cd6:	90 e0       	ldi	r25, 0x00	; 0
    3cd8:	98 ab       	std	Y+48, r25	; 0x30
    3cda:	8f a7       	std	Y+47, r24	; 0x2f
    3cdc:	3f c0       	rjmp	.+126    	; 0x3d5c <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    3cde:	69 a9       	ldd	r22, Y+49	; 0x31
    3ce0:	7a a9       	ldd	r23, Y+50	; 0x32
    3ce2:	8b a9       	ldd	r24, Y+51	; 0x33
    3ce4:	9c a9       	ldd	r25, Y+52	; 0x34
    3ce6:	20 e0       	ldi	r18, 0x00	; 0
    3ce8:	3f ef       	ldi	r19, 0xFF	; 255
    3cea:	4f e7       	ldi	r20, 0x7F	; 127
    3cec:	57 e4       	ldi	r21, 0x47	; 71
    3cee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3cf2:	18 16       	cp	r1, r24
    3cf4:	4c f5       	brge	.+82     	; 0x3d48 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cf6:	6d a9       	ldd	r22, Y+53	; 0x35
    3cf8:	7e a9       	ldd	r23, Y+54	; 0x36
    3cfa:	8f a9       	ldd	r24, Y+55	; 0x37
    3cfc:	98 ad       	ldd	r25, Y+56	; 0x38
    3cfe:	20 e0       	ldi	r18, 0x00	; 0
    3d00:	30 e0       	ldi	r19, 0x00	; 0
    3d02:	40 e2       	ldi	r20, 0x20	; 32
    3d04:	51 e4       	ldi	r21, 0x41	; 65
    3d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d0a:	dc 01       	movw	r26, r24
    3d0c:	cb 01       	movw	r24, r22
    3d0e:	bc 01       	movw	r22, r24
    3d10:	cd 01       	movw	r24, r26
    3d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d16:	dc 01       	movw	r26, r24
    3d18:	cb 01       	movw	r24, r22
    3d1a:	98 ab       	std	Y+48, r25	; 0x30
    3d1c:	8f a7       	std	Y+47, r24	; 0x2f
    3d1e:	0f c0       	rjmp	.+30     	; 0x3d3e <LCD_sendCommand+0xd2>
    3d20:	88 ec       	ldi	r24, 0xC8	; 200
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	9e a7       	std	Y+46, r25	; 0x2e
    3d26:	8d a7       	std	Y+45, r24	; 0x2d
    3d28:	8d a5       	ldd	r24, Y+45	; 0x2d
    3d2a:	9e a5       	ldd	r25, Y+46	; 0x2e
    3d2c:	01 97       	sbiw	r24, 0x01	; 1
    3d2e:	f1 f7       	brne	.-4      	; 0x3d2c <LCD_sendCommand+0xc0>
    3d30:	9e a7       	std	Y+46, r25	; 0x2e
    3d32:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d34:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d36:	98 a9       	ldd	r25, Y+48	; 0x30
    3d38:	01 97       	sbiw	r24, 0x01	; 1
    3d3a:	98 ab       	std	Y+48, r25	; 0x30
    3d3c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d40:	98 a9       	ldd	r25, Y+48	; 0x30
    3d42:	00 97       	sbiw	r24, 0x00	; 0
    3d44:	69 f7       	brne	.-38     	; 0x3d20 <LCD_sendCommand+0xb4>
    3d46:	14 c0       	rjmp	.+40     	; 0x3d70 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d48:	69 a9       	ldd	r22, Y+49	; 0x31
    3d4a:	7a a9       	ldd	r23, Y+50	; 0x32
    3d4c:	8b a9       	ldd	r24, Y+51	; 0x33
    3d4e:	9c a9       	ldd	r25, Y+52	; 0x34
    3d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d54:	dc 01       	movw	r26, r24
    3d56:	cb 01       	movw	r24, r22
    3d58:	98 ab       	std	Y+48, r25	; 0x30
    3d5a:	8f a7       	std	Y+47, r24	; 0x2f
    3d5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d5e:	98 a9       	ldd	r25, Y+48	; 0x30
    3d60:	9c a7       	std	Y+44, r25	; 0x2c
    3d62:	8b a7       	std	Y+43, r24	; 0x2b
    3d64:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d66:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d68:	01 97       	sbiw	r24, 0x01	; 1
    3d6a:	f1 f7       	brne	.-4      	; 0x3d68 <LCD_sendCommand+0xfc>
    3d6c:	9c a7       	std	Y+44, r25	; 0x2c
    3d6e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3d70:	82 e0       	ldi	r24, 0x02	; 2
    3d72:	61 e0       	ldi	r22, 0x01	; 1
    3d74:	41 e0       	ldi	r20, 0x01	; 1
    3d76:	0e 94 bc 19 	call	0x3378	; 0x3378 <GPIO_writePin>
    3d7a:	80 e0       	ldi	r24, 0x00	; 0
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	a0 e8       	ldi	r26, 0x80	; 128
    3d80:	bf e3       	ldi	r27, 0x3F	; 63
    3d82:	8f a3       	std	Y+39, r24	; 0x27
    3d84:	98 a7       	std	Y+40, r25	; 0x28
    3d86:	a9 a7       	std	Y+41, r26	; 0x29
    3d88:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d8a:	6f a1       	ldd	r22, Y+39	; 0x27
    3d8c:	78 a5       	ldd	r23, Y+40	; 0x28
    3d8e:	89 a5       	ldd	r24, Y+41	; 0x29
    3d90:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d92:	20 e0       	ldi	r18, 0x00	; 0
    3d94:	30 e0       	ldi	r19, 0x00	; 0
    3d96:	4a ef       	ldi	r20, 0xFA	; 250
    3d98:	54 e4       	ldi	r21, 0x44	; 68
    3d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d9e:	dc 01       	movw	r26, r24
    3da0:	cb 01       	movw	r24, r22
    3da2:	8b a3       	std	Y+35, r24	; 0x23
    3da4:	9c a3       	std	Y+36, r25	; 0x24
    3da6:	ad a3       	std	Y+37, r26	; 0x25
    3da8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3daa:	6b a1       	ldd	r22, Y+35	; 0x23
    3dac:	7c a1       	ldd	r23, Y+36	; 0x24
    3dae:	8d a1       	ldd	r24, Y+37	; 0x25
    3db0:	9e a1       	ldd	r25, Y+38	; 0x26
    3db2:	20 e0       	ldi	r18, 0x00	; 0
    3db4:	30 e0       	ldi	r19, 0x00	; 0
    3db6:	40 e8       	ldi	r20, 0x80	; 128
    3db8:	5f e3       	ldi	r21, 0x3F	; 63
    3dba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3dbe:	88 23       	and	r24, r24
    3dc0:	2c f4       	brge	.+10     	; 0x3dcc <LCD_sendCommand+0x160>
		__ticks = 1;
    3dc2:	81 e0       	ldi	r24, 0x01	; 1
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	9a a3       	std	Y+34, r25	; 0x22
    3dc8:	89 a3       	std	Y+33, r24	; 0x21
    3dca:	3f c0       	rjmp	.+126    	; 0x3e4a <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    3dcc:	6b a1       	ldd	r22, Y+35	; 0x23
    3dce:	7c a1       	ldd	r23, Y+36	; 0x24
    3dd0:	8d a1       	ldd	r24, Y+37	; 0x25
    3dd2:	9e a1       	ldd	r25, Y+38	; 0x26
    3dd4:	20 e0       	ldi	r18, 0x00	; 0
    3dd6:	3f ef       	ldi	r19, 0xFF	; 255
    3dd8:	4f e7       	ldi	r20, 0x7F	; 127
    3dda:	57 e4       	ldi	r21, 0x47	; 71
    3ddc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3de0:	18 16       	cp	r1, r24
    3de2:	4c f5       	brge	.+82     	; 0x3e36 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3de4:	6f a1       	ldd	r22, Y+39	; 0x27
    3de6:	78 a5       	ldd	r23, Y+40	; 0x28
    3de8:	89 a5       	ldd	r24, Y+41	; 0x29
    3dea:	9a a5       	ldd	r25, Y+42	; 0x2a
    3dec:	20 e0       	ldi	r18, 0x00	; 0
    3dee:	30 e0       	ldi	r19, 0x00	; 0
    3df0:	40 e2       	ldi	r20, 0x20	; 32
    3df2:	51 e4       	ldi	r21, 0x41	; 65
    3df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3df8:	dc 01       	movw	r26, r24
    3dfa:	cb 01       	movw	r24, r22
    3dfc:	bc 01       	movw	r22, r24
    3dfe:	cd 01       	movw	r24, r26
    3e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e04:	dc 01       	movw	r26, r24
    3e06:	cb 01       	movw	r24, r22
    3e08:	9a a3       	std	Y+34, r25	; 0x22
    3e0a:	89 a3       	std	Y+33, r24	; 0x21
    3e0c:	0f c0       	rjmp	.+30     	; 0x3e2c <LCD_sendCommand+0x1c0>
    3e0e:	88 ec       	ldi	r24, 0xC8	; 200
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	98 a3       	std	Y+32, r25	; 0x20
    3e14:	8f 8f       	std	Y+31, r24	; 0x1f
    3e16:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e18:	98 a1       	ldd	r25, Y+32	; 0x20
    3e1a:	01 97       	sbiw	r24, 0x01	; 1
    3e1c:	f1 f7       	brne	.-4      	; 0x3e1a <LCD_sendCommand+0x1ae>
    3e1e:	98 a3       	std	Y+32, r25	; 0x20
    3e20:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e22:	89 a1       	ldd	r24, Y+33	; 0x21
    3e24:	9a a1       	ldd	r25, Y+34	; 0x22
    3e26:	01 97       	sbiw	r24, 0x01	; 1
    3e28:	9a a3       	std	Y+34, r25	; 0x22
    3e2a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e2c:	89 a1       	ldd	r24, Y+33	; 0x21
    3e2e:	9a a1       	ldd	r25, Y+34	; 0x22
    3e30:	00 97       	sbiw	r24, 0x00	; 0
    3e32:	69 f7       	brne	.-38     	; 0x3e0e <LCD_sendCommand+0x1a2>
    3e34:	14 c0       	rjmp	.+40     	; 0x3e5e <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e36:	6b a1       	ldd	r22, Y+35	; 0x23
    3e38:	7c a1       	ldd	r23, Y+36	; 0x24
    3e3a:	8d a1       	ldd	r24, Y+37	; 0x25
    3e3c:	9e a1       	ldd	r25, Y+38	; 0x26
    3e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e42:	dc 01       	movw	r26, r24
    3e44:	cb 01       	movw	r24, r22
    3e46:	9a a3       	std	Y+34, r25	; 0x22
    3e48:	89 a3       	std	Y+33, r24	; 0x21
    3e4a:	89 a1       	ldd	r24, Y+33	; 0x21
    3e4c:	9a a1       	ldd	r25, Y+34	; 0x22
    3e4e:	9e 8f       	std	Y+30, r25	; 0x1e
    3e50:	8d 8f       	std	Y+29, r24	; 0x1d
    3e52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e54:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e56:	01 97       	sbiw	r24, 0x01	; 1
    3e58:	f1 f7       	brne	.-4      	; 0x3e56 <LCD_sendCommand+0x1ea>
    3e5a:	9e 8f       	std	Y+30, r25	; 0x1e
    3e5c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    3e5e:	80 e0       	ldi	r24, 0x00	; 0
    3e60:	69 ad       	ldd	r22, Y+57	; 0x39
    3e62:	0e 94 86 1b 	call	0x370c	; 0x370c <GPIO_writePort>
    3e66:	80 e0       	ldi	r24, 0x00	; 0
    3e68:	90 e0       	ldi	r25, 0x00	; 0
    3e6a:	a0 e8       	ldi	r26, 0x80	; 128
    3e6c:	bf e3       	ldi	r27, 0x3F	; 63
    3e6e:	89 8f       	std	Y+25, r24	; 0x19
    3e70:	9a 8f       	std	Y+26, r25	; 0x1a
    3e72:	ab 8f       	std	Y+27, r26	; 0x1b
    3e74:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e76:	69 8d       	ldd	r22, Y+25	; 0x19
    3e78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e7e:	20 e0       	ldi	r18, 0x00	; 0
    3e80:	30 e0       	ldi	r19, 0x00	; 0
    3e82:	4a ef       	ldi	r20, 0xFA	; 250
    3e84:	54 e4       	ldi	r21, 0x44	; 68
    3e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e8a:	dc 01       	movw	r26, r24
    3e8c:	cb 01       	movw	r24, r22
    3e8e:	8d 8b       	std	Y+21, r24	; 0x15
    3e90:	9e 8b       	std	Y+22, r25	; 0x16
    3e92:	af 8b       	std	Y+23, r26	; 0x17
    3e94:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3e96:	6d 89       	ldd	r22, Y+21	; 0x15
    3e98:	7e 89       	ldd	r23, Y+22	; 0x16
    3e9a:	8f 89       	ldd	r24, Y+23	; 0x17
    3e9c:	98 8d       	ldd	r25, Y+24	; 0x18
    3e9e:	20 e0       	ldi	r18, 0x00	; 0
    3ea0:	30 e0       	ldi	r19, 0x00	; 0
    3ea2:	40 e8       	ldi	r20, 0x80	; 128
    3ea4:	5f e3       	ldi	r21, 0x3F	; 63
    3ea6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3eaa:	88 23       	and	r24, r24
    3eac:	2c f4       	brge	.+10     	; 0x3eb8 <LCD_sendCommand+0x24c>
		__ticks = 1;
    3eae:	81 e0       	ldi	r24, 0x01	; 1
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	9c 8b       	std	Y+20, r25	; 0x14
    3eb4:	8b 8b       	std	Y+19, r24	; 0x13
    3eb6:	3f c0       	rjmp	.+126    	; 0x3f36 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    3eb8:	6d 89       	ldd	r22, Y+21	; 0x15
    3eba:	7e 89       	ldd	r23, Y+22	; 0x16
    3ebc:	8f 89       	ldd	r24, Y+23	; 0x17
    3ebe:	98 8d       	ldd	r25, Y+24	; 0x18
    3ec0:	20 e0       	ldi	r18, 0x00	; 0
    3ec2:	3f ef       	ldi	r19, 0xFF	; 255
    3ec4:	4f e7       	ldi	r20, 0x7F	; 127
    3ec6:	57 e4       	ldi	r21, 0x47	; 71
    3ec8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ecc:	18 16       	cp	r1, r24
    3ece:	4c f5       	brge	.+82     	; 0x3f22 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ed0:	69 8d       	ldd	r22, Y+25	; 0x19
    3ed2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ed4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ed6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ed8:	20 e0       	ldi	r18, 0x00	; 0
    3eda:	30 e0       	ldi	r19, 0x00	; 0
    3edc:	40 e2       	ldi	r20, 0x20	; 32
    3ede:	51 e4       	ldi	r21, 0x41	; 65
    3ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ee4:	dc 01       	movw	r26, r24
    3ee6:	cb 01       	movw	r24, r22
    3ee8:	bc 01       	movw	r22, r24
    3eea:	cd 01       	movw	r24, r26
    3eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ef0:	dc 01       	movw	r26, r24
    3ef2:	cb 01       	movw	r24, r22
    3ef4:	9c 8b       	std	Y+20, r25	; 0x14
    3ef6:	8b 8b       	std	Y+19, r24	; 0x13
    3ef8:	0f c0       	rjmp	.+30     	; 0x3f18 <LCD_sendCommand+0x2ac>
    3efa:	88 ec       	ldi	r24, 0xC8	; 200
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	9a 8b       	std	Y+18, r25	; 0x12
    3f00:	89 8b       	std	Y+17, r24	; 0x11
    3f02:	89 89       	ldd	r24, Y+17	; 0x11
    3f04:	9a 89       	ldd	r25, Y+18	; 0x12
    3f06:	01 97       	sbiw	r24, 0x01	; 1
    3f08:	f1 f7       	brne	.-4      	; 0x3f06 <LCD_sendCommand+0x29a>
    3f0a:	9a 8b       	std	Y+18, r25	; 0x12
    3f0c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f0e:	8b 89       	ldd	r24, Y+19	; 0x13
    3f10:	9c 89       	ldd	r25, Y+20	; 0x14
    3f12:	01 97       	sbiw	r24, 0x01	; 1
    3f14:	9c 8b       	std	Y+20, r25	; 0x14
    3f16:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f18:	8b 89       	ldd	r24, Y+19	; 0x13
    3f1a:	9c 89       	ldd	r25, Y+20	; 0x14
    3f1c:	00 97       	sbiw	r24, 0x00	; 0
    3f1e:	69 f7       	brne	.-38     	; 0x3efa <LCD_sendCommand+0x28e>
    3f20:	14 c0       	rjmp	.+40     	; 0x3f4a <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f22:	6d 89       	ldd	r22, Y+21	; 0x15
    3f24:	7e 89       	ldd	r23, Y+22	; 0x16
    3f26:	8f 89       	ldd	r24, Y+23	; 0x17
    3f28:	98 8d       	ldd	r25, Y+24	; 0x18
    3f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f2e:	dc 01       	movw	r26, r24
    3f30:	cb 01       	movw	r24, r22
    3f32:	9c 8b       	std	Y+20, r25	; 0x14
    3f34:	8b 8b       	std	Y+19, r24	; 0x13
    3f36:	8b 89       	ldd	r24, Y+19	; 0x13
    3f38:	9c 89       	ldd	r25, Y+20	; 0x14
    3f3a:	98 8b       	std	Y+16, r25	; 0x10
    3f3c:	8f 87       	std	Y+15, r24	; 0x0f
    3f3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f40:	98 89       	ldd	r25, Y+16	; 0x10
    3f42:	01 97       	sbiw	r24, 0x01	; 1
    3f44:	f1 f7       	brne	.-4      	; 0x3f42 <LCD_sendCommand+0x2d6>
    3f46:	98 8b       	std	Y+16, r25	; 0x10
    3f48:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3f4a:	82 e0       	ldi	r24, 0x02	; 2
    3f4c:	61 e0       	ldi	r22, 0x01	; 1
    3f4e:	40 e0       	ldi	r20, 0x00	; 0
    3f50:	0e 94 bc 19 	call	0x3378	; 0x3378 <GPIO_writePin>
    3f54:	80 e0       	ldi	r24, 0x00	; 0
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	a0 e8       	ldi	r26, 0x80	; 128
    3f5a:	bf e3       	ldi	r27, 0x3F	; 63
    3f5c:	8b 87       	std	Y+11, r24	; 0x0b
    3f5e:	9c 87       	std	Y+12, r25	; 0x0c
    3f60:	ad 87       	std	Y+13, r26	; 0x0d
    3f62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f64:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f66:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f68:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f6c:	20 e0       	ldi	r18, 0x00	; 0
    3f6e:	30 e0       	ldi	r19, 0x00	; 0
    3f70:	4a ef       	ldi	r20, 0xFA	; 250
    3f72:	54 e4       	ldi	r21, 0x44	; 68
    3f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f78:	dc 01       	movw	r26, r24
    3f7a:	cb 01       	movw	r24, r22
    3f7c:	8f 83       	std	Y+7, r24	; 0x07
    3f7e:	98 87       	std	Y+8, r25	; 0x08
    3f80:	a9 87       	std	Y+9, r26	; 0x09
    3f82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f84:	6f 81       	ldd	r22, Y+7	; 0x07
    3f86:	78 85       	ldd	r23, Y+8	; 0x08
    3f88:	89 85       	ldd	r24, Y+9	; 0x09
    3f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f8c:	20 e0       	ldi	r18, 0x00	; 0
    3f8e:	30 e0       	ldi	r19, 0x00	; 0
    3f90:	40 e8       	ldi	r20, 0x80	; 128
    3f92:	5f e3       	ldi	r21, 0x3F	; 63
    3f94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f98:	88 23       	and	r24, r24
    3f9a:	2c f4       	brge	.+10     	; 0x3fa6 <LCD_sendCommand+0x33a>
		__ticks = 1;
    3f9c:	81 e0       	ldi	r24, 0x01	; 1
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	9e 83       	std	Y+6, r25	; 0x06
    3fa2:	8d 83       	std	Y+5, r24	; 0x05
    3fa4:	3f c0       	rjmp	.+126    	; 0x4024 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    3fa6:	6f 81       	ldd	r22, Y+7	; 0x07
    3fa8:	78 85       	ldd	r23, Y+8	; 0x08
    3faa:	89 85       	ldd	r24, Y+9	; 0x09
    3fac:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fae:	20 e0       	ldi	r18, 0x00	; 0
    3fb0:	3f ef       	ldi	r19, 0xFF	; 255
    3fb2:	4f e7       	ldi	r20, 0x7F	; 127
    3fb4:	57 e4       	ldi	r21, 0x47	; 71
    3fb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fba:	18 16       	cp	r1, r24
    3fbc:	4c f5       	brge	.+82     	; 0x4010 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fc6:	20 e0       	ldi	r18, 0x00	; 0
    3fc8:	30 e0       	ldi	r19, 0x00	; 0
    3fca:	40 e2       	ldi	r20, 0x20	; 32
    3fcc:	51 e4       	ldi	r21, 0x41	; 65
    3fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fd2:	dc 01       	movw	r26, r24
    3fd4:	cb 01       	movw	r24, r22
    3fd6:	bc 01       	movw	r22, r24
    3fd8:	cd 01       	movw	r24, r26
    3fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fde:	dc 01       	movw	r26, r24
    3fe0:	cb 01       	movw	r24, r22
    3fe2:	9e 83       	std	Y+6, r25	; 0x06
    3fe4:	8d 83       	std	Y+5, r24	; 0x05
    3fe6:	0f c0       	rjmp	.+30     	; 0x4006 <LCD_sendCommand+0x39a>
    3fe8:	88 ec       	ldi	r24, 0xC8	; 200
    3fea:	90 e0       	ldi	r25, 0x00	; 0
    3fec:	9c 83       	std	Y+4, r25	; 0x04
    3fee:	8b 83       	std	Y+3, r24	; 0x03
    3ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ff4:	01 97       	sbiw	r24, 0x01	; 1
    3ff6:	f1 f7       	brne	.-4      	; 0x3ff4 <LCD_sendCommand+0x388>
    3ff8:	9c 83       	std	Y+4, r25	; 0x04
    3ffa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    4000:	01 97       	sbiw	r24, 0x01	; 1
    4002:	9e 83       	std	Y+6, r25	; 0x06
    4004:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4006:	8d 81       	ldd	r24, Y+5	; 0x05
    4008:	9e 81       	ldd	r25, Y+6	; 0x06
    400a:	00 97       	sbiw	r24, 0x00	; 0
    400c:	69 f7       	brne	.-38     	; 0x3fe8 <LCD_sendCommand+0x37c>
    400e:	14 c0       	rjmp	.+40     	; 0x4038 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4010:	6f 81       	ldd	r22, Y+7	; 0x07
    4012:	78 85       	ldd	r23, Y+8	; 0x08
    4014:	89 85       	ldd	r24, Y+9	; 0x09
    4016:	9a 85       	ldd	r25, Y+10	; 0x0a
    4018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    401c:	dc 01       	movw	r26, r24
    401e:	cb 01       	movw	r24, r22
    4020:	9e 83       	std	Y+6, r25	; 0x06
    4022:	8d 83       	std	Y+5, r24	; 0x05
    4024:	8d 81       	ldd	r24, Y+5	; 0x05
    4026:	9e 81       	ldd	r25, Y+6	; 0x06
    4028:	9a 83       	std	Y+2, r25	; 0x02
    402a:	89 83       	std	Y+1, r24	; 0x01
    402c:	89 81       	ldd	r24, Y+1	; 0x01
    402e:	9a 81       	ldd	r25, Y+2	; 0x02
    4030:	01 97       	sbiw	r24, 0x01	; 1
    4032:	f1 f7       	brne	.-4      	; 0x4030 <LCD_sendCommand+0x3c4>
    4034:	9a 83       	std	Y+2, r25	; 0x02
    4036:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    4038:	e9 96       	adiw	r28, 0x39	; 57
    403a:	0f b6       	in	r0, 0x3f	; 63
    403c:	f8 94       	cli
    403e:	de bf       	out	0x3e, r29	; 62
    4040:	0f be       	out	0x3f, r0	; 63
    4042:	cd bf       	out	0x3d, r28	; 61
    4044:	cf 91       	pop	r28
    4046:	df 91       	pop	r29
    4048:	08 95       	ret

0000404a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    404a:	df 93       	push	r29
    404c:	cf 93       	push	r28
    404e:	cd b7       	in	r28, 0x3d	; 61
    4050:	de b7       	in	r29, 0x3e	; 62
    4052:	e9 97       	sbiw	r28, 0x39	; 57
    4054:	0f b6       	in	r0, 0x3f	; 63
    4056:	f8 94       	cli
    4058:	de bf       	out	0x3e, r29	; 62
    405a:	0f be       	out	0x3f, r0	; 63
    405c:	cd bf       	out	0x3d, r28	; 61
    405e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    4060:	82 e0       	ldi	r24, 0x02	; 2
    4062:	60 e0       	ldi	r22, 0x00	; 0
    4064:	41 e0       	ldi	r20, 0x01	; 1
    4066:	0e 94 bc 19 	call	0x3378	; 0x3378 <GPIO_writePin>
    406a:	80 e0       	ldi	r24, 0x00	; 0
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	a0 e8       	ldi	r26, 0x80	; 128
    4070:	bf e3       	ldi	r27, 0x3F	; 63
    4072:	8d ab       	std	Y+53, r24	; 0x35
    4074:	9e ab       	std	Y+54, r25	; 0x36
    4076:	af ab       	std	Y+55, r26	; 0x37
    4078:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    407a:	6d a9       	ldd	r22, Y+53	; 0x35
    407c:	7e a9       	ldd	r23, Y+54	; 0x36
    407e:	8f a9       	ldd	r24, Y+55	; 0x37
    4080:	98 ad       	ldd	r25, Y+56	; 0x38
    4082:	20 e0       	ldi	r18, 0x00	; 0
    4084:	30 e0       	ldi	r19, 0x00	; 0
    4086:	4a ef       	ldi	r20, 0xFA	; 250
    4088:	54 e4       	ldi	r21, 0x44	; 68
    408a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    408e:	dc 01       	movw	r26, r24
    4090:	cb 01       	movw	r24, r22
    4092:	89 ab       	std	Y+49, r24	; 0x31
    4094:	9a ab       	std	Y+50, r25	; 0x32
    4096:	ab ab       	std	Y+51, r26	; 0x33
    4098:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    409a:	69 a9       	ldd	r22, Y+49	; 0x31
    409c:	7a a9       	ldd	r23, Y+50	; 0x32
    409e:	8b a9       	ldd	r24, Y+51	; 0x33
    40a0:	9c a9       	ldd	r25, Y+52	; 0x34
    40a2:	20 e0       	ldi	r18, 0x00	; 0
    40a4:	30 e0       	ldi	r19, 0x00	; 0
    40a6:	40 e8       	ldi	r20, 0x80	; 128
    40a8:	5f e3       	ldi	r21, 0x3F	; 63
    40aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40ae:	88 23       	and	r24, r24
    40b0:	2c f4       	brge	.+10     	; 0x40bc <LCD_displayCharacter+0x72>
		__ticks = 1;
    40b2:	81 e0       	ldi	r24, 0x01	; 1
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	98 ab       	std	Y+48, r25	; 0x30
    40b8:	8f a7       	std	Y+47, r24	; 0x2f
    40ba:	3f c0       	rjmp	.+126    	; 0x413a <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    40bc:	69 a9       	ldd	r22, Y+49	; 0x31
    40be:	7a a9       	ldd	r23, Y+50	; 0x32
    40c0:	8b a9       	ldd	r24, Y+51	; 0x33
    40c2:	9c a9       	ldd	r25, Y+52	; 0x34
    40c4:	20 e0       	ldi	r18, 0x00	; 0
    40c6:	3f ef       	ldi	r19, 0xFF	; 255
    40c8:	4f e7       	ldi	r20, 0x7F	; 127
    40ca:	57 e4       	ldi	r21, 0x47	; 71
    40cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    40d0:	18 16       	cp	r1, r24
    40d2:	4c f5       	brge	.+82     	; 0x4126 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40d4:	6d a9       	ldd	r22, Y+53	; 0x35
    40d6:	7e a9       	ldd	r23, Y+54	; 0x36
    40d8:	8f a9       	ldd	r24, Y+55	; 0x37
    40da:	98 ad       	ldd	r25, Y+56	; 0x38
    40dc:	20 e0       	ldi	r18, 0x00	; 0
    40de:	30 e0       	ldi	r19, 0x00	; 0
    40e0:	40 e2       	ldi	r20, 0x20	; 32
    40e2:	51 e4       	ldi	r21, 0x41	; 65
    40e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40e8:	dc 01       	movw	r26, r24
    40ea:	cb 01       	movw	r24, r22
    40ec:	bc 01       	movw	r22, r24
    40ee:	cd 01       	movw	r24, r26
    40f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40f4:	dc 01       	movw	r26, r24
    40f6:	cb 01       	movw	r24, r22
    40f8:	98 ab       	std	Y+48, r25	; 0x30
    40fa:	8f a7       	std	Y+47, r24	; 0x2f
    40fc:	0f c0       	rjmp	.+30     	; 0x411c <LCD_displayCharacter+0xd2>
    40fe:	88 ec       	ldi	r24, 0xC8	; 200
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	9e a7       	std	Y+46, r25	; 0x2e
    4104:	8d a7       	std	Y+45, r24	; 0x2d
    4106:	8d a5       	ldd	r24, Y+45	; 0x2d
    4108:	9e a5       	ldd	r25, Y+46	; 0x2e
    410a:	01 97       	sbiw	r24, 0x01	; 1
    410c:	f1 f7       	brne	.-4      	; 0x410a <LCD_displayCharacter+0xc0>
    410e:	9e a7       	std	Y+46, r25	; 0x2e
    4110:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4112:	8f a5       	ldd	r24, Y+47	; 0x2f
    4114:	98 a9       	ldd	r25, Y+48	; 0x30
    4116:	01 97       	sbiw	r24, 0x01	; 1
    4118:	98 ab       	std	Y+48, r25	; 0x30
    411a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    411c:	8f a5       	ldd	r24, Y+47	; 0x2f
    411e:	98 a9       	ldd	r25, Y+48	; 0x30
    4120:	00 97       	sbiw	r24, 0x00	; 0
    4122:	69 f7       	brne	.-38     	; 0x40fe <LCD_displayCharacter+0xb4>
    4124:	14 c0       	rjmp	.+40     	; 0x414e <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4126:	69 a9       	ldd	r22, Y+49	; 0x31
    4128:	7a a9       	ldd	r23, Y+50	; 0x32
    412a:	8b a9       	ldd	r24, Y+51	; 0x33
    412c:	9c a9       	ldd	r25, Y+52	; 0x34
    412e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4132:	dc 01       	movw	r26, r24
    4134:	cb 01       	movw	r24, r22
    4136:	98 ab       	std	Y+48, r25	; 0x30
    4138:	8f a7       	std	Y+47, r24	; 0x2f
    413a:	8f a5       	ldd	r24, Y+47	; 0x2f
    413c:	98 a9       	ldd	r25, Y+48	; 0x30
    413e:	9c a7       	std	Y+44, r25	; 0x2c
    4140:	8b a7       	std	Y+43, r24	; 0x2b
    4142:	8b a5       	ldd	r24, Y+43	; 0x2b
    4144:	9c a5       	ldd	r25, Y+44	; 0x2c
    4146:	01 97       	sbiw	r24, 0x01	; 1
    4148:	f1 f7       	brne	.-4      	; 0x4146 <LCD_displayCharacter+0xfc>
    414a:	9c a7       	std	Y+44, r25	; 0x2c
    414c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    414e:	82 e0       	ldi	r24, 0x02	; 2
    4150:	61 e0       	ldi	r22, 0x01	; 1
    4152:	41 e0       	ldi	r20, 0x01	; 1
    4154:	0e 94 bc 19 	call	0x3378	; 0x3378 <GPIO_writePin>
    4158:	80 e0       	ldi	r24, 0x00	; 0
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	a0 e8       	ldi	r26, 0x80	; 128
    415e:	bf e3       	ldi	r27, 0x3F	; 63
    4160:	8f a3       	std	Y+39, r24	; 0x27
    4162:	98 a7       	std	Y+40, r25	; 0x28
    4164:	a9 a7       	std	Y+41, r26	; 0x29
    4166:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4168:	6f a1       	ldd	r22, Y+39	; 0x27
    416a:	78 a5       	ldd	r23, Y+40	; 0x28
    416c:	89 a5       	ldd	r24, Y+41	; 0x29
    416e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4170:	20 e0       	ldi	r18, 0x00	; 0
    4172:	30 e0       	ldi	r19, 0x00	; 0
    4174:	4a ef       	ldi	r20, 0xFA	; 250
    4176:	54 e4       	ldi	r21, 0x44	; 68
    4178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    417c:	dc 01       	movw	r26, r24
    417e:	cb 01       	movw	r24, r22
    4180:	8b a3       	std	Y+35, r24	; 0x23
    4182:	9c a3       	std	Y+36, r25	; 0x24
    4184:	ad a3       	std	Y+37, r26	; 0x25
    4186:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4188:	6b a1       	ldd	r22, Y+35	; 0x23
    418a:	7c a1       	ldd	r23, Y+36	; 0x24
    418c:	8d a1       	ldd	r24, Y+37	; 0x25
    418e:	9e a1       	ldd	r25, Y+38	; 0x26
    4190:	20 e0       	ldi	r18, 0x00	; 0
    4192:	30 e0       	ldi	r19, 0x00	; 0
    4194:	40 e8       	ldi	r20, 0x80	; 128
    4196:	5f e3       	ldi	r21, 0x3F	; 63
    4198:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    419c:	88 23       	and	r24, r24
    419e:	2c f4       	brge	.+10     	; 0x41aa <LCD_displayCharacter+0x160>
		__ticks = 1;
    41a0:	81 e0       	ldi	r24, 0x01	; 1
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	9a a3       	std	Y+34, r25	; 0x22
    41a6:	89 a3       	std	Y+33, r24	; 0x21
    41a8:	3f c0       	rjmp	.+126    	; 0x4228 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    41aa:	6b a1       	ldd	r22, Y+35	; 0x23
    41ac:	7c a1       	ldd	r23, Y+36	; 0x24
    41ae:	8d a1       	ldd	r24, Y+37	; 0x25
    41b0:	9e a1       	ldd	r25, Y+38	; 0x26
    41b2:	20 e0       	ldi	r18, 0x00	; 0
    41b4:	3f ef       	ldi	r19, 0xFF	; 255
    41b6:	4f e7       	ldi	r20, 0x7F	; 127
    41b8:	57 e4       	ldi	r21, 0x47	; 71
    41ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41be:	18 16       	cp	r1, r24
    41c0:	4c f5       	brge	.+82     	; 0x4214 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41c2:	6f a1       	ldd	r22, Y+39	; 0x27
    41c4:	78 a5       	ldd	r23, Y+40	; 0x28
    41c6:	89 a5       	ldd	r24, Y+41	; 0x29
    41c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    41ca:	20 e0       	ldi	r18, 0x00	; 0
    41cc:	30 e0       	ldi	r19, 0x00	; 0
    41ce:	40 e2       	ldi	r20, 0x20	; 32
    41d0:	51 e4       	ldi	r21, 0x41	; 65
    41d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41d6:	dc 01       	movw	r26, r24
    41d8:	cb 01       	movw	r24, r22
    41da:	bc 01       	movw	r22, r24
    41dc:	cd 01       	movw	r24, r26
    41de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41e2:	dc 01       	movw	r26, r24
    41e4:	cb 01       	movw	r24, r22
    41e6:	9a a3       	std	Y+34, r25	; 0x22
    41e8:	89 a3       	std	Y+33, r24	; 0x21
    41ea:	0f c0       	rjmp	.+30     	; 0x420a <LCD_displayCharacter+0x1c0>
    41ec:	88 ec       	ldi	r24, 0xC8	; 200
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	98 a3       	std	Y+32, r25	; 0x20
    41f2:	8f 8f       	std	Y+31, r24	; 0x1f
    41f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    41f6:	98 a1       	ldd	r25, Y+32	; 0x20
    41f8:	01 97       	sbiw	r24, 0x01	; 1
    41fa:	f1 f7       	brne	.-4      	; 0x41f8 <LCD_displayCharacter+0x1ae>
    41fc:	98 a3       	std	Y+32, r25	; 0x20
    41fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4200:	89 a1       	ldd	r24, Y+33	; 0x21
    4202:	9a a1       	ldd	r25, Y+34	; 0x22
    4204:	01 97       	sbiw	r24, 0x01	; 1
    4206:	9a a3       	std	Y+34, r25	; 0x22
    4208:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    420a:	89 a1       	ldd	r24, Y+33	; 0x21
    420c:	9a a1       	ldd	r25, Y+34	; 0x22
    420e:	00 97       	sbiw	r24, 0x00	; 0
    4210:	69 f7       	brne	.-38     	; 0x41ec <LCD_displayCharacter+0x1a2>
    4212:	14 c0       	rjmp	.+40     	; 0x423c <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4214:	6b a1       	ldd	r22, Y+35	; 0x23
    4216:	7c a1       	ldd	r23, Y+36	; 0x24
    4218:	8d a1       	ldd	r24, Y+37	; 0x25
    421a:	9e a1       	ldd	r25, Y+38	; 0x26
    421c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4220:	dc 01       	movw	r26, r24
    4222:	cb 01       	movw	r24, r22
    4224:	9a a3       	std	Y+34, r25	; 0x22
    4226:	89 a3       	std	Y+33, r24	; 0x21
    4228:	89 a1       	ldd	r24, Y+33	; 0x21
    422a:	9a a1       	ldd	r25, Y+34	; 0x22
    422c:	9e 8f       	std	Y+30, r25	; 0x1e
    422e:	8d 8f       	std	Y+29, r24	; 0x1d
    4230:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4232:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4234:	01 97       	sbiw	r24, 0x01	; 1
    4236:	f1 f7       	brne	.-4      	; 0x4234 <LCD_displayCharacter+0x1ea>
    4238:	9e 8f       	std	Y+30, r25	; 0x1e
    423a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    423c:	80 e0       	ldi	r24, 0x00	; 0
    423e:	69 ad       	ldd	r22, Y+57	; 0x39
    4240:	0e 94 86 1b 	call	0x370c	; 0x370c <GPIO_writePort>
    4244:	80 e0       	ldi	r24, 0x00	; 0
    4246:	90 e0       	ldi	r25, 0x00	; 0
    4248:	a0 e8       	ldi	r26, 0x80	; 128
    424a:	bf e3       	ldi	r27, 0x3F	; 63
    424c:	89 8f       	std	Y+25, r24	; 0x19
    424e:	9a 8f       	std	Y+26, r25	; 0x1a
    4250:	ab 8f       	std	Y+27, r26	; 0x1b
    4252:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4254:	69 8d       	ldd	r22, Y+25	; 0x19
    4256:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4258:	8b 8d       	ldd	r24, Y+27	; 0x1b
    425a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    425c:	20 e0       	ldi	r18, 0x00	; 0
    425e:	30 e0       	ldi	r19, 0x00	; 0
    4260:	4a ef       	ldi	r20, 0xFA	; 250
    4262:	54 e4       	ldi	r21, 0x44	; 68
    4264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4268:	dc 01       	movw	r26, r24
    426a:	cb 01       	movw	r24, r22
    426c:	8d 8b       	std	Y+21, r24	; 0x15
    426e:	9e 8b       	std	Y+22, r25	; 0x16
    4270:	af 8b       	std	Y+23, r26	; 0x17
    4272:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4274:	6d 89       	ldd	r22, Y+21	; 0x15
    4276:	7e 89       	ldd	r23, Y+22	; 0x16
    4278:	8f 89       	ldd	r24, Y+23	; 0x17
    427a:	98 8d       	ldd	r25, Y+24	; 0x18
    427c:	20 e0       	ldi	r18, 0x00	; 0
    427e:	30 e0       	ldi	r19, 0x00	; 0
    4280:	40 e8       	ldi	r20, 0x80	; 128
    4282:	5f e3       	ldi	r21, 0x3F	; 63
    4284:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4288:	88 23       	and	r24, r24
    428a:	2c f4       	brge	.+10     	; 0x4296 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    428c:	81 e0       	ldi	r24, 0x01	; 1
    428e:	90 e0       	ldi	r25, 0x00	; 0
    4290:	9c 8b       	std	Y+20, r25	; 0x14
    4292:	8b 8b       	std	Y+19, r24	; 0x13
    4294:	3f c0       	rjmp	.+126    	; 0x4314 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    4296:	6d 89       	ldd	r22, Y+21	; 0x15
    4298:	7e 89       	ldd	r23, Y+22	; 0x16
    429a:	8f 89       	ldd	r24, Y+23	; 0x17
    429c:	98 8d       	ldd	r25, Y+24	; 0x18
    429e:	20 e0       	ldi	r18, 0x00	; 0
    42a0:	3f ef       	ldi	r19, 0xFF	; 255
    42a2:	4f e7       	ldi	r20, 0x7F	; 127
    42a4:	57 e4       	ldi	r21, 0x47	; 71
    42a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42aa:	18 16       	cp	r1, r24
    42ac:	4c f5       	brge	.+82     	; 0x4300 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42ae:	69 8d       	ldd	r22, Y+25	; 0x19
    42b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    42b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    42b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    42b6:	20 e0       	ldi	r18, 0x00	; 0
    42b8:	30 e0       	ldi	r19, 0x00	; 0
    42ba:	40 e2       	ldi	r20, 0x20	; 32
    42bc:	51 e4       	ldi	r21, 0x41	; 65
    42be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42c2:	dc 01       	movw	r26, r24
    42c4:	cb 01       	movw	r24, r22
    42c6:	bc 01       	movw	r22, r24
    42c8:	cd 01       	movw	r24, r26
    42ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ce:	dc 01       	movw	r26, r24
    42d0:	cb 01       	movw	r24, r22
    42d2:	9c 8b       	std	Y+20, r25	; 0x14
    42d4:	8b 8b       	std	Y+19, r24	; 0x13
    42d6:	0f c0       	rjmp	.+30     	; 0x42f6 <LCD_displayCharacter+0x2ac>
    42d8:	88 ec       	ldi	r24, 0xC8	; 200
    42da:	90 e0       	ldi	r25, 0x00	; 0
    42dc:	9a 8b       	std	Y+18, r25	; 0x12
    42de:	89 8b       	std	Y+17, r24	; 0x11
    42e0:	89 89       	ldd	r24, Y+17	; 0x11
    42e2:	9a 89       	ldd	r25, Y+18	; 0x12
    42e4:	01 97       	sbiw	r24, 0x01	; 1
    42e6:	f1 f7       	brne	.-4      	; 0x42e4 <LCD_displayCharacter+0x29a>
    42e8:	9a 8b       	std	Y+18, r25	; 0x12
    42ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42ec:	8b 89       	ldd	r24, Y+19	; 0x13
    42ee:	9c 89       	ldd	r25, Y+20	; 0x14
    42f0:	01 97       	sbiw	r24, 0x01	; 1
    42f2:	9c 8b       	std	Y+20, r25	; 0x14
    42f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42f6:	8b 89       	ldd	r24, Y+19	; 0x13
    42f8:	9c 89       	ldd	r25, Y+20	; 0x14
    42fa:	00 97       	sbiw	r24, 0x00	; 0
    42fc:	69 f7       	brne	.-38     	; 0x42d8 <LCD_displayCharacter+0x28e>
    42fe:	14 c0       	rjmp	.+40     	; 0x4328 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4300:	6d 89       	ldd	r22, Y+21	; 0x15
    4302:	7e 89       	ldd	r23, Y+22	; 0x16
    4304:	8f 89       	ldd	r24, Y+23	; 0x17
    4306:	98 8d       	ldd	r25, Y+24	; 0x18
    4308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    430c:	dc 01       	movw	r26, r24
    430e:	cb 01       	movw	r24, r22
    4310:	9c 8b       	std	Y+20, r25	; 0x14
    4312:	8b 8b       	std	Y+19, r24	; 0x13
    4314:	8b 89       	ldd	r24, Y+19	; 0x13
    4316:	9c 89       	ldd	r25, Y+20	; 0x14
    4318:	98 8b       	std	Y+16, r25	; 0x10
    431a:	8f 87       	std	Y+15, r24	; 0x0f
    431c:	8f 85       	ldd	r24, Y+15	; 0x0f
    431e:	98 89       	ldd	r25, Y+16	; 0x10
    4320:	01 97       	sbiw	r24, 0x01	; 1
    4322:	f1 f7       	brne	.-4      	; 0x4320 <LCD_displayCharacter+0x2d6>
    4324:	98 8b       	std	Y+16, r25	; 0x10
    4326:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    4328:	82 e0       	ldi	r24, 0x02	; 2
    432a:	61 e0       	ldi	r22, 0x01	; 1
    432c:	40 e0       	ldi	r20, 0x00	; 0
    432e:	0e 94 bc 19 	call	0x3378	; 0x3378 <GPIO_writePin>
    4332:	80 e0       	ldi	r24, 0x00	; 0
    4334:	90 e0       	ldi	r25, 0x00	; 0
    4336:	a0 e8       	ldi	r26, 0x80	; 128
    4338:	bf e3       	ldi	r27, 0x3F	; 63
    433a:	8b 87       	std	Y+11, r24	; 0x0b
    433c:	9c 87       	std	Y+12, r25	; 0x0c
    433e:	ad 87       	std	Y+13, r26	; 0x0d
    4340:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4342:	6b 85       	ldd	r22, Y+11	; 0x0b
    4344:	7c 85       	ldd	r23, Y+12	; 0x0c
    4346:	8d 85       	ldd	r24, Y+13	; 0x0d
    4348:	9e 85       	ldd	r25, Y+14	; 0x0e
    434a:	20 e0       	ldi	r18, 0x00	; 0
    434c:	30 e0       	ldi	r19, 0x00	; 0
    434e:	4a ef       	ldi	r20, 0xFA	; 250
    4350:	54 e4       	ldi	r21, 0x44	; 68
    4352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4356:	dc 01       	movw	r26, r24
    4358:	cb 01       	movw	r24, r22
    435a:	8f 83       	std	Y+7, r24	; 0x07
    435c:	98 87       	std	Y+8, r25	; 0x08
    435e:	a9 87       	std	Y+9, r26	; 0x09
    4360:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4362:	6f 81       	ldd	r22, Y+7	; 0x07
    4364:	78 85       	ldd	r23, Y+8	; 0x08
    4366:	89 85       	ldd	r24, Y+9	; 0x09
    4368:	9a 85       	ldd	r25, Y+10	; 0x0a
    436a:	20 e0       	ldi	r18, 0x00	; 0
    436c:	30 e0       	ldi	r19, 0x00	; 0
    436e:	40 e8       	ldi	r20, 0x80	; 128
    4370:	5f e3       	ldi	r21, 0x3F	; 63
    4372:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4376:	88 23       	and	r24, r24
    4378:	2c f4       	brge	.+10     	; 0x4384 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    437a:	81 e0       	ldi	r24, 0x01	; 1
    437c:	90 e0       	ldi	r25, 0x00	; 0
    437e:	9e 83       	std	Y+6, r25	; 0x06
    4380:	8d 83       	std	Y+5, r24	; 0x05
    4382:	3f c0       	rjmp	.+126    	; 0x4402 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    4384:	6f 81       	ldd	r22, Y+7	; 0x07
    4386:	78 85       	ldd	r23, Y+8	; 0x08
    4388:	89 85       	ldd	r24, Y+9	; 0x09
    438a:	9a 85       	ldd	r25, Y+10	; 0x0a
    438c:	20 e0       	ldi	r18, 0x00	; 0
    438e:	3f ef       	ldi	r19, 0xFF	; 255
    4390:	4f e7       	ldi	r20, 0x7F	; 127
    4392:	57 e4       	ldi	r21, 0x47	; 71
    4394:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4398:	18 16       	cp	r1, r24
    439a:	4c f5       	brge	.+82     	; 0x43ee <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    439c:	6b 85       	ldd	r22, Y+11	; 0x0b
    439e:	7c 85       	ldd	r23, Y+12	; 0x0c
    43a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    43a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    43a4:	20 e0       	ldi	r18, 0x00	; 0
    43a6:	30 e0       	ldi	r19, 0x00	; 0
    43a8:	40 e2       	ldi	r20, 0x20	; 32
    43aa:	51 e4       	ldi	r21, 0x41	; 65
    43ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43b0:	dc 01       	movw	r26, r24
    43b2:	cb 01       	movw	r24, r22
    43b4:	bc 01       	movw	r22, r24
    43b6:	cd 01       	movw	r24, r26
    43b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43bc:	dc 01       	movw	r26, r24
    43be:	cb 01       	movw	r24, r22
    43c0:	9e 83       	std	Y+6, r25	; 0x06
    43c2:	8d 83       	std	Y+5, r24	; 0x05
    43c4:	0f c0       	rjmp	.+30     	; 0x43e4 <LCD_displayCharacter+0x39a>
    43c6:	88 ec       	ldi	r24, 0xC8	; 200
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	9c 83       	std	Y+4, r25	; 0x04
    43cc:	8b 83       	std	Y+3, r24	; 0x03
    43ce:	8b 81       	ldd	r24, Y+3	; 0x03
    43d0:	9c 81       	ldd	r25, Y+4	; 0x04
    43d2:	01 97       	sbiw	r24, 0x01	; 1
    43d4:	f1 f7       	brne	.-4      	; 0x43d2 <LCD_displayCharacter+0x388>
    43d6:	9c 83       	std	Y+4, r25	; 0x04
    43d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43da:	8d 81       	ldd	r24, Y+5	; 0x05
    43dc:	9e 81       	ldd	r25, Y+6	; 0x06
    43de:	01 97       	sbiw	r24, 0x01	; 1
    43e0:	9e 83       	std	Y+6, r25	; 0x06
    43e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43e4:	8d 81       	ldd	r24, Y+5	; 0x05
    43e6:	9e 81       	ldd	r25, Y+6	; 0x06
    43e8:	00 97       	sbiw	r24, 0x00	; 0
    43ea:	69 f7       	brne	.-38     	; 0x43c6 <LCD_displayCharacter+0x37c>
    43ec:	14 c0       	rjmp	.+40     	; 0x4416 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43ee:	6f 81       	ldd	r22, Y+7	; 0x07
    43f0:	78 85       	ldd	r23, Y+8	; 0x08
    43f2:	89 85       	ldd	r24, Y+9	; 0x09
    43f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    43f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43fa:	dc 01       	movw	r26, r24
    43fc:	cb 01       	movw	r24, r22
    43fe:	9e 83       	std	Y+6, r25	; 0x06
    4400:	8d 83       	std	Y+5, r24	; 0x05
    4402:	8d 81       	ldd	r24, Y+5	; 0x05
    4404:	9e 81       	ldd	r25, Y+6	; 0x06
    4406:	9a 83       	std	Y+2, r25	; 0x02
    4408:	89 83       	std	Y+1, r24	; 0x01
    440a:	89 81       	ldd	r24, Y+1	; 0x01
    440c:	9a 81       	ldd	r25, Y+2	; 0x02
    440e:	01 97       	sbiw	r24, 0x01	; 1
    4410:	f1 f7       	brne	.-4      	; 0x440e <LCD_displayCharacter+0x3c4>
    4412:	9a 83       	std	Y+2, r25	; 0x02
    4414:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    4416:	e9 96       	adiw	r28, 0x39	; 57
    4418:	0f b6       	in	r0, 0x3f	; 63
    441a:	f8 94       	cli
    441c:	de bf       	out	0x3e, r29	; 62
    441e:	0f be       	out	0x3f, r0	; 63
    4420:	cd bf       	out	0x3d, r28	; 61
    4422:	cf 91       	pop	r28
    4424:	df 91       	pop	r29
    4426:	08 95       	ret

00004428 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    4428:	df 93       	push	r29
    442a:	cf 93       	push	r28
    442c:	00 d0       	rcall	.+0      	; 0x442e <LCD_displayString+0x6>
    442e:	0f 92       	push	r0
    4430:	cd b7       	in	r28, 0x3d	; 61
    4432:	de b7       	in	r29, 0x3e	; 62
    4434:	9b 83       	std	Y+3, r25	; 0x03
    4436:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    4438:	19 82       	std	Y+1, r1	; 0x01
    443a:	0e c0       	rjmp	.+28     	; 0x4458 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    443c:	89 81       	ldd	r24, Y+1	; 0x01
    443e:	28 2f       	mov	r18, r24
    4440:	30 e0       	ldi	r19, 0x00	; 0
    4442:	8a 81       	ldd	r24, Y+2	; 0x02
    4444:	9b 81       	ldd	r25, Y+3	; 0x03
    4446:	fc 01       	movw	r30, r24
    4448:	e2 0f       	add	r30, r18
    444a:	f3 1f       	adc	r31, r19
    444c:	80 81       	ld	r24, Z
    444e:	0e 94 25 20 	call	0x404a	; 0x404a <LCD_displayCharacter>
		i++;
    4452:	89 81       	ldd	r24, Y+1	; 0x01
    4454:	8f 5f       	subi	r24, 0xFF	; 255
    4456:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    4458:	89 81       	ldd	r24, Y+1	; 0x01
    445a:	28 2f       	mov	r18, r24
    445c:	30 e0       	ldi	r19, 0x00	; 0
    445e:	8a 81       	ldd	r24, Y+2	; 0x02
    4460:	9b 81       	ldd	r25, Y+3	; 0x03
    4462:	fc 01       	movw	r30, r24
    4464:	e2 0f       	add	r30, r18
    4466:	f3 1f       	adc	r31, r19
    4468:	80 81       	ld	r24, Z
    446a:	88 23       	and	r24, r24
    446c:	39 f7       	brne	.-50     	; 0x443c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    446e:	0f 90       	pop	r0
    4470:	0f 90       	pop	r0
    4472:	0f 90       	pop	r0
    4474:	cf 91       	pop	r28
    4476:	df 91       	pop	r29
    4478:	08 95       	ret

0000447a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    447a:	df 93       	push	r29
    447c:	cf 93       	push	r28
    447e:	00 d0       	rcall	.+0      	; 0x4480 <LCD_moveCursor+0x6>
    4480:	00 d0       	rcall	.+0      	; 0x4482 <LCD_moveCursor+0x8>
    4482:	0f 92       	push	r0
    4484:	cd b7       	in	r28, 0x3d	; 61
    4486:	de b7       	in	r29, 0x3e	; 62
    4488:	8a 83       	std	Y+2, r24	; 0x02
    448a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    448c:	8a 81       	ldd	r24, Y+2	; 0x02
    448e:	28 2f       	mov	r18, r24
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	3d 83       	std	Y+5, r19	; 0x05
    4494:	2c 83       	std	Y+4, r18	; 0x04
    4496:	8c 81       	ldd	r24, Y+4	; 0x04
    4498:	9d 81       	ldd	r25, Y+5	; 0x05
    449a:	81 30       	cpi	r24, 0x01	; 1
    449c:	91 05       	cpc	r25, r1
    449e:	c1 f0       	breq	.+48     	; 0x44d0 <LCD_moveCursor+0x56>
    44a0:	2c 81       	ldd	r18, Y+4	; 0x04
    44a2:	3d 81       	ldd	r19, Y+5	; 0x05
    44a4:	22 30       	cpi	r18, 0x02	; 2
    44a6:	31 05       	cpc	r19, r1
    44a8:	2c f4       	brge	.+10     	; 0x44b4 <LCD_moveCursor+0x3a>
    44aa:	8c 81       	ldd	r24, Y+4	; 0x04
    44ac:	9d 81       	ldd	r25, Y+5	; 0x05
    44ae:	00 97       	sbiw	r24, 0x00	; 0
    44b0:	61 f0       	breq	.+24     	; 0x44ca <LCD_moveCursor+0x50>
    44b2:	19 c0       	rjmp	.+50     	; 0x44e6 <LCD_moveCursor+0x6c>
    44b4:	2c 81       	ldd	r18, Y+4	; 0x04
    44b6:	3d 81       	ldd	r19, Y+5	; 0x05
    44b8:	22 30       	cpi	r18, 0x02	; 2
    44ba:	31 05       	cpc	r19, r1
    44bc:	69 f0       	breq	.+26     	; 0x44d8 <LCD_moveCursor+0x5e>
    44be:	8c 81       	ldd	r24, Y+4	; 0x04
    44c0:	9d 81       	ldd	r25, Y+5	; 0x05
    44c2:	83 30       	cpi	r24, 0x03	; 3
    44c4:	91 05       	cpc	r25, r1
    44c6:	61 f0       	breq	.+24     	; 0x44e0 <LCD_moveCursor+0x66>
    44c8:	0e c0       	rjmp	.+28     	; 0x44e6 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    44ca:	8b 81       	ldd	r24, Y+3	; 0x03
    44cc:	89 83       	std	Y+1, r24	; 0x01
    44ce:	0b c0       	rjmp	.+22     	; 0x44e6 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    44d0:	8b 81       	ldd	r24, Y+3	; 0x03
    44d2:	80 5c       	subi	r24, 0xC0	; 192
    44d4:	89 83       	std	Y+1, r24	; 0x01
    44d6:	07 c0       	rjmp	.+14     	; 0x44e6 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    44d8:	8b 81       	ldd	r24, Y+3	; 0x03
    44da:	80 5f       	subi	r24, 0xF0	; 240
    44dc:	89 83       	std	Y+1, r24	; 0x01
    44de:	03 c0       	rjmp	.+6      	; 0x44e6 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    44e0:	8b 81       	ldd	r24, Y+3	; 0x03
    44e2:	80 5b       	subi	r24, 0xB0	; 176
    44e4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    44e6:	89 81       	ldd	r24, Y+1	; 0x01
    44e8:	80 68       	ori	r24, 0x80	; 128
    44ea:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <LCD_sendCommand>
}
    44ee:	0f 90       	pop	r0
    44f0:	0f 90       	pop	r0
    44f2:	0f 90       	pop	r0
    44f4:	0f 90       	pop	r0
    44f6:	0f 90       	pop	r0
    44f8:	cf 91       	pop	r28
    44fa:	df 91       	pop	r29
    44fc:	08 95       	ret

000044fe <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    44fe:	df 93       	push	r29
    4500:	cf 93       	push	r28
    4502:	00 d0       	rcall	.+0      	; 0x4504 <LCD_displayStringRowColumn+0x6>
    4504:	00 d0       	rcall	.+0      	; 0x4506 <LCD_displayStringRowColumn+0x8>
    4506:	cd b7       	in	r28, 0x3d	; 61
    4508:	de b7       	in	r29, 0x3e	; 62
    450a:	89 83       	std	Y+1, r24	; 0x01
    450c:	6a 83       	std	Y+2, r22	; 0x02
    450e:	5c 83       	std	Y+4, r21	; 0x04
    4510:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    4512:	89 81       	ldd	r24, Y+1	; 0x01
    4514:	6a 81       	ldd	r22, Y+2	; 0x02
    4516:	0e 94 3d 22 	call	0x447a	; 0x447a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    451a:	8b 81       	ldd	r24, Y+3	; 0x03
    451c:	9c 81       	ldd	r25, Y+4	; 0x04
    451e:	0e 94 14 22 	call	0x4428	; 0x4428 <LCD_displayString>
}
    4522:	0f 90       	pop	r0
    4524:	0f 90       	pop	r0
    4526:	0f 90       	pop	r0
    4528:	0f 90       	pop	r0
    452a:	cf 91       	pop	r28
    452c:	df 91       	pop	r29
    452e:	08 95       	ret

00004530 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    4530:	df 93       	push	r29
    4532:	cf 93       	push	r28
    4534:	cd b7       	in	r28, 0x3d	; 61
    4536:	de b7       	in	r29, 0x3e	; 62
    4538:	62 97       	sbiw	r28, 0x12	; 18
    453a:	0f b6       	in	r0, 0x3f	; 63
    453c:	f8 94       	cli
    453e:	de bf       	out	0x3e, r29	; 62
    4540:	0f be       	out	0x3f, r0	; 63
    4542:	cd bf       	out	0x3d, r28	; 61
    4544:	9a 8b       	std	Y+18, r25	; 0x12
    4546:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    4548:	89 89       	ldd	r24, Y+17	; 0x11
    454a:	9a 89       	ldd	r25, Y+18	; 0x12
    454c:	9e 01       	movw	r18, r28
    454e:	2f 5f       	subi	r18, 0xFF	; 255
    4550:	3f 4f       	sbci	r19, 0xFF	; 255
    4552:	b9 01       	movw	r22, r18
    4554:	4a e0       	ldi	r20, 0x0A	; 10
    4556:	50 e0       	ldi	r21, 0x00	; 0
    4558:	0e 94 64 24 	call	0x48c8	; 0x48c8 <itoa>
   LCD_displayString(buff); /* Display the string */
    455c:	ce 01       	movw	r24, r28
    455e:	01 96       	adiw	r24, 0x01	; 1
    4560:	0e 94 14 22 	call	0x4428	; 0x4428 <LCD_displayString>
}
    4564:	62 96       	adiw	r28, 0x12	; 18
    4566:	0f b6       	in	r0, 0x3f	; 63
    4568:	f8 94       	cli
    456a:	de bf       	out	0x3e, r29	; 62
    456c:	0f be       	out	0x3f, r0	; 63
    456e:	cd bf       	out	0x3d, r28	; 61
    4570:	cf 91       	pop	r28
    4572:	df 91       	pop	r29
    4574:	08 95       	ret

00004576 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    4576:	df 93       	push	r29
    4578:	cf 93       	push	r28
    457a:	cd b7       	in	r28, 0x3d	; 61
    457c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    457e:	81 e0       	ldi	r24, 0x01	; 1
    4580:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <LCD_sendCommand>
}
    4584:	cf 91       	pop	r28
    4586:	df 91       	pop	r29
    4588:	08 95       	ret

0000458a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    458a:	df 93       	push	r29
    458c:	cf 93       	push	r28
    458e:	00 d0       	rcall	.+0      	; 0x4590 <UART_init+0x6>
    4590:	00 d0       	rcall	.+0      	; 0x4592 <UART_init+0x8>
    4592:	cd b7       	in	r28, 0x3d	; 61
    4594:	de b7       	in	r29, 0x3e	; 62
    4596:	9c 83       	std	Y+4, r25	; 0x04
    4598:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    459a:	1a 82       	std	Y+2, r1	; 0x02
    459c:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    459e:	eb e2       	ldi	r30, 0x2B	; 43
    45a0:	f0 e0       	ldi	r31, 0x00	; 0
    45a2:	82 e0       	ldi	r24, 0x02	; 2
    45a4:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 is configured according to the chosen number of data bits
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	if (Config_Ptr->bit_data == nine_bit)
    45a6:	eb 81       	ldd	r30, Y+3	; 0x03
    45a8:	fc 81       	ldd	r31, Y+4	; 0x04
    45aa:	80 81       	ld	r24, Z
    45ac:	87 30       	cpi	r24, 0x07	; 7
    45ae:	29 f4       	brne	.+10     	; 0x45ba <UART_init+0x30>
		UCSRB = (1<<RXEN) | (1<<TXEN) | (1<<UCSZ2) | (1<<RXB8) | (1<<TXB8);
    45b0:	ea e2       	ldi	r30, 0x2A	; 42
    45b2:	f0 e0       	ldi	r31, 0x00	; 0
    45b4:	8f e1       	ldi	r24, 0x1F	; 31
    45b6:	80 83       	st	Z, r24
    45b8:	04 c0       	rjmp	.+8      	; 0x45c2 <UART_init+0x38>
	else
		UCSRB = (1<<RXEN) | (1<<TXEN);
    45ba:	ea e2       	ldi	r30, 0x2A	; 42
    45bc:	f0 e0       	ldi	r31, 0x00	; 0
    45be:	88 e1       	ldi	r24, 0x18	; 24
    45c0:	80 83       	st	Z, r24
	 * UPM1:0  Configurable
	 * USBS    Configurable
	 * UCSZ1:0 Configurable
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    45c2:	e0 e4       	ldi	r30, 0x40	; 64
    45c4:	f0 e0       	ldi	r31, 0x00	; 0
    45c6:	80 e8       	ldi	r24, 0x80	; 128
    45c8:	80 83       	st	Z, r24

	if (Config_Ptr->parity == disabled) {
    45ca:	eb 81       	ldd	r30, Y+3	; 0x03
    45cc:	fc 81       	ldd	r31, Y+4	; 0x04
    45ce:	81 81       	ldd	r24, Z+1	; 0x01
    45d0:	88 23       	and	r24, r24
    45d2:	79 f4       	brne	.+30     	; 0x45f2 <UART_init+0x68>
		CLEAR_BIT(UCSRC, UPM0);
    45d4:	a0 e4       	ldi	r26, 0x40	; 64
    45d6:	b0 e0       	ldi	r27, 0x00	; 0
    45d8:	e0 e4       	ldi	r30, 0x40	; 64
    45da:	f0 e0       	ldi	r31, 0x00	; 0
    45dc:	80 81       	ld	r24, Z
    45de:	8f 7e       	andi	r24, 0xEF	; 239
    45e0:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC, UPM1);
    45e2:	a0 e4       	ldi	r26, 0x40	; 64
    45e4:	b0 e0       	ldi	r27, 0x00	; 0
    45e6:	e0 e4       	ldi	r30, 0x40	; 64
    45e8:	f0 e0       	ldi	r31, 0x00	; 0
    45ea:	80 81       	ld	r24, Z
    45ec:	8f 7d       	andi	r24, 0xDF	; 223
    45ee:	8c 93       	st	X, r24
    45f0:	27 c0       	rjmp	.+78     	; 0x4640 <UART_init+0xb6>
	}
	else if (Config_Ptr->parity == even_parity) {
    45f2:	eb 81       	ldd	r30, Y+3	; 0x03
    45f4:	fc 81       	ldd	r31, Y+4	; 0x04
    45f6:	81 81       	ldd	r24, Z+1	; 0x01
    45f8:	82 30       	cpi	r24, 0x02	; 2
    45fa:	79 f4       	brne	.+30     	; 0x461a <UART_init+0x90>
		CLEAR_BIT(UCSRC, UPM0);
    45fc:	a0 e4       	ldi	r26, 0x40	; 64
    45fe:	b0 e0       	ldi	r27, 0x00	; 0
    4600:	e0 e4       	ldi	r30, 0x40	; 64
    4602:	f0 e0       	ldi	r31, 0x00	; 0
    4604:	80 81       	ld	r24, Z
    4606:	8f 7e       	andi	r24, 0xEF	; 239
    4608:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UPM1);
    460a:	a0 e4       	ldi	r26, 0x40	; 64
    460c:	b0 e0       	ldi	r27, 0x00	; 0
    460e:	e0 e4       	ldi	r30, 0x40	; 64
    4610:	f0 e0       	ldi	r31, 0x00	; 0
    4612:	80 81       	ld	r24, Z
    4614:	80 62       	ori	r24, 0x20	; 32
    4616:	8c 93       	st	X, r24
    4618:	13 c0       	rjmp	.+38     	; 0x4640 <UART_init+0xb6>
	}
	else if (Config_Ptr->parity == odd_parity) {
    461a:	eb 81       	ldd	r30, Y+3	; 0x03
    461c:	fc 81       	ldd	r31, Y+4	; 0x04
    461e:	81 81       	ldd	r24, Z+1	; 0x01
    4620:	83 30       	cpi	r24, 0x03	; 3
    4622:	71 f4       	brne	.+28     	; 0x4640 <UART_init+0xb6>
		SET_BIT(UCSRC, UPM0);
    4624:	a0 e4       	ldi	r26, 0x40	; 64
    4626:	b0 e0       	ldi	r27, 0x00	; 0
    4628:	e0 e4       	ldi	r30, 0x40	; 64
    462a:	f0 e0       	ldi	r31, 0x00	; 0
    462c:	80 81       	ld	r24, Z
    462e:	80 61       	ori	r24, 0x10	; 16
    4630:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UPM1);
    4632:	a0 e4       	ldi	r26, 0x40	; 64
    4634:	b0 e0       	ldi	r27, 0x00	; 0
    4636:	e0 e4       	ldi	r30, 0x40	; 64
    4638:	f0 e0       	ldi	r31, 0x00	; 0
    463a:	80 81       	ld	r24, Z
    463c:	80 62       	ori	r24, 0x20	; 32
    463e:	8c 93       	st	X, r24
	}
	
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bit)<<3);
    4640:	a0 e4       	ldi	r26, 0x40	; 64
    4642:	b0 e0       	ldi	r27, 0x00	; 0
    4644:	e0 e4       	ldi	r30, 0x40	; 64
    4646:	f0 e0       	ldi	r31, 0x00	; 0
    4648:	80 81       	ld	r24, Z
    464a:	28 2f       	mov	r18, r24
    464c:	27 7f       	andi	r18, 0xF7	; 247
    464e:	eb 81       	ldd	r30, Y+3	; 0x03
    4650:	fc 81       	ldd	r31, Y+4	; 0x04
    4652:	82 81       	ldd	r24, Z+2	; 0x02
    4654:	88 2f       	mov	r24, r24
    4656:	90 e0       	ldi	r25, 0x00	; 0
    4658:	88 0f       	add	r24, r24
    465a:	99 1f       	adc	r25, r25
    465c:	88 0f       	add	r24, r24
    465e:	99 1f       	adc	r25, r25
    4660:	88 0f       	add	r24, r24
    4662:	99 1f       	adc	r25, r25
    4664:	82 2b       	or	r24, r18
    4666:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF9) | (((Config_Ptr->bit_data) & 0x03)<<1);
    4668:	a0 e4       	ldi	r26, 0x40	; 64
    466a:	b0 e0       	ldi	r27, 0x00	; 0
    466c:	e0 e4       	ldi	r30, 0x40	; 64
    466e:	f0 e0       	ldi	r31, 0x00	; 0
    4670:	80 81       	ld	r24, Z
    4672:	28 2f       	mov	r18, r24
    4674:	29 7f       	andi	r18, 0xF9	; 249
    4676:	eb 81       	ldd	r30, Y+3	; 0x03
    4678:	fc 81       	ldd	r31, Y+4	; 0x04
    467a:	80 81       	ld	r24, Z
    467c:	88 2f       	mov	r24, r24
    467e:	90 e0       	ldi	r25, 0x00	; 0
    4680:	83 70       	andi	r24, 0x03	; 3
    4682:	90 70       	andi	r25, 0x00	; 0
    4684:	88 0f       	add	r24, r24
    4686:	99 1f       	adc	r25, r25
    4688:	82 2b       	or	r24, r18
    468a:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->UART_BaudRateType * 8UL))) - 1);
    468c:	eb 81       	ldd	r30, Y+3	; 0x03
    468e:	fc 81       	ldd	r31, Y+4	; 0x04
    4690:	83 81       	ldd	r24, Z+3	; 0x03
    4692:	94 81       	ldd	r25, Z+4	; 0x04
    4694:	a5 81       	ldd	r26, Z+5	; 0x05
    4696:	b6 81       	ldd	r27, Z+6	; 0x06
    4698:	88 0f       	add	r24, r24
    469a:	99 1f       	adc	r25, r25
    469c:	aa 1f       	adc	r26, r26
    469e:	bb 1f       	adc	r27, r27
    46a0:	88 0f       	add	r24, r24
    46a2:	99 1f       	adc	r25, r25
    46a4:	aa 1f       	adc	r26, r26
    46a6:	bb 1f       	adc	r27, r27
    46a8:	88 0f       	add	r24, r24
    46aa:	99 1f       	adc	r25, r25
    46ac:	aa 1f       	adc	r26, r26
    46ae:	bb 1f       	adc	r27, r27
    46b0:	9c 01       	movw	r18, r24
    46b2:	ad 01       	movw	r20, r26
    46b4:	80 e0       	ldi	r24, 0x00	; 0
    46b6:	92 e1       	ldi	r25, 0x12	; 18
    46b8:	aa e7       	ldi	r26, 0x7A	; 122
    46ba:	b0 e0       	ldi	r27, 0x00	; 0
    46bc:	bc 01       	movw	r22, r24
    46be:	cd 01       	movw	r24, r26
    46c0:	0e 94 0b 24 	call	0x4816	; 0x4816 <__udivmodsi4>
    46c4:	da 01       	movw	r26, r20
    46c6:	c9 01       	movw	r24, r18
    46c8:	01 97       	sbiw	r24, 0x01	; 1
    46ca:	9a 83       	std	Y+2, r25	; 0x02
    46cc:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    46ce:	e0 e4       	ldi	r30, 0x40	; 64
    46d0:	f0 e0       	ldi	r31, 0x00	; 0
    46d2:	89 81       	ldd	r24, Y+1	; 0x01
    46d4:	9a 81       	ldd	r25, Y+2	; 0x02
    46d6:	89 2f       	mov	r24, r25
    46d8:	99 27       	eor	r25, r25
    46da:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    46dc:	e9 e2       	ldi	r30, 0x29	; 41
    46de:	f0 e0       	ldi	r31, 0x00	; 0
    46e0:	89 81       	ldd	r24, Y+1	; 0x01
    46e2:	80 83       	st	Z, r24
}
    46e4:	0f 90       	pop	r0
    46e6:	0f 90       	pop	r0
    46e8:	0f 90       	pop	r0
    46ea:	0f 90       	pop	r0
    46ec:	cf 91       	pop	r28
    46ee:	df 91       	pop	r29
    46f0:	08 95       	ret

000046f2 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    46f2:	df 93       	push	r29
    46f4:	cf 93       	push	r28
    46f6:	0f 92       	push	r0
    46f8:	cd b7       	in	r28, 0x3d	; 61
    46fa:	de b7       	in	r29, 0x3e	; 62
    46fc:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    46fe:	eb e2       	ldi	r30, 0x2B	; 43
    4700:	f0 e0       	ldi	r31, 0x00	; 0
    4702:	80 81       	ld	r24, Z
    4704:	88 2f       	mov	r24, r24
    4706:	90 e0       	ldi	r25, 0x00	; 0
    4708:	80 72       	andi	r24, 0x20	; 32
    470a:	90 70       	andi	r25, 0x00	; 0
    470c:	00 97       	sbiw	r24, 0x00	; 0
    470e:	b9 f3       	breq	.-18     	; 0x46fe <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    4710:	ec e2       	ldi	r30, 0x2C	; 44
    4712:	f0 e0       	ldi	r31, 0x00	; 0
    4714:	89 81       	ldd	r24, Y+1	; 0x01
    4716:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    4718:	0f 90       	pop	r0
    471a:	cf 91       	pop	r28
    471c:	df 91       	pop	r29
    471e:	08 95       	ret

00004720 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    4720:	df 93       	push	r29
    4722:	cf 93       	push	r28
    4724:	cd b7       	in	r28, 0x3d	; 61
    4726:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    4728:	eb e2       	ldi	r30, 0x2B	; 43
    472a:	f0 e0       	ldi	r31, 0x00	; 0
    472c:	80 81       	ld	r24, Z
    472e:	88 23       	and	r24, r24
    4730:	dc f7       	brge	.-10     	; 0x4728 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    4732:	ec e2       	ldi	r30, 0x2C	; 44
    4734:	f0 e0       	ldi	r31, 0x00	; 0
    4736:	80 81       	ld	r24, Z
}
    4738:	cf 91       	pop	r28
    473a:	df 91       	pop	r29
    473c:	08 95       	ret

0000473e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    473e:	df 93       	push	r29
    4740:	cf 93       	push	r28
    4742:	00 d0       	rcall	.+0      	; 0x4744 <UART_sendString+0x6>
    4744:	0f 92       	push	r0
    4746:	cd b7       	in	r28, 0x3d	; 61
    4748:	de b7       	in	r29, 0x3e	; 62
    474a:	9b 83       	std	Y+3, r25	; 0x03
    474c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    474e:	19 82       	std	Y+1, r1	; 0x01
    4750:	0e c0       	rjmp	.+28     	; 0x476e <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    4752:	89 81       	ldd	r24, Y+1	; 0x01
    4754:	28 2f       	mov	r18, r24
    4756:	30 e0       	ldi	r19, 0x00	; 0
    4758:	8a 81       	ldd	r24, Y+2	; 0x02
    475a:	9b 81       	ldd	r25, Y+3	; 0x03
    475c:	fc 01       	movw	r30, r24
    475e:	e2 0f       	add	r30, r18
    4760:	f3 1f       	adc	r31, r19
    4762:	80 81       	ld	r24, Z
    4764:	0e 94 79 23 	call	0x46f2	; 0x46f2 <UART_sendByte>
		i++;
    4768:	89 81       	ldd	r24, Y+1	; 0x01
    476a:	8f 5f       	subi	r24, 0xFF	; 255
    476c:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    476e:	89 81       	ldd	r24, Y+1	; 0x01
    4770:	28 2f       	mov	r18, r24
    4772:	30 e0       	ldi	r19, 0x00	; 0
    4774:	8a 81       	ldd	r24, Y+2	; 0x02
    4776:	9b 81       	ldd	r25, Y+3	; 0x03
    4778:	fc 01       	movw	r30, r24
    477a:	e2 0f       	add	r30, r18
    477c:	f3 1f       	adc	r31, r19
    477e:	80 81       	ld	r24, Z
    4780:	88 23       	and	r24, r24
    4782:	39 f7       	brne	.-50     	; 0x4752 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    4784:	0f 90       	pop	r0
    4786:	0f 90       	pop	r0
    4788:	0f 90       	pop	r0
    478a:	cf 91       	pop	r28
    478c:	df 91       	pop	r29
    478e:	08 95       	ret

00004790 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    4790:	0f 93       	push	r16
    4792:	1f 93       	push	r17
    4794:	df 93       	push	r29
    4796:	cf 93       	push	r28
    4798:	00 d0       	rcall	.+0      	; 0x479a <UART_receiveString+0xa>
    479a:	0f 92       	push	r0
    479c:	cd b7       	in	r28, 0x3d	; 61
    479e:	de b7       	in	r29, 0x3e	; 62
    47a0:	9b 83       	std	Y+3, r25	; 0x03
    47a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    47a4:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    47a6:	89 81       	ldd	r24, Y+1	; 0x01
    47a8:	28 2f       	mov	r18, r24
    47aa:	30 e0       	ldi	r19, 0x00	; 0
    47ac:	8a 81       	ldd	r24, Y+2	; 0x02
    47ae:	9b 81       	ldd	r25, Y+3	; 0x03
    47b0:	8c 01       	movw	r16, r24
    47b2:	02 0f       	add	r16, r18
    47b4:	13 1f       	adc	r17, r19
    47b6:	0e 94 90 23 	call	0x4720	; 0x4720 <UART_recieveByte>
    47ba:	f8 01       	movw	r30, r16
    47bc:	80 83       	st	Z, r24
    47be:	0f c0       	rjmp	.+30     	; 0x47de <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    47c0:	89 81       	ldd	r24, Y+1	; 0x01
    47c2:	8f 5f       	subi	r24, 0xFF	; 255
    47c4:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    47c6:	89 81       	ldd	r24, Y+1	; 0x01
    47c8:	28 2f       	mov	r18, r24
    47ca:	30 e0       	ldi	r19, 0x00	; 0
    47cc:	8a 81       	ldd	r24, Y+2	; 0x02
    47ce:	9b 81       	ldd	r25, Y+3	; 0x03
    47d0:	8c 01       	movw	r16, r24
    47d2:	02 0f       	add	r16, r18
    47d4:	13 1f       	adc	r17, r19
    47d6:	0e 94 90 23 	call	0x4720	; 0x4720 <UART_recieveByte>
    47da:	f8 01       	movw	r30, r16
    47dc:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    47de:	89 81       	ldd	r24, Y+1	; 0x01
    47e0:	28 2f       	mov	r18, r24
    47e2:	30 e0       	ldi	r19, 0x00	; 0
    47e4:	8a 81       	ldd	r24, Y+2	; 0x02
    47e6:	9b 81       	ldd	r25, Y+3	; 0x03
    47e8:	fc 01       	movw	r30, r24
    47ea:	e2 0f       	add	r30, r18
    47ec:	f3 1f       	adc	r31, r19
    47ee:	80 81       	ld	r24, Z
    47f0:	83 32       	cpi	r24, 0x23	; 35
    47f2:	31 f7       	brne	.-52     	; 0x47c0 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    47f4:	89 81       	ldd	r24, Y+1	; 0x01
    47f6:	28 2f       	mov	r18, r24
    47f8:	30 e0       	ldi	r19, 0x00	; 0
    47fa:	8a 81       	ldd	r24, Y+2	; 0x02
    47fc:	9b 81       	ldd	r25, Y+3	; 0x03
    47fe:	fc 01       	movw	r30, r24
    4800:	e2 0f       	add	r30, r18
    4802:	f3 1f       	adc	r31, r19
    4804:	10 82       	st	Z, r1
}
    4806:	0f 90       	pop	r0
    4808:	0f 90       	pop	r0
    480a:	0f 90       	pop	r0
    480c:	cf 91       	pop	r28
    480e:	df 91       	pop	r29
    4810:	1f 91       	pop	r17
    4812:	0f 91       	pop	r16
    4814:	08 95       	ret

00004816 <__udivmodsi4>:
    4816:	a1 e2       	ldi	r26, 0x21	; 33
    4818:	1a 2e       	mov	r1, r26
    481a:	aa 1b       	sub	r26, r26
    481c:	bb 1b       	sub	r27, r27
    481e:	fd 01       	movw	r30, r26
    4820:	0d c0       	rjmp	.+26     	; 0x483c <__udivmodsi4_ep>

00004822 <__udivmodsi4_loop>:
    4822:	aa 1f       	adc	r26, r26
    4824:	bb 1f       	adc	r27, r27
    4826:	ee 1f       	adc	r30, r30
    4828:	ff 1f       	adc	r31, r31
    482a:	a2 17       	cp	r26, r18
    482c:	b3 07       	cpc	r27, r19
    482e:	e4 07       	cpc	r30, r20
    4830:	f5 07       	cpc	r31, r21
    4832:	20 f0       	brcs	.+8      	; 0x483c <__udivmodsi4_ep>
    4834:	a2 1b       	sub	r26, r18
    4836:	b3 0b       	sbc	r27, r19
    4838:	e4 0b       	sbc	r30, r20
    483a:	f5 0b       	sbc	r31, r21

0000483c <__udivmodsi4_ep>:
    483c:	66 1f       	adc	r22, r22
    483e:	77 1f       	adc	r23, r23
    4840:	88 1f       	adc	r24, r24
    4842:	99 1f       	adc	r25, r25
    4844:	1a 94       	dec	r1
    4846:	69 f7       	brne	.-38     	; 0x4822 <__udivmodsi4_loop>
    4848:	60 95       	com	r22
    484a:	70 95       	com	r23
    484c:	80 95       	com	r24
    484e:	90 95       	com	r25
    4850:	9b 01       	movw	r18, r22
    4852:	ac 01       	movw	r20, r24
    4854:	bd 01       	movw	r22, r26
    4856:	cf 01       	movw	r24, r30
    4858:	08 95       	ret

0000485a <__prologue_saves__>:
    485a:	2f 92       	push	r2
    485c:	3f 92       	push	r3
    485e:	4f 92       	push	r4
    4860:	5f 92       	push	r5
    4862:	6f 92       	push	r6
    4864:	7f 92       	push	r7
    4866:	8f 92       	push	r8
    4868:	9f 92       	push	r9
    486a:	af 92       	push	r10
    486c:	bf 92       	push	r11
    486e:	cf 92       	push	r12
    4870:	df 92       	push	r13
    4872:	ef 92       	push	r14
    4874:	ff 92       	push	r15
    4876:	0f 93       	push	r16
    4878:	1f 93       	push	r17
    487a:	cf 93       	push	r28
    487c:	df 93       	push	r29
    487e:	cd b7       	in	r28, 0x3d	; 61
    4880:	de b7       	in	r29, 0x3e	; 62
    4882:	ca 1b       	sub	r28, r26
    4884:	db 0b       	sbc	r29, r27
    4886:	0f b6       	in	r0, 0x3f	; 63
    4888:	f8 94       	cli
    488a:	de bf       	out	0x3e, r29	; 62
    488c:	0f be       	out	0x3f, r0	; 63
    488e:	cd bf       	out	0x3d, r28	; 61
    4890:	09 94       	ijmp

00004892 <__epilogue_restores__>:
    4892:	2a 88       	ldd	r2, Y+18	; 0x12
    4894:	39 88       	ldd	r3, Y+17	; 0x11
    4896:	48 88       	ldd	r4, Y+16	; 0x10
    4898:	5f 84       	ldd	r5, Y+15	; 0x0f
    489a:	6e 84       	ldd	r6, Y+14	; 0x0e
    489c:	7d 84       	ldd	r7, Y+13	; 0x0d
    489e:	8c 84       	ldd	r8, Y+12	; 0x0c
    48a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    48a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    48a4:	b9 84       	ldd	r11, Y+9	; 0x09
    48a6:	c8 84       	ldd	r12, Y+8	; 0x08
    48a8:	df 80       	ldd	r13, Y+7	; 0x07
    48aa:	ee 80       	ldd	r14, Y+6	; 0x06
    48ac:	fd 80       	ldd	r15, Y+5	; 0x05
    48ae:	0c 81       	ldd	r16, Y+4	; 0x04
    48b0:	1b 81       	ldd	r17, Y+3	; 0x03
    48b2:	aa 81       	ldd	r26, Y+2	; 0x02
    48b4:	b9 81       	ldd	r27, Y+1	; 0x01
    48b6:	ce 0f       	add	r28, r30
    48b8:	d1 1d       	adc	r29, r1
    48ba:	0f b6       	in	r0, 0x3f	; 63
    48bc:	f8 94       	cli
    48be:	de bf       	out	0x3e, r29	; 62
    48c0:	0f be       	out	0x3f, r0	; 63
    48c2:	cd bf       	out	0x3d, r28	; 61
    48c4:	ed 01       	movw	r28, r26
    48c6:	08 95       	ret

000048c8 <itoa>:
    48c8:	fb 01       	movw	r30, r22
    48ca:	9f 01       	movw	r18, r30
    48cc:	e8 94       	clt
    48ce:	42 30       	cpi	r20, 0x02	; 2
    48d0:	c4 f0       	brlt	.+48     	; 0x4902 <itoa+0x3a>
    48d2:	45 32       	cpi	r20, 0x25	; 37
    48d4:	b4 f4       	brge	.+44     	; 0x4902 <itoa+0x3a>
    48d6:	4a 30       	cpi	r20, 0x0A	; 10
    48d8:	29 f4       	brne	.+10     	; 0x48e4 <itoa+0x1c>
    48da:	97 fb       	bst	r25, 7
    48dc:	1e f4       	brtc	.+6      	; 0x48e4 <itoa+0x1c>
    48de:	90 95       	com	r25
    48e0:	81 95       	neg	r24
    48e2:	9f 4f       	sbci	r25, 0xFF	; 255
    48e4:	64 2f       	mov	r22, r20
    48e6:	77 27       	eor	r23, r23
    48e8:	0e 94 95 24 	call	0x492a	; 0x492a <__udivmodhi4>
    48ec:	80 5d       	subi	r24, 0xD0	; 208
    48ee:	8a 33       	cpi	r24, 0x3A	; 58
    48f0:	0c f0       	brlt	.+2      	; 0x48f4 <itoa+0x2c>
    48f2:	89 5d       	subi	r24, 0xD9	; 217
    48f4:	81 93       	st	Z+, r24
    48f6:	cb 01       	movw	r24, r22
    48f8:	00 97       	sbiw	r24, 0x00	; 0
    48fa:	a1 f7       	brne	.-24     	; 0x48e4 <itoa+0x1c>
    48fc:	16 f4       	brtc	.+4      	; 0x4902 <itoa+0x3a>
    48fe:	5d e2       	ldi	r21, 0x2D	; 45
    4900:	51 93       	st	Z+, r21
    4902:	10 82       	st	Z, r1
    4904:	c9 01       	movw	r24, r18
    4906:	0c 94 85 24 	jmp	0x490a	; 0x490a <strrev>

0000490a <strrev>:
    490a:	dc 01       	movw	r26, r24
    490c:	fc 01       	movw	r30, r24
    490e:	67 2f       	mov	r22, r23
    4910:	71 91       	ld	r23, Z+
    4912:	77 23       	and	r23, r23
    4914:	e1 f7       	brne	.-8      	; 0x490e <strrev+0x4>
    4916:	32 97       	sbiw	r30, 0x02	; 2
    4918:	04 c0       	rjmp	.+8      	; 0x4922 <strrev+0x18>
    491a:	7c 91       	ld	r23, X
    491c:	6d 93       	st	X+, r22
    491e:	70 83       	st	Z, r23
    4920:	62 91       	ld	r22, -Z
    4922:	ae 17       	cp	r26, r30
    4924:	bf 07       	cpc	r27, r31
    4926:	c8 f3       	brcs	.-14     	; 0x491a <strrev+0x10>
    4928:	08 95       	ret

0000492a <__udivmodhi4>:
    492a:	aa 1b       	sub	r26, r26
    492c:	bb 1b       	sub	r27, r27
    492e:	51 e1       	ldi	r21, 0x11	; 17
    4930:	07 c0       	rjmp	.+14     	; 0x4940 <__udivmodhi4_ep>

00004932 <__udivmodhi4_loop>:
    4932:	aa 1f       	adc	r26, r26
    4934:	bb 1f       	adc	r27, r27
    4936:	a6 17       	cp	r26, r22
    4938:	b7 07       	cpc	r27, r23
    493a:	10 f0       	brcs	.+4      	; 0x4940 <__udivmodhi4_ep>
    493c:	a6 1b       	sub	r26, r22
    493e:	b7 0b       	sbc	r27, r23

00004940 <__udivmodhi4_ep>:
    4940:	88 1f       	adc	r24, r24
    4942:	99 1f       	adc	r25, r25
    4944:	5a 95       	dec	r21
    4946:	a9 f7       	brne	.-22     	; 0x4932 <__udivmodhi4_loop>
    4948:	80 95       	com	r24
    494a:	90 95       	com	r25
    494c:	bc 01       	movw	r22, r24
    494e:	cd 01       	movw	r24, r26
    4950:	08 95       	ret

00004952 <_exit>:
    4952:	f8 94       	cli

00004954 <__stop_program>:
    4954:	ff cf       	rjmp	.-2      	; 0x4954 <__stop_program>
