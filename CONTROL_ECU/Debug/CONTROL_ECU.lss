
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003476  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00003476  0000350a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800070  00800070  0000351a  2**0
                  ALLOC
  3 .stab         00003174  00000000  00000000  0000351c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001365  00000000  00000000  00006690  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000079f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007b35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000098ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a7d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b588  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b6e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b975  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c143  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 32 12 	jmp	0x2464	; 0x2464 <__vector_4>
      14:	0c 94 99 11 	jmp	0x2332	; 0x2332 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__vector_9>
      28:	0c 94 cc 11 	jmp	0x2398	; 0x2398 <__vector_10>
      2c:	0c 94 33 11 	jmp	0x2266	; 0x2266 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 37       	cpi	r26, 0x72	; 114
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cc 05 	call	0xb98	; 0xb98 <main>
      8a:	0c 94 39 1a 	jmp	0x3472	; 0x3472 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1e 1a 	jmp	0x343c	; 0x343c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2a 1a 	jmp	0x3454	; 0x3454 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2a 1a 	jmp	0x3454	; 0x3454 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1e 1a 	jmp	0x343c	; 0x343c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2a 1a 	jmp	0x3454	; 0x3454 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2a 1a 	jmp	0x3454	; 0x3454 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2a 1a 	jmp	0x3454	; 0x3454 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 12 1a 	jmp	0x3424	; 0x3424 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2e 1a 	jmp	0x345c	; 0x345c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
 *  Author: Mahmoud Hashish
 */

#include "Buzzer.h"

void Buzzer_init(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* Initializes the buzzer pin direction and turns off the buzzer */
	GPIO_setupPinDirection(PORTC_ID, PIN7_ID, LOGIC_HIGH);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 ae 14 	call	0x295c	; 0x295c <GPIO_setupPinDirection>
	GPIO_writePin(PORTC_ID, PIN7_ID, LOGIC_LOW);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 99 15 	call	0x2b32	; 0x2b32 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:
void Buzzer_on(void) {
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	/* Activates the buzzer */
	GPIO_writePin(PORTC_ID, PIN7_ID, LOGIC_HIGH);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	67 e0       	ldi	r22, 0x07	; 7
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 99 15 	call	0x2b32	; 0x2b32 <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:
void Buzzer_off(void) {
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	/* Deactivates the buzzer */
	GPIO_writePin(PORTC_ID, PIN7_ID, LOGIC_LOW);
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	67 e0       	ldi	r22, 0x07	; 7
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 99 15 	call	0x2b32	; 0x2b32 <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <main>:
		Timer_deInit(TIMER1);
		DcMotor_Rotate(STOP, 100);
	}
}
*/
int main() {
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	df 93       	push	r29
     b9e:	cf 93       	push	r28
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
     ba4:	c8 5e       	subi	r28, 0xE8	; 232
     ba6:	d0 40       	sbci	r29, 0x00	; 0
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	cd bf       	out	0x3d, r28	; 61

	uint8 flag = 0, Action, flag1 = 0, PIR_State, flag2 = 0;
     bb2:	fe 01       	movw	r30, r28
     bb4:	ea 53       	subi	r30, 0x3A	; 58
     bb6:	ff 4f       	sbci	r31, 0xFF	; 255
     bb8:	10 82       	st	Z, r1
     bba:	fe 01       	movw	r30, r28
     bbc:	ec 53       	subi	r30, 0x3C	; 60
     bbe:	ff 4f       	sbci	r31, 0xFF	; 255
     bc0:	10 82       	st	Z, r1
     bc2:	fe 01       	movw	r30, r28
     bc4:	ee 53       	subi	r30, 0x3E	; 62
     bc6:	ff 4f       	sbci	r31, 0xFF	; 255
     bc8:	10 82       	st	Z, r1
	uint8 pass1[5], pass2[5], new_pass[5], saved_pass[5];
	uint8 wrong_pass = 0, correct_pass = 1, error_Check;
     bca:	fe 01       	movw	r30, r28
     bcc:	ef 53       	subi	r30, 0x3F	; 63
     bce:	ff 4f       	sbci	r31, 0xFF	; 255
     bd0:	10 82       	st	Z, r1
     bd2:	fe 01       	movw	r30, r28
     bd4:	e0 54       	subi	r30, 0x40	; 64
     bd6:	ff 4f       	sbci	r31, 0xFF	; 255
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	80 83       	st	Z, r24
	uint8 object_Detected = 1, no_Object_Detected = 0;
     bdc:	fe 01       	movw	r30, r28
     bde:	e2 54       	subi	r30, 0x42	; 66
     be0:	ff 4f       	sbci	r31, 0xFF	; 255
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	80 83       	st	Z, r24
     be6:	fe 01       	movw	r30, r28
     be8:	e3 54       	subi	r30, 0x43	; 67
     bea:	ff 4f       	sbci	r31, 0xFF	; 255
     bec:	10 82       	st	Z, r1
	UART_ConfigType UART_Config = {eight_bit, disabled, one_bit, 9600};
     bee:	ce 01       	movw	r24, r28
     bf0:	85 52       	subi	r24, 0x25	; 37
     bf2:	9f 4f       	sbci	r25, 0xFF	; 255
     bf4:	cc 51       	subi	r28, 0x1C	; 28
     bf6:	df 4f       	sbci	r29, 0xFF	; 255
     bf8:	99 83       	std	Y+1, r25	; 0x01
     bfa:	88 83       	st	Y, r24
     bfc:	c4 5e       	subi	r28, 0xE4	; 228
     bfe:	d0 40       	sbci	r29, 0x00	; 0
     c00:	88 e6       	ldi	r24, 0x68	; 104
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	ca 51       	subi	r28, 0x1A	; 26
     c06:	df 4f       	sbci	r29, 0xFF	; 255
     c08:	99 83       	std	Y+1, r25	; 0x01
     c0a:	88 83       	st	Y, r24
     c0c:	c6 5e       	subi	r28, 0xE6	; 230
     c0e:	d0 40       	sbci	r29, 0x00	; 0
     c10:	97 e0       	ldi	r25, 0x07	; 7
     c12:	c8 51       	subi	r28, 0x18	; 24
     c14:	df 4f       	sbci	r29, 0xFF	; 255
     c16:	98 83       	st	Y, r25
     c18:	c8 5e       	subi	r28, 0xE8	; 232
     c1a:	d0 40       	sbci	r29, 0x00	; 0
     c1c:	ca 51       	subi	r28, 0x1A	; 26
     c1e:	df 4f       	sbci	r29, 0xFF	; 255
     c20:	e8 81       	ld	r30, Y
     c22:	f9 81       	ldd	r31, Y+1	; 0x01
     c24:	c6 5e       	subi	r28, 0xE6	; 230
     c26:	d0 40       	sbci	r29, 0x00	; 0
     c28:	00 80       	ld	r0, Z
     c2a:	ca 51       	subi	r28, 0x1A	; 26
     c2c:	df 4f       	sbci	r29, 0xFF	; 255
     c2e:	88 81       	ld	r24, Y
     c30:	99 81       	ldd	r25, Y+1	; 0x01
     c32:	c6 5e       	subi	r28, 0xE6	; 230
     c34:	d0 40       	sbci	r29, 0x00	; 0
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	ca 51       	subi	r28, 0x1A	; 26
     c3a:	df 4f       	sbci	r29, 0xFF	; 255
     c3c:	99 83       	std	Y+1, r25	; 0x01
     c3e:	88 83       	st	Y, r24
     c40:	c6 5e       	subi	r28, 0xE6	; 230
     c42:	d0 40       	sbci	r29, 0x00	; 0
     c44:	cc 51       	subi	r28, 0x1C	; 28
     c46:	df 4f       	sbci	r29, 0xFF	; 255
     c48:	e8 81       	ld	r30, Y
     c4a:	f9 81       	ldd	r31, Y+1	; 0x01
     c4c:	c4 5e       	subi	r28, 0xE4	; 228
     c4e:	d0 40       	sbci	r29, 0x00	; 0
     c50:	00 82       	st	Z, r0
     c52:	cc 51       	subi	r28, 0x1C	; 28
     c54:	df 4f       	sbci	r29, 0xFF	; 255
     c56:	88 81       	ld	r24, Y
     c58:	99 81       	ldd	r25, Y+1	; 0x01
     c5a:	c4 5e       	subi	r28, 0xE4	; 228
     c5c:	d0 40       	sbci	r29, 0x00	; 0
     c5e:	01 96       	adiw	r24, 0x01	; 1
     c60:	cc 51       	subi	r28, 0x1C	; 28
     c62:	df 4f       	sbci	r29, 0xFF	; 255
     c64:	99 83       	std	Y+1, r25	; 0x01
     c66:	88 83       	st	Y, r24
     c68:	c4 5e       	subi	r28, 0xE4	; 228
     c6a:	d0 40       	sbci	r29, 0x00	; 0
     c6c:	c8 51       	subi	r28, 0x18	; 24
     c6e:	df 4f       	sbci	r29, 0xFF	; 255
     c70:	98 81       	ld	r25, Y
     c72:	c8 5e       	subi	r28, 0xE8	; 232
     c74:	d0 40       	sbci	r29, 0x00	; 0
     c76:	91 50       	subi	r25, 0x01	; 1
     c78:	c8 51       	subi	r28, 0x18	; 24
     c7a:	df 4f       	sbci	r29, 0xFF	; 255
     c7c:	98 83       	st	Y, r25
     c7e:	c8 5e       	subi	r28, 0xE8	; 232
     c80:	d0 40       	sbci	r29, 0x00	; 0
     c82:	c8 51       	subi	r28, 0x18	; 24
     c84:	df 4f       	sbci	r29, 0xFF	; 255
     c86:	e8 81       	ld	r30, Y
     c88:	c8 5e       	subi	r28, 0xE8	; 232
     c8a:	d0 40       	sbci	r29, 0x00	; 0
     c8c:	ee 23       	and	r30, r30
     c8e:	31 f6       	brne	.-116    	; 0xc1c <main+0x84>
	TWI_ConfigType TWI_Config = {2, F_CPU_1};
     c90:	fe 01       	movw	r30, r28
     c92:	ee 51       	subi	r30, 0x1E	; 30
     c94:	ff 4f       	sbci	r31, 0xFF	; 255
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	80 83       	st	Z, r24
     c9a:	fe 01       	movw	r30, r28
     c9c:	ee 51       	subi	r30, 0x1E	; 30
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ca0:	11 82       	std	Z+1, r1	; 0x01

	UART_init(&UART_Config);
     ca2:	ce 01       	movw	r24, r28
     ca4:	85 52       	subi	r24, 0x25	; 37
     ca6:	9f 4f       	sbci	r25, 0xFF	; 255
     ca8:	0e 94 73 18 	call	0x30e6	; 0x30e6 <UART_init>
	TWI_init(&TWI_Config);
     cac:	ce 01       	movw	r24, r28
     cae:	8e 51       	subi	r24, 0x1E	; 30
     cb0:	9f 4f       	sbci	r25, 0xFF	; 255
     cb2:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <TWI_init>
	Buzzer_init();
     cb6:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
	DcMotor_Init();
     cba:	0e 94 6f 10 	call	0x20de	; 0x20de <DcMotor_Init>
	PIR_init();
     cbe:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <PIR_init>
	while(1) {
		/* Receive the first password from HMI_ECU */
		for (int i = 0; i < 5; i++) {
     cc2:	fe 01       	movw	r30, r28
     cc4:	e5 54       	subi	r30, 0x45	; 69
     cc6:	ff 4f       	sbci	r31, 0xFF	; 255
     cc8:	11 82       	std	Z+1, r1	; 0x01
     cca:	10 82       	st	Z, r1
     ccc:	1b c0       	rjmp	.+54     	; 0xd04 <main+0x16c>
			pass1[i] = UART_recieveByte();
     cce:	fe 01       	movw	r30, r28
     cd0:	e5 54       	subi	r30, 0x45	; 69
     cd2:	ff 4f       	sbci	r31, 0xFF	; 255
     cd4:	00 81       	ld	r16, Z
     cd6:	11 81       	ldd	r17, Z+1	; 0x01
     cd8:	0e 94 3e 19 	call	0x327c	; 0x327c <UART_recieveByte>
     cdc:	28 2f       	mov	r18, r24
     cde:	ce 01       	movw	r24, r28
     ce0:	89 53       	subi	r24, 0x39	; 57
     ce2:	9f 4f       	sbci	r25, 0xFF	; 255
     ce4:	fc 01       	movw	r30, r24
     ce6:	e0 0f       	add	r30, r16
     ce8:	f1 1f       	adc	r31, r17
     cea:	20 83       	st	Z, r18
	Buzzer_init();
	DcMotor_Init();
	PIR_init();
	while(1) {
		/* Receive the first password from HMI_ECU */
		for (int i = 0; i < 5; i++) {
     cec:	de 01       	movw	r26, r28
     cee:	a5 54       	subi	r26, 0x45	; 69
     cf0:	bf 4f       	sbci	r27, 0xFF	; 255
     cf2:	fe 01       	movw	r30, r28
     cf4:	e5 54       	subi	r30, 0x45	; 69
     cf6:	ff 4f       	sbci	r31, 0xFF	; 255
     cf8:	80 81       	ld	r24, Z
     cfa:	91 81       	ldd	r25, Z+1	; 0x01
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	9c 93       	st	X, r25
     d02:	8e 93       	st	-X, r24
     d04:	fe 01       	movw	r30, r28
     d06:	e5 54       	subi	r30, 0x45	; 69
     d08:	ff 4f       	sbci	r31, 0xFF	; 255
     d0a:	80 81       	ld	r24, Z
     d0c:	91 81       	ldd	r25, Z+1	; 0x01
     d0e:	85 30       	cpi	r24, 0x05	; 5
     d10:	91 05       	cpc	r25, r1
     d12:	ec f2       	brlt	.-70     	; 0xcce <main+0x136>
     d14:	fe 01       	movw	r30, r28
     d16:	eb 55       	subi	r30, 0x5B	; 91
     d18:	ff 4f       	sbci	r31, 0xFF	; 255
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	a0 e2       	ldi	r26, 0x20	; 32
     d20:	b1 e4       	ldi	r27, 0x41	; 65
     d22:	80 83       	st	Z, r24
     d24:	91 83       	std	Z+1, r25	; 0x01
     d26:	a2 83       	std	Z+2, r26	; 0x02
     d28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d2a:	8e 01       	movw	r16, r28
     d2c:	0f 55       	subi	r16, 0x5F	; 95
     d2e:	1f 4f       	sbci	r17, 0xFF	; 255
     d30:	fe 01       	movw	r30, r28
     d32:	eb 55       	subi	r30, 0x5B	; 91
     d34:	ff 4f       	sbci	r31, 0xFF	; 255
     d36:	60 81       	ld	r22, Z
     d38:	71 81       	ldd	r23, Z+1	; 0x01
     d3a:	82 81       	ldd	r24, Z+2	; 0x02
     d3c:	93 81       	ldd	r25, Z+3	; 0x03
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	4a ef       	ldi	r20, 0xFA	; 250
     d44:	54 e4       	ldi	r21, 0x44	; 68
     d46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d4a:	dc 01       	movw	r26, r24
     d4c:	cb 01       	movw	r24, r22
     d4e:	f8 01       	movw	r30, r16
     d50:	80 83       	st	Z, r24
     d52:	91 83       	std	Z+1, r25	; 0x01
     d54:	a2 83       	std	Z+2, r26	; 0x02
     d56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d58:	fe 01       	movw	r30, r28
     d5a:	ef 55       	subi	r30, 0x5F	; 95
     d5c:	ff 4f       	sbci	r31, 0xFF	; 255
     d5e:	60 81       	ld	r22, Z
     d60:	71 81       	ldd	r23, Z+1	; 0x01
     d62:	82 81       	ldd	r24, Z+2	; 0x02
     d64:	93 81       	ldd	r25, Z+3	; 0x03
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	40 e8       	ldi	r20, 0x80	; 128
     d6c:	5f e3       	ldi	r21, 0x3F	; 63
     d6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d72:	88 23       	and	r24, r24
     d74:	44 f4       	brge	.+16     	; 0xd86 <main+0x1ee>
		__ticks = 1;
     d76:	fe 01       	movw	r30, r28
     d78:	e1 56       	subi	r30, 0x61	; 97
     d7a:	ff 4f       	sbci	r31, 0xFF	; 255
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	91 83       	std	Z+1, r25	; 0x01
     d82:	80 83       	st	Z, r24
     d84:	64 c0       	rjmp	.+200    	; 0xe4e <main+0x2b6>
	else if (__tmp > 65535)
     d86:	fe 01       	movw	r30, r28
     d88:	ef 55       	subi	r30, 0x5F	; 95
     d8a:	ff 4f       	sbci	r31, 0xFF	; 255
     d8c:	60 81       	ld	r22, Z
     d8e:	71 81       	ldd	r23, Z+1	; 0x01
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	3f ef       	ldi	r19, 0xFF	; 255
     d98:	4f e7       	ldi	r20, 0x7F	; 127
     d9a:	57 e4       	ldi	r21, 0x47	; 71
     d9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     da0:	18 16       	cp	r1, r24
     da2:	0c f0       	brlt	.+2      	; 0xda6 <main+0x20e>
     da4:	43 c0       	rjmp	.+134    	; 0xe2c <main+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da6:	fe 01       	movw	r30, r28
     da8:	eb 55       	subi	r30, 0x5B	; 91
     daa:	ff 4f       	sbci	r31, 0xFF	; 255
     dac:	60 81       	ld	r22, Z
     dae:	71 81       	ldd	r23, Z+1	; 0x01
     db0:	82 81       	ldd	r24, Z+2	; 0x02
     db2:	93 81       	ldd	r25, Z+3	; 0x03
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	40 e2       	ldi	r20, 0x20	; 32
     dba:	51 e4       	ldi	r21, 0x41	; 65
     dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc0:	dc 01       	movw	r26, r24
     dc2:	cb 01       	movw	r24, r22
     dc4:	8e 01       	movw	r16, r28
     dc6:	01 56       	subi	r16, 0x61	; 97
     dc8:	1f 4f       	sbci	r17, 0xFF	; 255
     dca:	bc 01       	movw	r22, r24
     dcc:	cd 01       	movw	r24, r26
     dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	f8 01       	movw	r30, r16
     dd8:	91 83       	std	Z+1, r25	; 0x01
     dda:	80 83       	st	Z, r24
     ddc:	1f c0       	rjmp	.+62     	; 0xe1c <main+0x284>
     dde:	fe 01       	movw	r30, r28
     de0:	e3 56       	subi	r30, 0x63	; 99
     de2:	ff 4f       	sbci	r31, 0xFF	; 255
     de4:	88 ec       	ldi	r24, 0xC8	; 200
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	91 83       	std	Z+1, r25	; 0x01
     dea:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dec:	fe 01       	movw	r30, r28
     dee:	e3 56       	subi	r30, 0x63	; 99
     df0:	ff 4f       	sbci	r31, 0xFF	; 255
     df2:	80 81       	ld	r24, Z
     df4:	91 81       	ldd	r25, Z+1	; 0x01
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	f1 f7       	brne	.-4      	; 0xdf6 <main+0x25e>
     dfa:	fe 01       	movw	r30, r28
     dfc:	e3 56       	subi	r30, 0x63	; 99
     dfe:	ff 4f       	sbci	r31, 0xFF	; 255
     e00:	91 83       	std	Z+1, r25	; 0x01
     e02:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e04:	de 01       	movw	r26, r28
     e06:	a1 56       	subi	r26, 0x61	; 97
     e08:	bf 4f       	sbci	r27, 0xFF	; 255
     e0a:	fe 01       	movw	r30, r28
     e0c:	e1 56       	subi	r30, 0x61	; 97
     e0e:	ff 4f       	sbci	r31, 0xFF	; 255
     e10:	80 81       	ld	r24, Z
     e12:	91 81       	ldd	r25, Z+1	; 0x01
     e14:	01 97       	sbiw	r24, 0x01	; 1
     e16:	11 96       	adiw	r26, 0x01	; 1
     e18:	9c 93       	st	X, r25
     e1a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e1c:	fe 01       	movw	r30, r28
     e1e:	e1 56       	subi	r30, 0x61	; 97
     e20:	ff 4f       	sbci	r31, 0xFF	; 255
     e22:	80 81       	ld	r24, Z
     e24:	91 81       	ldd	r25, Z+1	; 0x01
     e26:	00 97       	sbiw	r24, 0x00	; 0
     e28:	d1 f6       	brne	.-76     	; 0xdde <main+0x246>
     e2a:	28 c0       	rjmp	.+80     	; 0xe7c <main+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e2c:	8e 01       	movw	r16, r28
     e2e:	01 56       	subi	r16, 0x61	; 97
     e30:	1f 4f       	sbci	r17, 0xFF	; 255
     e32:	fe 01       	movw	r30, r28
     e34:	ef 55       	subi	r30, 0x5F	; 95
     e36:	ff 4f       	sbci	r31, 0xFF	; 255
     e38:	60 81       	ld	r22, Z
     e3a:	71 81       	ldd	r23, Z+1	; 0x01
     e3c:	82 81       	ldd	r24, Z+2	; 0x02
     e3e:	93 81       	ldd	r25, Z+3	; 0x03
     e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	f8 01       	movw	r30, r16
     e4a:	91 83       	std	Z+1, r25	; 0x01
     e4c:	80 83       	st	Z, r24
     e4e:	de 01       	movw	r26, r28
     e50:	a5 56       	subi	r26, 0x65	; 101
     e52:	bf 4f       	sbci	r27, 0xFF	; 255
     e54:	fe 01       	movw	r30, r28
     e56:	e1 56       	subi	r30, 0x61	; 97
     e58:	ff 4f       	sbci	r31, 0xFF	; 255
     e5a:	80 81       	ld	r24, Z
     e5c:	91 81       	ldd	r25, Z+1	; 0x01
     e5e:	11 96       	adiw	r26, 0x01	; 1
     e60:	9c 93       	st	X, r25
     e62:	8e 93       	st	-X, r24
     e64:	fe 01       	movw	r30, r28
     e66:	e5 56       	subi	r30, 0x65	; 101
     e68:	ff 4f       	sbci	r31, 0xFF	; 255
     e6a:	80 81       	ld	r24, Z
     e6c:	91 81       	ldd	r25, Z+1	; 0x01
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	f1 f7       	brne	.-4      	; 0xe6e <main+0x2d6>
     e72:	fe 01       	movw	r30, r28
     e74:	e5 56       	subi	r30, 0x65	; 101
     e76:	ff 4f       	sbci	r31, 0xFF	; 255
     e78:	91 83       	std	Z+1, r25	; 0x01
     e7a:	80 83       	st	Z, r24
			pass1[i] = UART_recieveByte();
		}
		_delay_ms(10);
		/* Receive the second password from HMI_ECU */
		for (int i = 0; i < 5; i++) {
     e7c:	fe 01       	movw	r30, r28
     e7e:	e7 54       	subi	r30, 0x47	; 71
     e80:	ff 4f       	sbci	r31, 0xFF	; 255
     e82:	11 82       	std	Z+1, r1	; 0x01
     e84:	10 82       	st	Z, r1
     e86:	1b c0       	rjmp	.+54     	; 0xebe <main+0x326>
			pass2[i] = UART_recieveByte();
     e88:	fe 01       	movw	r30, r28
     e8a:	e7 54       	subi	r30, 0x47	; 71
     e8c:	ff 4f       	sbci	r31, 0xFF	; 255
     e8e:	00 81       	ld	r16, Z
     e90:	11 81       	ldd	r17, Z+1	; 0x01
     e92:	0e 94 3e 19 	call	0x327c	; 0x327c <UART_recieveByte>
     e96:	28 2f       	mov	r18, r24
     e98:	ce 01       	movw	r24, r28
     e9a:	84 53       	subi	r24, 0x34	; 52
     e9c:	9f 4f       	sbci	r25, 0xFF	; 255
     e9e:	fc 01       	movw	r30, r24
     ea0:	e0 0f       	add	r30, r16
     ea2:	f1 1f       	adc	r31, r17
     ea4:	20 83       	st	Z, r18
		for (int i = 0; i < 5; i++) {
			pass1[i] = UART_recieveByte();
		}
		_delay_ms(10);
		/* Receive the second password from HMI_ECU */
		for (int i = 0; i < 5; i++) {
     ea6:	de 01       	movw	r26, r28
     ea8:	a7 54       	subi	r26, 0x47	; 71
     eaa:	bf 4f       	sbci	r27, 0xFF	; 255
     eac:	fe 01       	movw	r30, r28
     eae:	e7 54       	subi	r30, 0x47	; 71
     eb0:	ff 4f       	sbci	r31, 0xFF	; 255
     eb2:	80 81       	ld	r24, Z
     eb4:	91 81       	ldd	r25, Z+1	; 0x01
     eb6:	01 96       	adiw	r24, 0x01	; 1
     eb8:	11 96       	adiw	r26, 0x01	; 1
     eba:	9c 93       	st	X, r25
     ebc:	8e 93       	st	-X, r24
     ebe:	fe 01       	movw	r30, r28
     ec0:	e7 54       	subi	r30, 0x47	; 71
     ec2:	ff 4f       	sbci	r31, 0xFF	; 255
     ec4:	80 81       	ld	r24, Z
     ec6:	91 81       	ldd	r25, Z+1	; 0x01
     ec8:	85 30       	cpi	r24, 0x05	; 5
     eca:	91 05       	cpc	r25, r1
     ecc:	ec f2       	brlt	.-70     	; 0xe88 <main+0x2f0>
     ece:	fe 01       	movw	r30, r28
     ed0:	e9 56       	subi	r30, 0x69	; 105
     ed2:	ff 4f       	sbci	r31, 0xFF	; 255
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	a0 e2       	ldi	r26, 0x20	; 32
     eda:	b1 e4       	ldi	r27, 0x41	; 65
     edc:	80 83       	st	Z, r24
     ede:	91 83       	std	Z+1, r25	; 0x01
     ee0:	a2 83       	std	Z+2, r26	; 0x02
     ee2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee4:	8e 01       	movw	r16, r28
     ee6:	0d 56       	subi	r16, 0x6D	; 109
     ee8:	1f 4f       	sbci	r17, 0xFF	; 255
     eea:	fe 01       	movw	r30, r28
     eec:	e9 56       	subi	r30, 0x69	; 105
     eee:	ff 4f       	sbci	r31, 0xFF	; 255
     ef0:	60 81       	ld	r22, Z
     ef2:	71 81       	ldd	r23, Z+1	; 0x01
     ef4:	82 81       	ldd	r24, Z+2	; 0x02
     ef6:	93 81       	ldd	r25, Z+3	; 0x03
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	4a ef       	ldi	r20, 0xFA	; 250
     efe:	54 e4       	ldi	r21, 0x44	; 68
     f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f04:	dc 01       	movw	r26, r24
     f06:	cb 01       	movw	r24, r22
     f08:	f8 01       	movw	r30, r16
     f0a:	80 83       	st	Z, r24
     f0c:	91 83       	std	Z+1, r25	; 0x01
     f0e:	a2 83       	std	Z+2, r26	; 0x02
     f10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f12:	fe 01       	movw	r30, r28
     f14:	ed 56       	subi	r30, 0x6D	; 109
     f16:	ff 4f       	sbci	r31, 0xFF	; 255
     f18:	60 81       	ld	r22, Z
     f1a:	71 81       	ldd	r23, Z+1	; 0x01
     f1c:	82 81       	ldd	r24, Z+2	; 0x02
     f1e:	93 81       	ldd	r25, Z+3	; 0x03
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	40 e8       	ldi	r20, 0x80	; 128
     f26:	5f e3       	ldi	r21, 0x3F	; 63
     f28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f2c:	88 23       	and	r24, r24
     f2e:	44 f4       	brge	.+16     	; 0xf40 <main+0x3a8>
		__ticks = 1;
     f30:	fe 01       	movw	r30, r28
     f32:	ef 56       	subi	r30, 0x6F	; 111
     f34:	ff 4f       	sbci	r31, 0xFF	; 255
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	91 83       	std	Z+1, r25	; 0x01
     f3c:	80 83       	st	Z, r24
     f3e:	64 c0       	rjmp	.+200    	; 0x1008 <main+0x470>
	else if (__tmp > 65535)
     f40:	fe 01       	movw	r30, r28
     f42:	ed 56       	subi	r30, 0x6D	; 109
     f44:	ff 4f       	sbci	r31, 0xFF	; 255
     f46:	60 81       	ld	r22, Z
     f48:	71 81       	ldd	r23, Z+1	; 0x01
     f4a:	82 81       	ldd	r24, Z+2	; 0x02
     f4c:	93 81       	ldd	r25, Z+3	; 0x03
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	3f ef       	ldi	r19, 0xFF	; 255
     f52:	4f e7       	ldi	r20, 0x7F	; 127
     f54:	57 e4       	ldi	r21, 0x47	; 71
     f56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f5a:	18 16       	cp	r1, r24
     f5c:	0c f0       	brlt	.+2      	; 0xf60 <main+0x3c8>
     f5e:	43 c0       	rjmp	.+134    	; 0xfe6 <main+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f60:	fe 01       	movw	r30, r28
     f62:	e9 56       	subi	r30, 0x69	; 105
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	60 81       	ld	r22, Z
     f68:	71 81       	ldd	r23, Z+1	; 0x01
     f6a:	82 81       	ldd	r24, Z+2	; 0x02
     f6c:	93 81       	ldd	r25, Z+3	; 0x03
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	40 e2       	ldi	r20, 0x20	; 32
     f74:	51 e4       	ldi	r21, 0x41	; 65
     f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	8e 01       	movw	r16, r28
     f80:	0f 56       	subi	r16, 0x6F	; 111
     f82:	1f 4f       	sbci	r17, 0xFF	; 255
     f84:	bc 01       	movw	r22, r24
     f86:	cd 01       	movw	r24, r26
     f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	f8 01       	movw	r30, r16
     f92:	91 83       	std	Z+1, r25	; 0x01
     f94:	80 83       	st	Z, r24
     f96:	1f c0       	rjmp	.+62     	; 0xfd6 <main+0x43e>
     f98:	fe 01       	movw	r30, r28
     f9a:	e1 57       	subi	r30, 0x71	; 113
     f9c:	ff 4f       	sbci	r31, 0xFF	; 255
     f9e:	88 ec       	ldi	r24, 0xC8	; 200
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	91 83       	std	Z+1, r25	; 0x01
     fa4:	80 83       	st	Z, r24
     fa6:	fe 01       	movw	r30, r28
     fa8:	e1 57       	subi	r30, 0x71	; 113
     faa:	ff 4f       	sbci	r31, 0xFF	; 255
     fac:	80 81       	ld	r24, Z
     fae:	91 81       	ldd	r25, Z+1	; 0x01
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	f1 f7       	brne	.-4      	; 0xfb0 <main+0x418>
     fb4:	fe 01       	movw	r30, r28
     fb6:	e1 57       	subi	r30, 0x71	; 113
     fb8:	ff 4f       	sbci	r31, 0xFF	; 255
     fba:	91 83       	std	Z+1, r25	; 0x01
     fbc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fbe:	de 01       	movw	r26, r28
     fc0:	af 56       	subi	r26, 0x6F	; 111
     fc2:	bf 4f       	sbci	r27, 0xFF	; 255
     fc4:	fe 01       	movw	r30, r28
     fc6:	ef 56       	subi	r30, 0x6F	; 111
     fc8:	ff 4f       	sbci	r31, 0xFF	; 255
     fca:	80 81       	ld	r24, Z
     fcc:	91 81       	ldd	r25, Z+1	; 0x01
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	11 96       	adiw	r26, 0x01	; 1
     fd2:	9c 93       	st	X, r25
     fd4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd6:	fe 01       	movw	r30, r28
     fd8:	ef 56       	subi	r30, 0x6F	; 111
     fda:	ff 4f       	sbci	r31, 0xFF	; 255
     fdc:	80 81       	ld	r24, Z
     fde:	91 81       	ldd	r25, Z+1	; 0x01
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	d1 f6       	brne	.-76     	; 0xf98 <main+0x400>
     fe4:	28 c0       	rjmp	.+80     	; 0x1036 <main+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe6:	8e 01       	movw	r16, r28
     fe8:	0f 56       	subi	r16, 0x6F	; 111
     fea:	1f 4f       	sbci	r17, 0xFF	; 255
     fec:	fe 01       	movw	r30, r28
     fee:	ed 56       	subi	r30, 0x6D	; 109
     ff0:	ff 4f       	sbci	r31, 0xFF	; 255
     ff2:	60 81       	ld	r22, Z
     ff4:	71 81       	ldd	r23, Z+1	; 0x01
     ff6:	82 81       	ldd	r24, Z+2	; 0x02
     ff8:	93 81       	ldd	r25, Z+3	; 0x03
     ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	f8 01       	movw	r30, r16
    1004:	91 83       	std	Z+1, r25	; 0x01
    1006:	80 83       	st	Z, r24
    1008:	de 01       	movw	r26, r28
    100a:	a3 57       	subi	r26, 0x73	; 115
    100c:	bf 4f       	sbci	r27, 0xFF	; 255
    100e:	fe 01       	movw	r30, r28
    1010:	ef 56       	subi	r30, 0x6F	; 111
    1012:	ff 4f       	sbci	r31, 0xFF	; 255
    1014:	80 81       	ld	r24, Z
    1016:	91 81       	ldd	r25, Z+1	; 0x01
    1018:	11 96       	adiw	r26, 0x01	; 1
    101a:	9c 93       	st	X, r25
    101c:	8e 93       	st	-X, r24
    101e:	fe 01       	movw	r30, r28
    1020:	e3 57       	subi	r30, 0x73	; 115
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	80 81       	ld	r24, Z
    1026:	91 81       	ldd	r25, Z+1	; 0x01
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <main+0x490>
    102c:	fe 01       	movw	r30, r28
    102e:	e3 57       	subi	r30, 0x73	; 115
    1030:	ff 4f       	sbci	r31, 0xFF	; 255
    1032:	91 83       	std	Z+1, r25	; 0x01
    1034:	80 83       	st	Z, r24
			pass2[i] = UART_recieveByte();
		}
		_delay_ms(10);
		/* Compare the 2 passwords */
		for (int j = 0; j < 5; j++) {
    1036:	fe 01       	movw	r30, r28
    1038:	e9 54       	subi	r30, 0x49	; 73
    103a:	ff 4f       	sbci	r31, 0xFF	; 255
    103c:	11 82       	std	Z+1, r1	; 0x01
    103e:	10 82       	st	Z, r1
    1040:	30 c0       	rjmp	.+96     	; 0x10a2 <main+0x50a>
			if (pass1[j] != pass2[j]) {
    1042:	fe 01       	movw	r30, r28
    1044:	e9 54       	subi	r30, 0x49	; 73
    1046:	ff 4f       	sbci	r31, 0xFF	; 255
    1048:	20 81       	ld	r18, Z
    104a:	31 81       	ldd	r19, Z+1	; 0x01
    104c:	ce 01       	movw	r24, r28
    104e:	89 53       	subi	r24, 0x39	; 57
    1050:	9f 4f       	sbci	r25, 0xFF	; 255
    1052:	fc 01       	movw	r30, r24
    1054:	e2 0f       	add	r30, r18
    1056:	f3 1f       	adc	r31, r19
    1058:	40 81       	ld	r20, Z
    105a:	fe 01       	movw	r30, r28
    105c:	e9 54       	subi	r30, 0x49	; 73
    105e:	ff 4f       	sbci	r31, 0xFF	; 255
    1060:	20 81       	ld	r18, Z
    1062:	31 81       	ldd	r19, Z+1	; 0x01
    1064:	ce 01       	movw	r24, r28
    1066:	84 53       	subi	r24, 0x34	; 52
    1068:	9f 4f       	sbci	r25, 0xFF	; 255
    106a:	fc 01       	movw	r30, r24
    106c:	e2 0f       	add	r30, r18
    106e:	f3 1f       	adc	r31, r19
    1070:	80 81       	ld	r24, Z
    1072:	48 17       	cp	r20, r24
    1074:	29 f0       	breq	.+10     	; 0x1080 <main+0x4e8>
				flag1 = 0;
    1076:	fe 01       	movw	r30, r28
    1078:	ec 53       	subi	r30, 0x3C	; 60
    107a:	ff 4f       	sbci	r31, 0xFF	; 255
    107c:	10 82       	st	Z, r1
    107e:	19 c0       	rjmp	.+50     	; 0x10b2 <main+0x51a>
				break;
			}
			else if (pass1[j] == pass2[j]) {}
			flag1 = 1;
    1080:	fe 01       	movw	r30, r28
    1082:	ec 53       	subi	r30, 0x3C	; 60
    1084:	ff 4f       	sbci	r31, 0xFF	; 255
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	80 83       	st	Z, r24
		for (int i = 0; i < 5; i++) {
			pass2[i] = UART_recieveByte();
		}
		_delay_ms(10);
		/* Compare the 2 passwords */
		for (int j = 0; j < 5; j++) {
    108a:	de 01       	movw	r26, r28
    108c:	a9 54       	subi	r26, 0x49	; 73
    108e:	bf 4f       	sbci	r27, 0xFF	; 255
    1090:	fe 01       	movw	r30, r28
    1092:	e9 54       	subi	r30, 0x49	; 73
    1094:	ff 4f       	sbci	r31, 0xFF	; 255
    1096:	80 81       	ld	r24, Z
    1098:	91 81       	ldd	r25, Z+1	; 0x01
    109a:	01 96       	adiw	r24, 0x01	; 1
    109c:	11 96       	adiw	r26, 0x01	; 1
    109e:	9c 93       	st	X, r25
    10a0:	8e 93       	st	-X, r24
    10a2:	fe 01       	movw	r30, r28
    10a4:	e9 54       	subi	r30, 0x49	; 73
    10a6:	ff 4f       	sbci	r31, 0xFF	; 255
    10a8:	80 81       	ld	r24, Z
    10aa:	91 81       	ldd	r25, Z+1	; 0x01
    10ac:	85 30       	cpi	r24, 0x05	; 5
    10ae:	91 05       	cpc	r25, r1
    10b0:	44 f2       	brlt	.-112    	; 0x1042 <main+0x4aa>
			}
			else if (pass1[j] == pass2[j]) {}
			flag1 = 1;
		}
		/* Send the comparison result to the HMI_ECU */
		UART_sendByte(flag1);
    10b2:	fe 01       	movw	r30, r28
    10b4:	ec 53       	subi	r30, 0x3C	; 60
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	80 81       	ld	r24, Z
    10ba:	0e 94 27 19 	call	0x324e	; 0x324e <UART_sendByte>
		/* Save the system password in the EEPROM in case the 2 passwords are equal */
		if (flag1 == 1) {
    10be:	fe 01       	movw	r30, r28
    10c0:	ec 53       	subi	r30, 0x3C	; 60
    10c2:	ff 4f       	sbci	r31, 0xFF	; 255
    10c4:	80 81       	ld	r24, Z
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	11 f0       	breq	.+4      	; 0x10ce <main+0x536>
    10ca:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <main+0x1534>
			for (int j = 0; j < 5; j++) {
    10ce:	fe 01       	movw	r30, r28
    10d0:	eb 54       	subi	r30, 0x4B	; 75
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
    10d4:	11 82       	std	Z+1, r1	; 0x01
    10d6:	10 82       	st	Z, r1
    10d8:	ed c0       	rjmp	.+474    	; 0x12b4 <main+0x71c>
				EEPROM_writeByte((0x0311 + j), pass1[j]);
    10da:	fe 01       	movw	r30, r28
    10dc:	eb 54       	subi	r30, 0x4B	; 75
    10de:	ff 4f       	sbci	r31, 0xFF	; 255
    10e0:	80 81       	ld	r24, Z
    10e2:	91 81       	ldd	r25, Z+1	; 0x01
    10e4:	8f 5e       	subi	r24, 0xEF	; 239
    10e6:	9c 4f       	sbci	r25, 0xFC	; 252
    10e8:	ac 01       	movw	r20, r24
    10ea:	fe 01       	movw	r30, r28
    10ec:	eb 54       	subi	r30, 0x4B	; 75
    10ee:	ff 4f       	sbci	r31, 0xFF	; 255
    10f0:	20 81       	ld	r18, Z
    10f2:	31 81       	ldd	r19, Z+1	; 0x01
    10f4:	ce 01       	movw	r24, r28
    10f6:	89 53       	subi	r24, 0x39	; 57
    10f8:	9f 4f       	sbci	r25, 0xFF	; 255
    10fa:	fc 01       	movw	r30, r24
    10fc:	e2 0f       	add	r30, r18
    10fe:	f3 1f       	adc	r31, r19
    1100:	20 81       	ld	r18, Z
    1102:	ca 01       	movw	r24, r20
    1104:	62 2f       	mov	r22, r18
    1106:	0e 94 0d 14 	call	0x281a	; 0x281a <EEPROM_writeByte>
    110a:	fe 01       	movw	r30, r28
    110c:	e7 57       	subi	r30, 0x77	; 119
    110e:	ff 4f       	sbci	r31, 0xFF	; 255
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	a0 e2       	ldi	r26, 0x20	; 32
    1116:	b1 e4       	ldi	r27, 0x41	; 65
    1118:	80 83       	st	Z, r24
    111a:	91 83       	std	Z+1, r25	; 0x01
    111c:	a2 83       	std	Z+2, r26	; 0x02
    111e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1120:	8e 01       	movw	r16, r28
    1122:	0b 57       	subi	r16, 0x7B	; 123
    1124:	1f 4f       	sbci	r17, 0xFF	; 255
    1126:	fe 01       	movw	r30, r28
    1128:	e7 57       	subi	r30, 0x77	; 119
    112a:	ff 4f       	sbci	r31, 0xFF	; 255
    112c:	60 81       	ld	r22, Z
    112e:	71 81       	ldd	r23, Z+1	; 0x01
    1130:	82 81       	ldd	r24, Z+2	; 0x02
    1132:	93 81       	ldd	r25, Z+3	; 0x03
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	4a ef       	ldi	r20, 0xFA	; 250
    113a:	54 e4       	ldi	r21, 0x44	; 68
    113c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	f8 01       	movw	r30, r16
    1146:	80 83       	st	Z, r24
    1148:	91 83       	std	Z+1, r25	; 0x01
    114a:	a2 83       	std	Z+2, r26	; 0x02
    114c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    114e:	fe 01       	movw	r30, r28
    1150:	eb 57       	subi	r30, 0x7B	; 123
    1152:	ff 4f       	sbci	r31, 0xFF	; 255
    1154:	60 81       	ld	r22, Z
    1156:	71 81       	ldd	r23, Z+1	; 0x01
    1158:	82 81       	ldd	r24, Z+2	; 0x02
    115a:	93 81       	ldd	r25, Z+3	; 0x03
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	40 e8       	ldi	r20, 0x80	; 128
    1162:	5f e3       	ldi	r21, 0x3F	; 63
    1164:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1168:	88 23       	and	r24, r24
    116a:	44 f4       	brge	.+16     	; 0x117c <main+0x5e4>
		__ticks = 1;
    116c:	fe 01       	movw	r30, r28
    116e:	ed 57       	subi	r30, 0x7D	; 125
    1170:	ff 4f       	sbci	r31, 0xFF	; 255
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	91 83       	std	Z+1, r25	; 0x01
    1178:	80 83       	st	Z, r24
    117a:	64 c0       	rjmp	.+200    	; 0x1244 <main+0x6ac>
	else if (__tmp > 65535)
    117c:	fe 01       	movw	r30, r28
    117e:	eb 57       	subi	r30, 0x7B	; 123
    1180:	ff 4f       	sbci	r31, 0xFF	; 255
    1182:	60 81       	ld	r22, Z
    1184:	71 81       	ldd	r23, Z+1	; 0x01
    1186:	82 81       	ldd	r24, Z+2	; 0x02
    1188:	93 81       	ldd	r25, Z+3	; 0x03
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	3f ef       	ldi	r19, 0xFF	; 255
    118e:	4f e7       	ldi	r20, 0x7F	; 127
    1190:	57 e4       	ldi	r21, 0x47	; 71
    1192:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1196:	18 16       	cp	r1, r24
    1198:	0c f0       	brlt	.+2      	; 0x119c <main+0x604>
    119a:	43 c0       	rjmp	.+134    	; 0x1222 <main+0x68a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    119c:	fe 01       	movw	r30, r28
    119e:	e7 57       	subi	r30, 0x77	; 119
    11a0:	ff 4f       	sbci	r31, 0xFF	; 255
    11a2:	60 81       	ld	r22, Z
    11a4:	71 81       	ldd	r23, Z+1	; 0x01
    11a6:	82 81       	ldd	r24, Z+2	; 0x02
    11a8:	93 81       	ldd	r25, Z+3	; 0x03
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	40 e2       	ldi	r20, 0x20	; 32
    11b0:	51 e4       	ldi	r21, 0x41	; 65
    11b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b6:	dc 01       	movw	r26, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	8e 01       	movw	r16, r28
    11bc:	0d 57       	subi	r16, 0x7D	; 125
    11be:	1f 4f       	sbci	r17, 0xFF	; 255
    11c0:	bc 01       	movw	r22, r24
    11c2:	cd 01       	movw	r24, r26
    11c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	f8 01       	movw	r30, r16
    11ce:	91 83       	std	Z+1, r25	; 0x01
    11d0:	80 83       	st	Z, r24
    11d2:	1f c0       	rjmp	.+62     	; 0x1212 <main+0x67a>
    11d4:	fe 01       	movw	r30, r28
    11d6:	ef 57       	subi	r30, 0x7F	; 127
    11d8:	ff 4f       	sbci	r31, 0xFF	; 255
    11da:	88 ec       	ldi	r24, 0xC8	; 200
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	91 83       	std	Z+1, r25	; 0x01
    11e0:	80 83       	st	Z, r24
    11e2:	fe 01       	movw	r30, r28
    11e4:	ef 57       	subi	r30, 0x7F	; 127
    11e6:	ff 4f       	sbci	r31, 0xFF	; 255
    11e8:	80 81       	ld	r24, Z
    11ea:	91 81       	ldd	r25, Z+1	; 0x01
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	f1 f7       	brne	.-4      	; 0x11ec <main+0x654>
    11f0:	fe 01       	movw	r30, r28
    11f2:	ef 57       	subi	r30, 0x7F	; 127
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	91 83       	std	Z+1, r25	; 0x01
    11f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11fa:	de 01       	movw	r26, r28
    11fc:	ad 57       	subi	r26, 0x7D	; 125
    11fe:	bf 4f       	sbci	r27, 0xFF	; 255
    1200:	fe 01       	movw	r30, r28
    1202:	ed 57       	subi	r30, 0x7D	; 125
    1204:	ff 4f       	sbci	r31, 0xFF	; 255
    1206:	80 81       	ld	r24, Z
    1208:	91 81       	ldd	r25, Z+1	; 0x01
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	11 96       	adiw	r26, 0x01	; 1
    120e:	9c 93       	st	X, r25
    1210:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1212:	fe 01       	movw	r30, r28
    1214:	ed 57       	subi	r30, 0x7D	; 125
    1216:	ff 4f       	sbci	r31, 0xFF	; 255
    1218:	80 81       	ld	r24, Z
    121a:	91 81       	ldd	r25, Z+1	; 0x01
    121c:	00 97       	sbiw	r24, 0x00	; 0
    121e:	d1 f6       	brne	.-76     	; 0x11d4 <main+0x63c>
    1220:	27 c0       	rjmp	.+78     	; 0x1270 <main+0x6d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1222:	8e 01       	movw	r16, r28
    1224:	0d 57       	subi	r16, 0x7D	; 125
    1226:	1f 4f       	sbci	r17, 0xFF	; 255
    1228:	fe 01       	movw	r30, r28
    122a:	eb 57       	subi	r30, 0x7B	; 123
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	60 81       	ld	r22, Z
    1230:	71 81       	ldd	r23, Z+1	; 0x01
    1232:	82 81       	ldd	r24, Z+2	; 0x02
    1234:	93 81       	ldd	r25, Z+3	; 0x03
    1236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    123a:	dc 01       	movw	r26, r24
    123c:	cb 01       	movw	r24, r22
    123e:	f8 01       	movw	r30, r16
    1240:	91 83       	std	Z+1, r25	; 0x01
    1242:	80 83       	st	Z, r24
    1244:	de 01       	movw	r26, r28
    1246:	a1 58       	subi	r26, 0x81	; 129
    1248:	bf 4f       	sbci	r27, 0xFF	; 255
    124a:	fe 01       	movw	r30, r28
    124c:	ed 57       	subi	r30, 0x7D	; 125
    124e:	ff 4f       	sbci	r31, 0xFF	; 255
    1250:	80 81       	ld	r24, Z
    1252:	91 81       	ldd	r25, Z+1	; 0x01
    1254:	8d 93       	st	X+, r24
    1256:	9c 93       	st	X, r25
    1258:	fe 01       	movw	r30, r28
    125a:	e1 58       	subi	r30, 0x81	; 129
    125c:	ff 4f       	sbci	r31, 0xFF	; 255
    125e:	80 81       	ld	r24, Z
    1260:	91 81       	ldd	r25, Z+1	; 0x01
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	f1 f7       	brne	.-4      	; 0x1262 <main+0x6ca>
    1266:	fe 01       	movw	r30, r28
    1268:	e1 58       	subi	r30, 0x81	; 129
    126a:	ff 4f       	sbci	r31, 0xFF	; 255
    126c:	91 83       	std	Z+1, r25	; 0x01
    126e:	80 83       	st	Z, r24
				_delay_ms(10);
				EEPROM_readByte((0x0311 + j), &(saved_pass[j]));
    1270:	fe 01       	movw	r30, r28
    1272:	eb 54       	subi	r30, 0x4B	; 75
    1274:	ff 4f       	sbci	r31, 0xFF	; 255
    1276:	80 81       	ld	r24, Z
    1278:	91 81       	ldd	r25, Z+1	; 0x01
    127a:	8f 5e       	subi	r24, 0xEF	; 239
    127c:	9c 4f       	sbci	r25, 0xFC	; 252
    127e:	ac 01       	movw	r20, r24
    1280:	fe 01       	movw	r30, r28
    1282:	eb 54       	subi	r30, 0x4B	; 75
    1284:	ff 4f       	sbci	r31, 0xFF	; 255
    1286:	80 81       	ld	r24, Z
    1288:	91 81       	ldd	r25, Z+1	; 0x01
    128a:	9e 01       	movw	r18, r28
    128c:	2a 52       	subi	r18, 0x2A	; 42
    128e:	3f 4f       	sbci	r19, 0xFF	; 255
    1290:	28 0f       	add	r18, r24
    1292:	39 1f       	adc	r19, r25
    1294:	ca 01       	movw	r24, r20
    1296:	b9 01       	movw	r22, r18
    1298:	0e 94 4e 14 	call	0x289c	; 0x289c <EEPROM_readByte>
		}
		/* Send the comparison result to the HMI_ECU */
		UART_sendByte(flag1);
		/* Save the system password in the EEPROM in case the 2 passwords are equal */
		if (flag1 == 1) {
			for (int j = 0; j < 5; j++) {
    129c:	de 01       	movw	r26, r28
    129e:	ab 54       	subi	r26, 0x4B	; 75
    12a0:	bf 4f       	sbci	r27, 0xFF	; 255
    12a2:	fe 01       	movw	r30, r28
    12a4:	eb 54       	subi	r30, 0x4B	; 75
    12a6:	ff 4f       	sbci	r31, 0xFF	; 255
    12a8:	80 81       	ld	r24, Z
    12aa:	91 81       	ldd	r25, Z+1	; 0x01
    12ac:	01 96       	adiw	r24, 0x01	; 1
    12ae:	11 96       	adiw	r26, 0x01	; 1
    12b0:	9c 93       	st	X, r25
    12b2:	8e 93       	st	-X, r24
    12b4:	fe 01       	movw	r30, r28
    12b6:	eb 54       	subi	r30, 0x4B	; 75
    12b8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ba:	80 81       	ld	r24, Z
    12bc:	91 81       	ldd	r25, Z+1	; 0x01
    12be:	85 30       	cpi	r24, 0x05	; 5
    12c0:	91 05       	cpc	r25, r1
    12c2:	0c f4       	brge	.+2      	; 0x12c6 <main+0x72e>
    12c4:	0a cf       	rjmp	.-492    	; 0x10da <main+0x542>
    12c6:	02 c7       	rjmp	.+3588   	; 0x20cc <main+0x1534>
			}
		}
		/* if the password is correct, proceed the application */
		while (flag1 == 1) {
			/* recieve the new password */
			for (int k = 0; k < 5; k++) {
    12c8:	fe 01       	movw	r30, r28
    12ca:	ed 54       	subi	r30, 0x4D	; 77
    12cc:	ff 4f       	sbci	r31, 0xFF	; 255
    12ce:	11 82       	std	Z+1, r1	; 0x01
    12d0:	10 82       	st	Z, r1
    12d2:	1b c0       	rjmp	.+54     	; 0x130a <main+0x772>
				new_pass[k] = UART_recieveByte();
    12d4:	fe 01       	movw	r30, r28
    12d6:	ed 54       	subi	r30, 0x4D	; 77
    12d8:	ff 4f       	sbci	r31, 0xFF	; 255
    12da:	00 81       	ld	r16, Z
    12dc:	11 81       	ldd	r17, Z+1	; 0x01
    12de:	0e 94 3e 19 	call	0x327c	; 0x327c <UART_recieveByte>
    12e2:	28 2f       	mov	r18, r24
    12e4:	ce 01       	movw	r24, r28
    12e6:	8f 52       	subi	r24, 0x2F	; 47
    12e8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ea:	fc 01       	movw	r30, r24
    12ec:	e0 0f       	add	r30, r16
    12ee:	f1 1f       	adc	r31, r17
    12f0:	20 83       	st	Z, r18
			}
		}
		/* if the password is correct, proceed the application */
		while (flag1 == 1) {
			/* recieve the new password */
			for (int k = 0; k < 5; k++) {
    12f2:	de 01       	movw	r26, r28
    12f4:	ad 54       	subi	r26, 0x4D	; 77
    12f6:	bf 4f       	sbci	r27, 0xFF	; 255
    12f8:	fe 01       	movw	r30, r28
    12fa:	ed 54       	subi	r30, 0x4D	; 77
    12fc:	ff 4f       	sbci	r31, 0xFF	; 255
    12fe:	80 81       	ld	r24, Z
    1300:	91 81       	ldd	r25, Z+1	; 0x01
    1302:	01 96       	adiw	r24, 0x01	; 1
    1304:	11 96       	adiw	r26, 0x01	; 1
    1306:	9c 93       	st	X, r25
    1308:	8e 93       	st	-X, r24
    130a:	fe 01       	movw	r30, r28
    130c:	ed 54       	subi	r30, 0x4D	; 77
    130e:	ff 4f       	sbci	r31, 0xFF	; 255
    1310:	80 81       	ld	r24, Z
    1312:	91 81       	ldd	r25, Z+1	; 0x01
    1314:	85 30       	cpi	r24, 0x05	; 5
    1316:	91 05       	cpc	r25, r1
    1318:	ec f2       	brlt	.-70     	; 0x12d4 <main+0x73c>
				new_pass[k] = UART_recieveByte();
			}
			/* check if the new password is correct or not with the EEPROM */
			for (int i = 0; i < 5; i++) {
    131a:	fe 01       	movw	r30, r28
    131c:	ef 54       	subi	r30, 0x4F	; 79
    131e:	ff 4f       	sbci	r31, 0xFF	; 255
    1320:	11 82       	std	Z+1, r1	; 0x01
    1322:	10 82       	st	Z, r1
    1324:	30 c0       	rjmp	.+96     	; 0x1386 <main+0x7ee>
				if (new_pass[i] != saved_pass[i]) {
    1326:	fe 01       	movw	r30, r28
    1328:	ef 54       	subi	r30, 0x4F	; 79
    132a:	ff 4f       	sbci	r31, 0xFF	; 255
    132c:	20 81       	ld	r18, Z
    132e:	31 81       	ldd	r19, Z+1	; 0x01
    1330:	ce 01       	movw	r24, r28
    1332:	8f 52       	subi	r24, 0x2F	; 47
    1334:	9f 4f       	sbci	r25, 0xFF	; 255
    1336:	fc 01       	movw	r30, r24
    1338:	e2 0f       	add	r30, r18
    133a:	f3 1f       	adc	r31, r19
    133c:	40 81       	ld	r20, Z
    133e:	fe 01       	movw	r30, r28
    1340:	ef 54       	subi	r30, 0x4F	; 79
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	20 81       	ld	r18, Z
    1346:	31 81       	ldd	r19, Z+1	; 0x01
    1348:	ce 01       	movw	r24, r28
    134a:	8a 52       	subi	r24, 0x2A	; 42
    134c:	9f 4f       	sbci	r25, 0xFF	; 255
    134e:	fc 01       	movw	r30, r24
    1350:	e2 0f       	add	r30, r18
    1352:	f3 1f       	adc	r31, r19
    1354:	80 81       	ld	r24, Z
    1356:	48 17       	cp	r20, r24
    1358:	29 f0       	breq	.+10     	; 0x1364 <main+0x7cc>
					flag = 0;
    135a:	fe 01       	movw	r30, r28
    135c:	ea 53       	subi	r30, 0x3A	; 58
    135e:	ff 4f       	sbci	r31, 0xFF	; 255
    1360:	10 82       	st	Z, r1
    1362:	19 c0       	rjmp	.+50     	; 0x1396 <main+0x7fe>
					break;
				}
				else if (new_pass[i] == saved_pass[i]) {}
				flag = 1;
    1364:	fe 01       	movw	r30, r28
    1366:	ea 53       	subi	r30, 0x3A	; 58
    1368:	ff 4f       	sbci	r31, 0xFF	; 255
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	80 83       	st	Z, r24
			/* recieve the new password */
			for (int k = 0; k < 5; k++) {
				new_pass[k] = UART_recieveByte();
			}
			/* check if the new password is correct or not with the EEPROM */
			for (int i = 0; i < 5; i++) {
    136e:	de 01       	movw	r26, r28
    1370:	af 54       	subi	r26, 0x4F	; 79
    1372:	bf 4f       	sbci	r27, 0xFF	; 255
    1374:	fe 01       	movw	r30, r28
    1376:	ef 54       	subi	r30, 0x4F	; 79
    1378:	ff 4f       	sbci	r31, 0xFF	; 255
    137a:	80 81       	ld	r24, Z
    137c:	91 81       	ldd	r25, Z+1	; 0x01
    137e:	01 96       	adiw	r24, 0x01	; 1
    1380:	11 96       	adiw	r26, 0x01	; 1
    1382:	9c 93       	st	X, r25
    1384:	8e 93       	st	-X, r24
    1386:	fe 01       	movw	r30, r28
    1388:	ef 54       	subi	r30, 0x4F	; 79
    138a:	ff 4f       	sbci	r31, 0xFF	; 255
    138c:	80 81       	ld	r24, Z
    138e:	91 81       	ldd	r25, Z+1	; 0x01
    1390:	85 30       	cpi	r24, 0x05	; 5
    1392:	91 05       	cpc	r25, r1
    1394:	44 f2       	brlt	.-112    	; 0x1326 <main+0x78e>
				}
				else if (new_pass[i] == saved_pass[i]) {}
				flag = 1;
			}
			/* if the new password is correct, proceed the application */
			if (flag == 1) {
    1396:	fe 01       	movw	r30, r28
    1398:	ea 53       	subi	r30, 0x3A	; 58
    139a:	ff 4f       	sbci	r31, 0xFF	; 255
    139c:	80 81       	ld	r24, Z
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	09 f0       	breq	.+2      	; 0x13a4 <main+0x80c>
    13a2:	8b c5       	rjmp	.+2838   	; 0x1eba <main+0x1322>
				/* Send a byte to the HMI_ECU to let it know whether the new password is correct or not */
				UART_sendByte(correct_pass);
    13a4:	fe 01       	movw	r30, r28
    13a6:	e0 54       	subi	r30, 0x40	; 64
    13a8:	ff 4f       	sbci	r31, 0xFF	; 255
    13aa:	80 81       	ld	r24, Z
    13ac:	0e 94 27 19 	call	0x324e	; 0x324e <UART_sendByte>
    13b0:	fe 01       	movw	r30, r28
    13b2:	e5 58       	subi	r30, 0x85	; 133
    13b4:	ff 4f       	sbci	r31, 0xFF	; 255
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	aa e7       	ldi	r26, 0x7A	; 122
    13bc:	b4 e4       	ldi	r27, 0x44	; 68
    13be:	80 83       	st	Z, r24
    13c0:	91 83       	std	Z+1, r25	; 0x01
    13c2:	a2 83       	std	Z+2, r26	; 0x02
    13c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c6:	8e 01       	movw	r16, r28
    13c8:	09 58       	subi	r16, 0x89	; 137
    13ca:	1f 4f       	sbci	r17, 0xFF	; 255
    13cc:	fe 01       	movw	r30, r28
    13ce:	e5 58       	subi	r30, 0x85	; 133
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	60 81       	ld	r22, Z
    13d4:	71 81       	ldd	r23, Z+1	; 0x01
    13d6:	82 81       	ldd	r24, Z+2	; 0x02
    13d8:	93 81       	ldd	r25, Z+3	; 0x03
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	4a ef       	ldi	r20, 0xFA	; 250
    13e0:	54 e4       	ldi	r21, 0x44	; 68
    13e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	f8 01       	movw	r30, r16
    13ec:	80 83       	st	Z, r24
    13ee:	91 83       	std	Z+1, r25	; 0x01
    13f0:	a2 83       	std	Z+2, r26	; 0x02
    13f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13f4:	fe 01       	movw	r30, r28
    13f6:	e9 58       	subi	r30, 0x89	; 137
    13f8:	ff 4f       	sbci	r31, 0xFF	; 255
    13fa:	60 81       	ld	r22, Z
    13fc:	71 81       	ldd	r23, Z+1	; 0x01
    13fe:	82 81       	ldd	r24, Z+2	; 0x02
    1400:	93 81       	ldd	r25, Z+3	; 0x03
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	40 e8       	ldi	r20, 0x80	; 128
    1408:	5f e3       	ldi	r21, 0x3F	; 63
    140a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    140e:	88 23       	and	r24, r24
    1410:	44 f4       	brge	.+16     	; 0x1422 <main+0x88a>
		__ticks = 1;
    1412:	fe 01       	movw	r30, r28
    1414:	eb 58       	subi	r30, 0x8B	; 139
    1416:	ff 4f       	sbci	r31, 0xFF	; 255
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	91 83       	std	Z+1, r25	; 0x01
    141e:	80 83       	st	Z, r24
    1420:	64 c0       	rjmp	.+200    	; 0x14ea <main+0x952>
	else if (__tmp > 65535)
    1422:	fe 01       	movw	r30, r28
    1424:	e9 58       	subi	r30, 0x89	; 137
    1426:	ff 4f       	sbci	r31, 0xFF	; 255
    1428:	60 81       	ld	r22, Z
    142a:	71 81       	ldd	r23, Z+1	; 0x01
    142c:	82 81       	ldd	r24, Z+2	; 0x02
    142e:	93 81       	ldd	r25, Z+3	; 0x03
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	3f ef       	ldi	r19, 0xFF	; 255
    1434:	4f e7       	ldi	r20, 0x7F	; 127
    1436:	57 e4       	ldi	r21, 0x47	; 71
    1438:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    143c:	18 16       	cp	r1, r24
    143e:	0c f0       	brlt	.+2      	; 0x1442 <main+0x8aa>
    1440:	43 c0       	rjmp	.+134    	; 0x14c8 <main+0x930>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1442:	fe 01       	movw	r30, r28
    1444:	e5 58       	subi	r30, 0x85	; 133
    1446:	ff 4f       	sbci	r31, 0xFF	; 255
    1448:	60 81       	ld	r22, Z
    144a:	71 81       	ldd	r23, Z+1	; 0x01
    144c:	82 81       	ldd	r24, Z+2	; 0x02
    144e:	93 81       	ldd	r25, Z+3	; 0x03
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	40 e2       	ldi	r20, 0x20	; 32
    1456:	51 e4       	ldi	r21, 0x41	; 65
    1458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	8e 01       	movw	r16, r28
    1462:	0b 58       	subi	r16, 0x8B	; 139
    1464:	1f 4f       	sbci	r17, 0xFF	; 255
    1466:	bc 01       	movw	r22, r24
    1468:	cd 01       	movw	r24, r26
    146a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	f8 01       	movw	r30, r16
    1474:	91 83       	std	Z+1, r25	; 0x01
    1476:	80 83       	st	Z, r24
    1478:	1f c0       	rjmp	.+62     	; 0x14b8 <main+0x920>
    147a:	fe 01       	movw	r30, r28
    147c:	ed 58       	subi	r30, 0x8D	; 141
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	88 ec       	ldi	r24, 0xC8	; 200
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	91 83       	std	Z+1, r25	; 0x01
    1486:	80 83       	st	Z, r24
    1488:	fe 01       	movw	r30, r28
    148a:	ed 58       	subi	r30, 0x8D	; 141
    148c:	ff 4f       	sbci	r31, 0xFF	; 255
    148e:	80 81       	ld	r24, Z
    1490:	91 81       	ldd	r25, Z+1	; 0x01
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	f1 f7       	brne	.-4      	; 0x1492 <main+0x8fa>
    1496:	fe 01       	movw	r30, r28
    1498:	ed 58       	subi	r30, 0x8D	; 141
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	91 83       	std	Z+1, r25	; 0x01
    149e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a0:	de 01       	movw	r26, r28
    14a2:	ab 58       	subi	r26, 0x8B	; 139
    14a4:	bf 4f       	sbci	r27, 0xFF	; 255
    14a6:	fe 01       	movw	r30, r28
    14a8:	eb 58       	subi	r30, 0x8B	; 139
    14aa:	ff 4f       	sbci	r31, 0xFF	; 255
    14ac:	80 81       	ld	r24, Z
    14ae:	91 81       	ldd	r25, Z+1	; 0x01
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	11 96       	adiw	r26, 0x01	; 1
    14b4:	9c 93       	st	X, r25
    14b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b8:	fe 01       	movw	r30, r28
    14ba:	eb 58       	subi	r30, 0x8B	; 139
    14bc:	ff 4f       	sbci	r31, 0xFF	; 255
    14be:	80 81       	ld	r24, Z
    14c0:	91 81       	ldd	r25, Z+1	; 0x01
    14c2:	00 97       	sbiw	r24, 0x00	; 0
    14c4:	d1 f6       	brne	.-76     	; 0x147a <main+0x8e2>
    14c6:	27 c0       	rjmp	.+78     	; 0x1516 <main+0x97e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c8:	8e 01       	movw	r16, r28
    14ca:	0b 58       	subi	r16, 0x8B	; 139
    14cc:	1f 4f       	sbci	r17, 0xFF	; 255
    14ce:	fe 01       	movw	r30, r28
    14d0:	e9 58       	subi	r30, 0x89	; 137
    14d2:	ff 4f       	sbci	r31, 0xFF	; 255
    14d4:	60 81       	ld	r22, Z
    14d6:	71 81       	ldd	r23, Z+1	; 0x01
    14d8:	82 81       	ldd	r24, Z+2	; 0x02
    14da:	93 81       	ldd	r25, Z+3	; 0x03
    14dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	f8 01       	movw	r30, r16
    14e6:	91 83       	std	Z+1, r25	; 0x01
    14e8:	80 83       	st	Z, r24
    14ea:	de 01       	movw	r26, r28
    14ec:	af 58       	subi	r26, 0x8F	; 143
    14ee:	bf 4f       	sbci	r27, 0xFF	; 255
    14f0:	fe 01       	movw	r30, r28
    14f2:	eb 58       	subi	r30, 0x8B	; 139
    14f4:	ff 4f       	sbci	r31, 0xFF	; 255
    14f6:	80 81       	ld	r24, Z
    14f8:	91 81       	ldd	r25, Z+1	; 0x01
    14fa:	8d 93       	st	X+, r24
    14fc:	9c 93       	st	X, r25
    14fe:	fe 01       	movw	r30, r28
    1500:	ef 58       	subi	r30, 0x8F	; 143
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	80 81       	ld	r24, Z
    1506:	91 81       	ldd	r25, Z+1	; 0x01
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	f1 f7       	brne	.-4      	; 0x1508 <main+0x970>
    150c:	fe 01       	movw	r30, r28
    150e:	ef 58       	subi	r30, 0x8F	; 143
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	91 83       	std	Z+1, r25	; 0x01
    1514:	80 83       	st	Z, r24
				_delay_ms(1000);
				/* Recieve the action needed to be done from the HMI_ECU */
				Action = UART_recieveByte();
    1516:	0e 94 3e 19 	call	0x327c	; 0x327c <UART_recieveByte>
    151a:	fe 01       	movw	r30, r28
    151c:	eb 53       	subi	r30, 0x3B	; 59
    151e:	ff 4f       	sbci	r31, 0xFF	; 255
    1520:	80 83       	st	Z, r24
    1522:	fe 01       	movw	r30, r28
    1524:	e3 59       	subi	r30, 0x93	; 147
    1526:	ff 4f       	sbci	r31, 0xFF	; 255
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	a0 e2       	ldi	r26, 0x20	; 32
    152e:	b1 e4       	ldi	r27, 0x41	; 65
    1530:	80 83       	st	Z, r24
    1532:	91 83       	std	Z+1, r25	; 0x01
    1534:	a2 83       	std	Z+2, r26	; 0x02
    1536:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1538:	8e 01       	movw	r16, r28
    153a:	07 59       	subi	r16, 0x97	; 151
    153c:	1f 4f       	sbci	r17, 0xFF	; 255
    153e:	fe 01       	movw	r30, r28
    1540:	e3 59       	subi	r30, 0x93	; 147
    1542:	ff 4f       	sbci	r31, 0xFF	; 255
    1544:	60 81       	ld	r22, Z
    1546:	71 81       	ldd	r23, Z+1	; 0x01
    1548:	82 81       	ldd	r24, Z+2	; 0x02
    154a:	93 81       	ldd	r25, Z+3	; 0x03
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	4a ef       	ldi	r20, 0xFA	; 250
    1552:	54 e4       	ldi	r21, 0x44	; 68
    1554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	f8 01       	movw	r30, r16
    155e:	80 83       	st	Z, r24
    1560:	91 83       	std	Z+1, r25	; 0x01
    1562:	a2 83       	std	Z+2, r26	; 0x02
    1564:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1566:	fe 01       	movw	r30, r28
    1568:	e7 59       	subi	r30, 0x97	; 151
    156a:	ff 4f       	sbci	r31, 0xFF	; 255
    156c:	60 81       	ld	r22, Z
    156e:	71 81       	ldd	r23, Z+1	; 0x01
    1570:	82 81       	ldd	r24, Z+2	; 0x02
    1572:	93 81       	ldd	r25, Z+3	; 0x03
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	40 e8       	ldi	r20, 0x80	; 128
    157a:	5f e3       	ldi	r21, 0x3F	; 63
    157c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1580:	88 23       	and	r24, r24
    1582:	44 f4       	brge	.+16     	; 0x1594 <main+0x9fc>
		__ticks = 1;
    1584:	fe 01       	movw	r30, r28
    1586:	e9 59       	subi	r30, 0x99	; 153
    1588:	ff 4f       	sbci	r31, 0xFF	; 255
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	91 83       	std	Z+1, r25	; 0x01
    1590:	80 83       	st	Z, r24
    1592:	64 c0       	rjmp	.+200    	; 0x165c <main+0xac4>
	else if (__tmp > 65535)
    1594:	fe 01       	movw	r30, r28
    1596:	e7 59       	subi	r30, 0x97	; 151
    1598:	ff 4f       	sbci	r31, 0xFF	; 255
    159a:	60 81       	ld	r22, Z
    159c:	71 81       	ldd	r23, Z+1	; 0x01
    159e:	82 81       	ldd	r24, Z+2	; 0x02
    15a0:	93 81       	ldd	r25, Z+3	; 0x03
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	3f ef       	ldi	r19, 0xFF	; 255
    15a6:	4f e7       	ldi	r20, 0x7F	; 127
    15a8:	57 e4       	ldi	r21, 0x47	; 71
    15aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ae:	18 16       	cp	r1, r24
    15b0:	0c f0       	brlt	.+2      	; 0x15b4 <main+0xa1c>
    15b2:	43 c0       	rjmp	.+134    	; 0x163a <main+0xaa2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b4:	fe 01       	movw	r30, r28
    15b6:	e3 59       	subi	r30, 0x93	; 147
    15b8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ba:	60 81       	ld	r22, Z
    15bc:	71 81       	ldd	r23, Z+1	; 0x01
    15be:	82 81       	ldd	r24, Z+2	; 0x02
    15c0:	93 81       	ldd	r25, Z+3	; 0x03
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	40 e2       	ldi	r20, 0x20	; 32
    15c8:	51 e4       	ldi	r21, 0x41	; 65
    15ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	8e 01       	movw	r16, r28
    15d4:	09 59       	subi	r16, 0x99	; 153
    15d6:	1f 4f       	sbci	r17, 0xFF	; 255
    15d8:	bc 01       	movw	r22, r24
    15da:	cd 01       	movw	r24, r26
    15dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	f8 01       	movw	r30, r16
    15e6:	91 83       	std	Z+1, r25	; 0x01
    15e8:	80 83       	st	Z, r24
    15ea:	1f c0       	rjmp	.+62     	; 0x162a <main+0xa92>
    15ec:	fe 01       	movw	r30, r28
    15ee:	eb 59       	subi	r30, 0x9B	; 155
    15f0:	ff 4f       	sbci	r31, 0xFF	; 255
    15f2:	88 ec       	ldi	r24, 0xC8	; 200
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	91 83       	std	Z+1, r25	; 0x01
    15f8:	80 83       	st	Z, r24
    15fa:	fe 01       	movw	r30, r28
    15fc:	eb 59       	subi	r30, 0x9B	; 155
    15fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1600:	80 81       	ld	r24, Z
    1602:	91 81       	ldd	r25, Z+1	; 0x01
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	f1 f7       	brne	.-4      	; 0x1604 <main+0xa6c>
    1608:	fe 01       	movw	r30, r28
    160a:	eb 59       	subi	r30, 0x9B	; 155
    160c:	ff 4f       	sbci	r31, 0xFF	; 255
    160e:	91 83       	std	Z+1, r25	; 0x01
    1610:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1612:	de 01       	movw	r26, r28
    1614:	a9 59       	subi	r26, 0x99	; 153
    1616:	bf 4f       	sbci	r27, 0xFF	; 255
    1618:	fe 01       	movw	r30, r28
    161a:	e9 59       	subi	r30, 0x99	; 153
    161c:	ff 4f       	sbci	r31, 0xFF	; 255
    161e:	80 81       	ld	r24, Z
    1620:	91 81       	ldd	r25, Z+1	; 0x01
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	11 96       	adiw	r26, 0x01	; 1
    1626:	9c 93       	st	X, r25
    1628:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162a:	fe 01       	movw	r30, r28
    162c:	e9 59       	subi	r30, 0x99	; 153
    162e:	ff 4f       	sbci	r31, 0xFF	; 255
    1630:	80 81       	ld	r24, Z
    1632:	91 81       	ldd	r25, Z+1	; 0x01
    1634:	00 97       	sbiw	r24, 0x00	; 0
    1636:	d1 f6       	brne	.-76     	; 0x15ec <main+0xa54>
    1638:	28 c0       	rjmp	.+80     	; 0x168a <main+0xaf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    163a:	8e 01       	movw	r16, r28
    163c:	09 59       	subi	r16, 0x99	; 153
    163e:	1f 4f       	sbci	r17, 0xFF	; 255
    1640:	fe 01       	movw	r30, r28
    1642:	e7 59       	subi	r30, 0x97	; 151
    1644:	ff 4f       	sbci	r31, 0xFF	; 255
    1646:	60 81       	ld	r22, Z
    1648:	71 81       	ldd	r23, Z+1	; 0x01
    164a:	82 81       	ldd	r24, Z+2	; 0x02
    164c:	93 81       	ldd	r25, Z+3	; 0x03
    164e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	f8 01       	movw	r30, r16
    1658:	91 83       	std	Z+1, r25	; 0x01
    165a:	80 83       	st	Z, r24
    165c:	de 01       	movw	r26, r28
    165e:	ad 59       	subi	r26, 0x9D	; 157
    1660:	bf 4f       	sbci	r27, 0xFF	; 255
    1662:	fe 01       	movw	r30, r28
    1664:	e9 59       	subi	r30, 0x99	; 153
    1666:	ff 4f       	sbci	r31, 0xFF	; 255
    1668:	80 81       	ld	r24, Z
    166a:	91 81       	ldd	r25, Z+1	; 0x01
    166c:	11 96       	adiw	r26, 0x01	; 1
    166e:	9c 93       	st	X, r25
    1670:	8e 93       	st	-X, r24
    1672:	fe 01       	movw	r30, r28
    1674:	ed 59       	subi	r30, 0x9D	; 157
    1676:	ff 4f       	sbci	r31, 0xFF	; 255
    1678:	80 81       	ld	r24, Z
    167a:	91 81       	ldd	r25, Z+1	; 0x01
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	f1 f7       	brne	.-4      	; 0x167c <main+0xae4>
    1680:	fe 01       	movw	r30, r28
    1682:	ed 59       	subi	r30, 0x9D	; 157
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	91 83       	std	Z+1, r25	; 0x01
    1688:	80 83       	st	Z, r24
				_delay_ms(10);
				/* Opening door */
				if (Action == 1) {
    168a:	fe 01       	movw	r30, r28
    168c:	eb 53       	subi	r30, 0x3B	; 59
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	80 81       	ld	r24, Z
    1692:	81 30       	cpi	r24, 0x01	; 1
    1694:	09 f0       	breq	.+2      	; 0x1698 <main+0xb00>
    1696:	ba c1       	rjmp	.+884    	; 0x1a0c <main+0xe74>
					DcMotor_Rotate(CW, 100);
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	64 e6       	ldi	r22, 0x64	; 100
    169c:	0e 94 8a 10 	call	0x2114	; 0x2114 <DcMotor_Rotate>
    16a0:	fe 01       	movw	r30, r28
    16a2:	e1 5a       	subi	r30, 0xA1	; 161
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	9c e7       	ldi	r25, 0x7C	; 124
    16aa:	a2 e1       	ldi	r26, 0x12	; 18
    16ac:	b8 e4       	ldi	r27, 0x48	; 72
    16ae:	80 83       	st	Z, r24
    16b0:	91 83       	std	Z+1, r25	; 0x01
    16b2:	a2 83       	std	Z+2, r26	; 0x02
    16b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b6:	8e 01       	movw	r16, r28
    16b8:	05 5a       	subi	r16, 0xA5	; 165
    16ba:	1f 4f       	sbci	r17, 0xFF	; 255
    16bc:	fe 01       	movw	r30, r28
    16be:	e1 5a       	subi	r30, 0xA1	; 161
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	60 81       	ld	r22, Z
    16c4:	71 81       	ldd	r23, Z+1	; 0x01
    16c6:	82 81       	ldd	r24, Z+2	; 0x02
    16c8:	93 81       	ldd	r25, Z+3	; 0x03
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	4a ef       	ldi	r20, 0xFA	; 250
    16d0:	54 e4       	ldi	r21, 0x44	; 68
    16d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	f8 01       	movw	r30, r16
    16dc:	80 83       	st	Z, r24
    16de:	91 83       	std	Z+1, r25	; 0x01
    16e0:	a2 83       	std	Z+2, r26	; 0x02
    16e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16e4:	fe 01       	movw	r30, r28
    16e6:	e5 5a       	subi	r30, 0xA5	; 165
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	60 81       	ld	r22, Z
    16ec:	71 81       	ldd	r23, Z+1	; 0x01
    16ee:	82 81       	ldd	r24, Z+2	; 0x02
    16f0:	93 81       	ldd	r25, Z+3	; 0x03
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e8       	ldi	r20, 0x80	; 128
    16f8:	5f e3       	ldi	r21, 0x3F	; 63
    16fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16fe:	88 23       	and	r24, r24
    1700:	44 f4       	brge	.+16     	; 0x1712 <main+0xb7a>
		__ticks = 1;
    1702:	fe 01       	movw	r30, r28
    1704:	e7 5a       	subi	r30, 0xA7	; 167
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	91 83       	std	Z+1, r25	; 0x01
    170e:	80 83       	st	Z, r24
    1710:	64 c0       	rjmp	.+200    	; 0x17da <main+0xc42>
	else if (__tmp > 65535)
    1712:	fe 01       	movw	r30, r28
    1714:	e5 5a       	subi	r30, 0xA5	; 165
    1716:	ff 4f       	sbci	r31, 0xFF	; 255
    1718:	60 81       	ld	r22, Z
    171a:	71 81       	ldd	r23, Z+1	; 0x01
    171c:	82 81       	ldd	r24, Z+2	; 0x02
    171e:	93 81       	ldd	r25, Z+3	; 0x03
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	3f ef       	ldi	r19, 0xFF	; 255
    1724:	4f e7       	ldi	r20, 0x7F	; 127
    1726:	57 e4       	ldi	r21, 0x47	; 71
    1728:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    172c:	18 16       	cp	r1, r24
    172e:	0c f0       	brlt	.+2      	; 0x1732 <main+0xb9a>
    1730:	43 c0       	rjmp	.+134    	; 0x17b8 <main+0xc20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1732:	fe 01       	movw	r30, r28
    1734:	e1 5a       	subi	r30, 0xA1	; 161
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	60 81       	ld	r22, Z
    173a:	71 81       	ldd	r23, Z+1	; 0x01
    173c:	82 81       	ldd	r24, Z+2	; 0x02
    173e:	93 81       	ldd	r25, Z+3	; 0x03
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	40 e2       	ldi	r20, 0x20	; 32
    1746:	51 e4       	ldi	r21, 0x41	; 65
    1748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	8e 01       	movw	r16, r28
    1752:	07 5a       	subi	r16, 0xA7	; 167
    1754:	1f 4f       	sbci	r17, 0xFF	; 255
    1756:	bc 01       	movw	r22, r24
    1758:	cd 01       	movw	r24, r26
    175a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	f8 01       	movw	r30, r16
    1764:	91 83       	std	Z+1, r25	; 0x01
    1766:	80 83       	st	Z, r24
    1768:	1f c0       	rjmp	.+62     	; 0x17a8 <main+0xc10>
    176a:	fe 01       	movw	r30, r28
    176c:	e9 5a       	subi	r30, 0xA9	; 169
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
    1770:	88 ec       	ldi	r24, 0xC8	; 200
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	91 83       	std	Z+1, r25	; 0x01
    1776:	80 83       	st	Z, r24
    1778:	fe 01       	movw	r30, r28
    177a:	e9 5a       	subi	r30, 0xA9	; 169
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	80 81       	ld	r24, Z
    1780:	91 81       	ldd	r25, Z+1	; 0x01
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	f1 f7       	brne	.-4      	; 0x1782 <main+0xbea>
    1786:	fe 01       	movw	r30, r28
    1788:	e9 5a       	subi	r30, 0xA9	; 169
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	91 83       	std	Z+1, r25	; 0x01
    178e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1790:	de 01       	movw	r26, r28
    1792:	a7 5a       	subi	r26, 0xA7	; 167
    1794:	bf 4f       	sbci	r27, 0xFF	; 255
    1796:	fe 01       	movw	r30, r28
    1798:	e7 5a       	subi	r30, 0xA7	; 167
    179a:	ff 4f       	sbci	r31, 0xFF	; 255
    179c:	80 81       	ld	r24, Z
    179e:	91 81       	ldd	r25, Z+1	; 0x01
    17a0:	01 97       	sbiw	r24, 0x01	; 1
    17a2:	11 96       	adiw	r26, 0x01	; 1
    17a4:	9c 93       	st	X, r25
    17a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a8:	fe 01       	movw	r30, r28
    17aa:	e7 5a       	subi	r30, 0xA7	; 167
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	80 81       	ld	r24, Z
    17b0:	91 81       	ldd	r25, Z+1	; 0x01
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	d1 f6       	brne	.-76     	; 0x176a <main+0xbd2>
    17b6:	27 c0       	rjmp	.+78     	; 0x1806 <main+0xc6e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b8:	8e 01       	movw	r16, r28
    17ba:	07 5a       	subi	r16, 0xA7	; 167
    17bc:	1f 4f       	sbci	r17, 0xFF	; 255
    17be:	fe 01       	movw	r30, r28
    17c0:	e5 5a       	subi	r30, 0xA5	; 165
    17c2:	ff 4f       	sbci	r31, 0xFF	; 255
    17c4:	60 81       	ld	r22, Z
    17c6:	71 81       	ldd	r23, Z+1	; 0x01
    17c8:	82 81       	ldd	r24, Z+2	; 0x02
    17ca:	93 81       	ldd	r25, Z+3	; 0x03
    17cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	f8 01       	movw	r30, r16
    17d6:	91 83       	std	Z+1, r25	; 0x01
    17d8:	80 83       	st	Z, r24
    17da:	de 01       	movw	r26, r28
    17dc:	ab 5a       	subi	r26, 0xAB	; 171
    17de:	bf 4f       	sbci	r27, 0xFF	; 255
    17e0:	fe 01       	movw	r30, r28
    17e2:	e7 5a       	subi	r30, 0xA7	; 167
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	80 81       	ld	r24, Z
    17e8:	91 81       	ldd	r25, Z+1	; 0x01
    17ea:	8d 93       	st	X+, r24
    17ec:	9c 93       	st	X, r25
    17ee:	fe 01       	movw	r30, r28
    17f0:	eb 5a       	subi	r30, 0xAB	; 171
    17f2:	ff 4f       	sbci	r31, 0xFF	; 255
    17f4:	80 81       	ld	r24, Z
    17f6:	91 81       	ldd	r25, Z+1	; 0x01
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	f1 f7       	brne	.-4      	; 0x17f8 <main+0xc60>
    17fc:	fe 01       	movw	r30, r28
    17fe:	eb 5a       	subi	r30, 0xAB	; 171
    1800:	ff 4f       	sbci	r31, 0xFF	; 255
    1802:	91 83       	std	Z+1, r25	; 0x01
    1804:	80 83       	st	Z, r24
					_delay_ms(150000);
					//Timer_init(&Timer_ConfigType_1);
					//Timer_setCallBack(door_Unlock_Timer,TIMER1);
					DcMotor_Rotate(STOP, 100);
    1806:	82 e0       	ldi	r24, 0x02	; 2
    1808:	64 e6       	ldi	r22, 0x64	; 100
    180a:	0e 94 8a 10 	call	0x2114	; 0x2114 <DcMotor_Rotate>
					PIR_State = PIR_getState(); /* check PIR state */
    180e:	0e 94 ed 10 	call	0x21da	; 0x21da <PIR_getState>
    1812:	fe 01       	movw	r30, r28
    1814:	ed 53       	subi	r30, 0x3D	; 61
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	80 83       	st	Z, r24
					if (PIR_State == 1)
    181a:	fe 01       	movw	r30, r28
    181c:	ed 53       	subi	r30, 0x3D	; 61
    181e:	ff 4f       	sbci	r31, 0xFF	; 255
    1820:	80 81       	ld	r24, Z
    1822:	81 30       	cpi	r24, 0x01	; 1
    1824:	39 f4       	brne	.+14     	; 0x1834 <main+0xc9c>
						UART_sendByte(object_Detected);
    1826:	fe 01       	movw	r30, r28
    1828:	e2 54       	subi	r30, 0x42	; 66
    182a:	ff 4f       	sbci	r31, 0xFF	; 255
    182c:	80 81       	ld	r24, Z
    182e:	0e 94 27 19 	call	0x324e	; 0x324e <UART_sendByte>
    1832:	2a c0       	rjmp	.+84     	; 0x1888 <main+0xcf0>
					else if (PIR_State == 0)
    1834:	fe 01       	movw	r30, r28
    1836:	ed 53       	subi	r30, 0x3D	; 61
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	80 81       	ld	r24, Z
    183c:	88 23       	and	r24, r24
    183e:	21 f5       	brne	.+72     	; 0x1888 <main+0xcf0>
						UART_sendByte(no_Object_Detected);
    1840:	fe 01       	movw	r30, r28
    1842:	e3 54       	subi	r30, 0x43	; 67
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	80 81       	ld	r24, Z
    1848:	0e 94 27 19 	call	0x324e	; 0x324e <UART_sendByte>
    184c:	1d c0       	rjmp	.+58     	; 0x1888 <main+0xcf0>
					while (PIR_State == 1) {
						PIR_State = PIR_getState();
    184e:	0e 94 ed 10 	call	0x21da	; 0x21da <PIR_getState>
    1852:	fe 01       	movw	r30, r28
    1854:	ed 53       	subi	r30, 0x3D	; 61
    1856:	ff 4f       	sbci	r31, 0xFF	; 255
    1858:	80 83       	st	Z, r24
						if (PIR_State == 0) {
    185a:	fe 01       	movw	r30, r28
    185c:	ed 53       	subi	r30, 0x3D	; 61
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	80 81       	ld	r24, Z
    1862:	88 23       	and	r24, r24
    1864:	39 f4       	brne	.+14     	; 0x1874 <main+0xcdc>
							UART_sendByte(no_Object_Detected);
    1866:	fe 01       	movw	r30, r28
    1868:	e3 54       	subi	r30, 0x43	; 67
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	80 81       	ld	r24, Z
    186e:	0e 94 27 19 	call	0x324e	; 0x324e <UART_sendByte>
    1872:	10 c0       	rjmp	.+32     	; 0x1894 <main+0xcfc>
							break;
						}
						UART_sendByte(object_Detected);
    1874:	fe 01       	movw	r30, r28
    1876:	e2 54       	subi	r30, 0x42	; 66
    1878:	ff 4f       	sbci	r31, 0xFF	; 255
    187a:	80 81       	ld	r24, Z
    187c:	0e 94 27 19 	call	0x324e	; 0x324e <UART_sendByte>
						DcMotor_Rotate(CW, 100);
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	64 e6       	ldi	r22, 0x64	; 100
    1884:	0e 94 8a 10 	call	0x2114	; 0x2114 <DcMotor_Rotate>
					PIR_State = PIR_getState(); /* check PIR state */
					if (PIR_State == 1)
						UART_sendByte(object_Detected);
					else if (PIR_State == 0)
						UART_sendByte(no_Object_Detected);
					while (PIR_State == 1) {
    1888:	fe 01       	movw	r30, r28
    188a:	ed 53       	subi	r30, 0x3D	; 61
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	80 81       	ld	r24, Z
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	e9 f2       	breq	.-70     	; 0x184e <main+0xcb6>
							break;
						}
						UART_sendByte(object_Detected);
						DcMotor_Rotate(CW, 100);
					}
					DcMotor_Rotate(ACW, 100);
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	64 e6       	ldi	r22, 0x64	; 100
    1898:	0e 94 8a 10 	call	0x2114	; 0x2114 <DcMotor_Rotate>
    189c:	fe 01       	movw	r30, r28
    189e:	ef 5a       	subi	r30, 0xAF	; 175
    18a0:	ff 4f       	sbci	r31, 0xFF	; 255
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	9c e7       	ldi	r25, 0x7C	; 124
    18a6:	a2 e1       	ldi	r26, 0x12	; 18
    18a8:	b8 e4       	ldi	r27, 0x48	; 72
    18aa:	80 83       	st	Z, r24
    18ac:	91 83       	std	Z+1, r25	; 0x01
    18ae:	a2 83       	std	Z+2, r26	; 0x02
    18b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b2:	8e 01       	movw	r16, r28
    18b4:	03 5b       	subi	r16, 0xB3	; 179
    18b6:	1f 4f       	sbci	r17, 0xFF	; 255
    18b8:	fe 01       	movw	r30, r28
    18ba:	ef 5a       	subi	r30, 0xAF	; 175
    18bc:	ff 4f       	sbci	r31, 0xFF	; 255
    18be:	60 81       	ld	r22, Z
    18c0:	71 81       	ldd	r23, Z+1	; 0x01
    18c2:	82 81       	ldd	r24, Z+2	; 0x02
    18c4:	93 81       	ldd	r25, Z+3	; 0x03
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	4a ef       	ldi	r20, 0xFA	; 250
    18cc:	54 e4       	ldi	r21, 0x44	; 68
    18ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	f8 01       	movw	r30, r16
    18d8:	80 83       	st	Z, r24
    18da:	91 83       	std	Z+1, r25	; 0x01
    18dc:	a2 83       	std	Z+2, r26	; 0x02
    18de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18e0:	fe 01       	movw	r30, r28
    18e2:	e3 5b       	subi	r30, 0xB3	; 179
    18e4:	ff 4f       	sbci	r31, 0xFF	; 255
    18e6:	60 81       	ld	r22, Z
    18e8:	71 81       	ldd	r23, Z+1	; 0x01
    18ea:	82 81       	ldd	r24, Z+2	; 0x02
    18ec:	93 81       	ldd	r25, Z+3	; 0x03
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	40 e8       	ldi	r20, 0x80	; 128
    18f4:	5f e3       	ldi	r21, 0x3F	; 63
    18f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18fa:	88 23       	and	r24, r24
    18fc:	44 f4       	brge	.+16     	; 0x190e <main+0xd76>
		__ticks = 1;
    18fe:	fe 01       	movw	r30, r28
    1900:	e5 5b       	subi	r30, 0xB5	; 181
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	91 83       	std	Z+1, r25	; 0x01
    190a:	80 83       	st	Z, r24
    190c:	64 c0       	rjmp	.+200    	; 0x19d6 <main+0xe3e>
	else if (__tmp > 65535)
    190e:	fe 01       	movw	r30, r28
    1910:	e3 5b       	subi	r30, 0xB3	; 179
    1912:	ff 4f       	sbci	r31, 0xFF	; 255
    1914:	60 81       	ld	r22, Z
    1916:	71 81       	ldd	r23, Z+1	; 0x01
    1918:	82 81       	ldd	r24, Z+2	; 0x02
    191a:	93 81       	ldd	r25, Z+3	; 0x03
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	3f ef       	ldi	r19, 0xFF	; 255
    1920:	4f e7       	ldi	r20, 0x7F	; 127
    1922:	57 e4       	ldi	r21, 0x47	; 71
    1924:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1928:	18 16       	cp	r1, r24
    192a:	0c f0       	brlt	.+2      	; 0x192e <main+0xd96>
    192c:	43 c0       	rjmp	.+134    	; 0x19b4 <main+0xe1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192e:	fe 01       	movw	r30, r28
    1930:	ef 5a       	subi	r30, 0xAF	; 175
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	60 81       	ld	r22, Z
    1936:	71 81       	ldd	r23, Z+1	; 0x01
    1938:	82 81       	ldd	r24, Z+2	; 0x02
    193a:	93 81       	ldd	r25, Z+3	; 0x03
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e2       	ldi	r20, 0x20	; 32
    1942:	51 e4       	ldi	r21, 0x41	; 65
    1944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	8e 01       	movw	r16, r28
    194e:	05 5b       	subi	r16, 0xB5	; 181
    1950:	1f 4f       	sbci	r17, 0xFF	; 255
    1952:	bc 01       	movw	r22, r24
    1954:	cd 01       	movw	r24, r26
    1956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	f8 01       	movw	r30, r16
    1960:	91 83       	std	Z+1, r25	; 0x01
    1962:	80 83       	st	Z, r24
    1964:	1f c0       	rjmp	.+62     	; 0x19a4 <main+0xe0c>
    1966:	fe 01       	movw	r30, r28
    1968:	e7 5b       	subi	r30, 0xB7	; 183
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	88 ec       	ldi	r24, 0xC8	; 200
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	91 83       	std	Z+1, r25	; 0x01
    1972:	80 83       	st	Z, r24
    1974:	fe 01       	movw	r30, r28
    1976:	e7 5b       	subi	r30, 0xB7	; 183
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	80 81       	ld	r24, Z
    197c:	91 81       	ldd	r25, Z+1	; 0x01
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	f1 f7       	brne	.-4      	; 0x197e <main+0xde6>
    1982:	fe 01       	movw	r30, r28
    1984:	e7 5b       	subi	r30, 0xB7	; 183
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	91 83       	std	Z+1, r25	; 0x01
    198a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198c:	de 01       	movw	r26, r28
    198e:	a5 5b       	subi	r26, 0xB5	; 181
    1990:	bf 4f       	sbci	r27, 0xFF	; 255
    1992:	fe 01       	movw	r30, r28
    1994:	e5 5b       	subi	r30, 0xB5	; 181
    1996:	ff 4f       	sbci	r31, 0xFF	; 255
    1998:	80 81       	ld	r24, Z
    199a:	91 81       	ldd	r25, Z+1	; 0x01
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	11 96       	adiw	r26, 0x01	; 1
    19a0:	9c 93       	st	X, r25
    19a2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a4:	fe 01       	movw	r30, r28
    19a6:	e5 5b       	subi	r30, 0xB5	; 181
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	80 81       	ld	r24, Z
    19ac:	91 81       	ldd	r25, Z+1	; 0x01
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	d1 f6       	brne	.-76     	; 0x1966 <main+0xdce>
    19b2:	27 c0       	rjmp	.+78     	; 0x1a02 <main+0xe6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b4:	8e 01       	movw	r16, r28
    19b6:	05 5b       	subi	r16, 0xB5	; 181
    19b8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ba:	fe 01       	movw	r30, r28
    19bc:	e3 5b       	subi	r30, 0xB3	; 179
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	60 81       	ld	r22, Z
    19c2:	71 81       	ldd	r23, Z+1	; 0x01
    19c4:	82 81       	ldd	r24, Z+2	; 0x02
    19c6:	93 81       	ldd	r25, Z+3	; 0x03
    19c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	f8 01       	movw	r30, r16
    19d2:	91 83       	std	Z+1, r25	; 0x01
    19d4:	80 83       	st	Z, r24
    19d6:	de 01       	movw	r26, r28
    19d8:	a9 5b       	subi	r26, 0xB9	; 185
    19da:	bf 4f       	sbci	r27, 0xFF	; 255
    19dc:	fe 01       	movw	r30, r28
    19de:	e5 5b       	subi	r30, 0xB5	; 181
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	80 81       	ld	r24, Z
    19e4:	91 81       	ldd	r25, Z+1	; 0x01
    19e6:	8d 93       	st	X+, r24
    19e8:	9c 93       	st	X, r25
    19ea:	fe 01       	movw	r30, r28
    19ec:	e9 5b       	subi	r30, 0xB9	; 185
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	80 81       	ld	r24, Z
    19f2:	91 81       	ldd	r25, Z+1	; 0x01
    19f4:	01 97       	sbiw	r24, 0x01	; 1
    19f6:	f1 f7       	brne	.-4      	; 0x19f4 <main+0xe5c>
    19f8:	fe 01       	movw	r30, r28
    19fa:	e9 5b       	subi	r30, 0xB9	; 185
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	91 83       	std	Z+1, r25	; 0x01
    1a00:	80 83       	st	Z, r24
					_delay_ms(150000);
					//Timer_init(&Timer_ConfigType_1);
					//Timer_setCallBack(door_Lock_Timer,TIMER1);
					DcMotor_Rotate(STOP, 100);
    1a02:	82 e0       	ldi	r24, 0x02	; 2
    1a04:	64 e6       	ldi	r22, 0x64	; 100
    1a06:	0e 94 8a 10 	call	0x2114	; 0x2114 <DcMotor_Rotate>
    1a0a:	60 c3       	rjmp	.+1728   	; 0x20cc <main+0x1534>
				}
				/* Changing Password */
				else if (Action == 0) {
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	eb 53       	subi	r30, 0x3B	; 59
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	80 81       	ld	r24, Z
    1a14:	88 23       	and	r24, r24
    1a16:	09 f0       	breq	.+2      	; 0x1a1a <main+0xe82>
    1a18:	59 c3       	rjmp	.+1714   	; 0x20cc <main+0x1534>
					/* Receive the first password from HMI_ECU */
					for (int i = 0; i < 5; i++) {
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	e1 55       	subi	r30, 0x51	; 81
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	11 82       	std	Z+1, r1	; 0x01
    1a22:	10 82       	st	Z, r1
    1a24:	1b c0       	rjmp	.+54     	; 0x1a5c <main+0xec4>
						pass1[i] = UART_recieveByte();
    1a26:	fe 01       	movw	r30, r28
    1a28:	e1 55       	subi	r30, 0x51	; 81
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	00 81       	ld	r16, Z
    1a2e:	11 81       	ldd	r17, Z+1	; 0x01
    1a30:	0e 94 3e 19 	call	0x327c	; 0x327c <UART_recieveByte>
    1a34:	28 2f       	mov	r18, r24
    1a36:	ce 01       	movw	r24, r28
    1a38:	89 53       	subi	r24, 0x39	; 57
    1a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	e0 0f       	add	r30, r16
    1a40:	f1 1f       	adc	r31, r17
    1a42:	20 83       	st	Z, r18
					DcMotor_Rotate(STOP, 100);
				}
				/* Changing Password */
				else if (Action == 0) {
					/* Receive the first password from HMI_ECU */
					for (int i = 0; i < 5; i++) {
    1a44:	de 01       	movw	r26, r28
    1a46:	a1 55       	subi	r26, 0x51	; 81
    1a48:	bf 4f       	sbci	r27, 0xFF	; 255
    1a4a:	fe 01       	movw	r30, r28
    1a4c:	e1 55       	subi	r30, 0x51	; 81
    1a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a50:	80 81       	ld	r24, Z
    1a52:	91 81       	ldd	r25, Z+1	; 0x01
    1a54:	01 96       	adiw	r24, 0x01	; 1
    1a56:	11 96       	adiw	r26, 0x01	; 1
    1a58:	9c 93       	st	X, r25
    1a5a:	8e 93       	st	-X, r24
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	e1 55       	subi	r30, 0x51	; 81
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	80 81       	ld	r24, Z
    1a64:	91 81       	ldd	r25, Z+1	; 0x01
    1a66:	85 30       	cpi	r24, 0x05	; 5
    1a68:	91 05       	cpc	r25, r1
    1a6a:	ec f2       	brlt	.-70     	; 0x1a26 <main+0xe8e>
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	ed 5b       	subi	r30, 0xBD	; 189
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	a0 e2       	ldi	r26, 0x20	; 32
    1a78:	b1 e4       	ldi	r27, 0x41	; 65
    1a7a:	80 83       	st	Z, r24
    1a7c:	91 83       	std	Z+1, r25	; 0x01
    1a7e:	a2 83       	std	Z+2, r26	; 0x02
    1a80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a82:	8e 01       	movw	r16, r28
    1a84:	01 5c       	subi	r16, 0xC1	; 193
    1a86:	1f 4f       	sbci	r17, 0xFF	; 255
    1a88:	fe 01       	movw	r30, r28
    1a8a:	ed 5b       	subi	r30, 0xBD	; 189
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	60 81       	ld	r22, Z
    1a90:	71 81       	ldd	r23, Z+1	; 0x01
    1a92:	82 81       	ldd	r24, Z+2	; 0x02
    1a94:	93 81       	ldd	r25, Z+3	; 0x03
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	4a ef       	ldi	r20, 0xFA	; 250
    1a9c:	54 e4       	ldi	r21, 0x44	; 68
    1a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	f8 01       	movw	r30, r16
    1aa8:	80 83       	st	Z, r24
    1aaa:	91 83       	std	Z+1, r25	; 0x01
    1aac:	a2 83       	std	Z+2, r26	; 0x02
    1aae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ab0:	fe 01       	movw	r30, r28
    1ab2:	ff 96       	adiw	r30, 0x3f	; 63
    1ab4:	60 81       	ld	r22, Z
    1ab6:	71 81       	ldd	r23, Z+1	; 0x01
    1ab8:	82 81       	ldd	r24, Z+2	; 0x02
    1aba:	93 81       	ldd	r25, Z+3	; 0x03
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	40 e8       	ldi	r20, 0x80	; 128
    1ac2:	5f e3       	ldi	r21, 0x3F	; 63
    1ac4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ac8:	88 23       	and	r24, r24
    1aca:	2c f4       	brge	.+10     	; 0x1ad6 <main+0xf3e>
		__ticks = 1;
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	9e af       	std	Y+62, r25	; 0x3e
    1ad2:	8d af       	std	Y+61, r24	; 0x3d
    1ad4:	46 c0       	rjmp	.+140    	; 0x1b62 <main+0xfca>
	else if (__tmp > 65535)
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	ff 96       	adiw	r30, 0x3f	; 63
    1ada:	60 81       	ld	r22, Z
    1adc:	71 81       	ldd	r23, Z+1	; 0x01
    1ade:	82 81       	ldd	r24, Z+2	; 0x02
    1ae0:	93 81       	ldd	r25, Z+3	; 0x03
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	3f ef       	ldi	r19, 0xFF	; 255
    1ae6:	4f e7       	ldi	r20, 0x7F	; 127
    1ae8:	57 e4       	ldi	r21, 0x47	; 71
    1aea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aee:	18 16       	cp	r1, r24
    1af0:	64 f5       	brge	.+88     	; 0x1b4a <main+0xfb2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af2:	fe 01       	movw	r30, r28
    1af4:	ed 5b       	subi	r30, 0xBD	; 189
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	60 81       	ld	r22, Z
    1afa:	71 81       	ldd	r23, Z+1	; 0x01
    1afc:	82 81       	ldd	r24, Z+2	; 0x02
    1afe:	93 81       	ldd	r25, Z+3	; 0x03
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e2       	ldi	r20, 0x20	; 32
    1b06:	51 e4       	ldi	r21, 0x41	; 65
    1b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	bc 01       	movw	r22, r24
    1b12:	cd 01       	movw	r24, r26
    1b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	9e af       	std	Y+62, r25	; 0x3e
    1b1e:	8d af       	std	Y+61, r24	; 0x3d
    1b20:	0f c0       	rjmp	.+30     	; 0x1b40 <main+0xfa8>
    1b22:	88 ec       	ldi	r24, 0xC8	; 200
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	9c af       	std	Y+60, r25	; 0x3c
    1b28:	8b af       	std	Y+59, r24	; 0x3b
    1b2a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b2c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	f1 f7       	brne	.-4      	; 0x1b2e <main+0xf96>
    1b32:	9c af       	std	Y+60, r25	; 0x3c
    1b34:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b36:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b38:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	9e af       	std	Y+62, r25	; 0x3e
    1b3e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b40:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b42:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	69 f7       	brne	.-38     	; 0x1b22 <main+0xf8a>
    1b48:	16 c0       	rjmp	.+44     	; 0x1b76 <main+0xfde>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	ff 96       	adiw	r30, 0x3f	; 63
    1b4e:	60 81       	ld	r22, Z
    1b50:	71 81       	ldd	r23, Z+1	; 0x01
    1b52:	82 81       	ldd	r24, Z+2	; 0x02
    1b54:	93 81       	ldd	r25, Z+3	; 0x03
    1b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	9e af       	std	Y+62, r25	; 0x3e
    1b60:	8d af       	std	Y+61, r24	; 0x3d
    1b62:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b64:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b66:	9a af       	std	Y+58, r25	; 0x3a
    1b68:	89 af       	std	Y+57, r24	; 0x39
    1b6a:	89 ad       	ldd	r24, Y+57	; 0x39
    1b6c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	f1 f7       	brne	.-4      	; 0x1b6e <main+0xfd6>
    1b72:	9a af       	std	Y+58, r25	; 0x3a
    1b74:	89 af       	std	Y+57, r24	; 0x39
						pass1[i] = UART_recieveByte();
					}
					_delay_ms(10);
					/* Receive the second password from HMI_ECU */
					for (int i = 0; i < 5; i++) {
    1b76:	fe 01       	movw	r30, r28
    1b78:	e3 55       	subi	r30, 0x53	; 83
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	11 82       	std	Z+1, r1	; 0x01
    1b7e:	10 82       	st	Z, r1
    1b80:	1b c0       	rjmp	.+54     	; 0x1bb8 <main+0x1020>
						pass2[i] = UART_recieveByte();
    1b82:	fe 01       	movw	r30, r28
    1b84:	e3 55       	subi	r30, 0x53	; 83
    1b86:	ff 4f       	sbci	r31, 0xFF	; 255
    1b88:	00 81       	ld	r16, Z
    1b8a:	11 81       	ldd	r17, Z+1	; 0x01
    1b8c:	0e 94 3e 19 	call	0x327c	; 0x327c <UART_recieveByte>
    1b90:	28 2f       	mov	r18, r24
    1b92:	ce 01       	movw	r24, r28
    1b94:	84 53       	subi	r24, 0x34	; 52
    1b96:	9f 4f       	sbci	r25, 0xFF	; 255
    1b98:	fc 01       	movw	r30, r24
    1b9a:	e0 0f       	add	r30, r16
    1b9c:	f1 1f       	adc	r31, r17
    1b9e:	20 83       	st	Z, r18
					for (int i = 0; i < 5; i++) {
						pass1[i] = UART_recieveByte();
					}
					_delay_ms(10);
					/* Receive the second password from HMI_ECU */
					for (int i = 0; i < 5; i++) {
    1ba0:	de 01       	movw	r26, r28
    1ba2:	a3 55       	subi	r26, 0x53	; 83
    1ba4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ba6:	fe 01       	movw	r30, r28
    1ba8:	e3 55       	subi	r30, 0x53	; 83
    1baa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bac:	80 81       	ld	r24, Z
    1bae:	91 81       	ldd	r25, Z+1	; 0x01
    1bb0:	01 96       	adiw	r24, 0x01	; 1
    1bb2:	11 96       	adiw	r26, 0x01	; 1
    1bb4:	9c 93       	st	X, r25
    1bb6:	8e 93       	st	-X, r24
    1bb8:	fe 01       	movw	r30, r28
    1bba:	e3 55       	subi	r30, 0x53	; 83
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	80 81       	ld	r24, Z
    1bc0:	91 81       	ldd	r25, Z+1	; 0x01
    1bc2:	85 30       	cpi	r24, 0x05	; 5
    1bc4:	91 05       	cpc	r25, r1
    1bc6:	ec f2       	brlt	.-70     	; 0x1b82 <main+0xfea>
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	a0 e2       	ldi	r26, 0x20	; 32
    1bce:	b1 e4       	ldi	r27, 0x41	; 65
    1bd0:	8d ab       	std	Y+53, r24	; 0x35
    1bd2:	9e ab       	std	Y+54, r25	; 0x36
    1bd4:	af ab       	std	Y+55, r26	; 0x37
    1bd6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd8:	6d a9       	ldd	r22, Y+53	; 0x35
    1bda:	7e a9       	ldd	r23, Y+54	; 0x36
    1bdc:	8f a9       	ldd	r24, Y+55	; 0x37
    1bde:	98 ad       	ldd	r25, Y+56	; 0x38
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	4a ef       	ldi	r20, 0xFA	; 250
    1be6:	54 e4       	ldi	r21, 0x44	; 68
    1be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	89 ab       	std	Y+49, r24	; 0x31
    1bf2:	9a ab       	std	Y+50, r25	; 0x32
    1bf4:	ab ab       	std	Y+51, r26	; 0x33
    1bf6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bf8:	69 a9       	ldd	r22, Y+49	; 0x31
    1bfa:	7a a9       	ldd	r23, Y+50	; 0x32
    1bfc:	8b a9       	ldd	r24, Y+51	; 0x33
    1bfe:	9c a9       	ldd	r25, Y+52	; 0x34
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e8       	ldi	r20, 0x80	; 128
    1c06:	5f e3       	ldi	r21, 0x3F	; 63
    1c08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c0c:	88 23       	and	r24, r24
    1c0e:	2c f4       	brge	.+10     	; 0x1c1a <main+0x1082>
		__ticks = 1;
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	98 ab       	std	Y+48, r25	; 0x30
    1c16:	8f a7       	std	Y+47, r24	; 0x2f
    1c18:	3f c0       	rjmp	.+126    	; 0x1c98 <main+0x1100>
	else if (__tmp > 65535)
    1c1a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c1c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c1e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c20:	9c a9       	ldd	r25, Y+52	; 0x34
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	3f ef       	ldi	r19, 0xFF	; 255
    1c26:	4f e7       	ldi	r20, 0x7F	; 127
    1c28:	57 e4       	ldi	r21, 0x47	; 71
    1c2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c2e:	18 16       	cp	r1, r24
    1c30:	4c f5       	brge	.+82     	; 0x1c84 <main+0x10ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c32:	6d a9       	ldd	r22, Y+53	; 0x35
    1c34:	7e a9       	ldd	r23, Y+54	; 0x36
    1c36:	8f a9       	ldd	r24, Y+55	; 0x37
    1c38:	98 ad       	ldd	r25, Y+56	; 0x38
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	40 e2       	ldi	r20, 0x20	; 32
    1c40:	51 e4       	ldi	r21, 0x41	; 65
    1c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	bc 01       	movw	r22, r24
    1c4c:	cd 01       	movw	r24, r26
    1c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	98 ab       	std	Y+48, r25	; 0x30
    1c58:	8f a7       	std	Y+47, r24	; 0x2f
    1c5a:	0f c0       	rjmp	.+30     	; 0x1c7a <main+0x10e2>
    1c5c:	88 ec       	ldi	r24, 0xC8	; 200
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	9e a7       	std	Y+46, r25	; 0x2e
    1c62:	8d a7       	std	Y+45, r24	; 0x2d
    1c64:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c66:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	f1 f7       	brne	.-4      	; 0x1c68 <main+0x10d0>
    1c6c:	9e a7       	std	Y+46, r25	; 0x2e
    1c6e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c70:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c72:	98 a9       	ldd	r25, Y+48	; 0x30
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	98 ab       	std	Y+48, r25	; 0x30
    1c78:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c7c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	69 f7       	brne	.-38     	; 0x1c5c <main+0x10c4>
    1c82:	14 c0       	rjmp	.+40     	; 0x1cac <main+0x1114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c84:	69 a9       	ldd	r22, Y+49	; 0x31
    1c86:	7a a9       	ldd	r23, Y+50	; 0x32
    1c88:	8b a9       	ldd	r24, Y+51	; 0x33
    1c8a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	98 ab       	std	Y+48, r25	; 0x30
    1c96:	8f a7       	std	Y+47, r24	; 0x2f
    1c98:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c9a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c9c:	9c a7       	std	Y+44, r25	; 0x2c
    1c9e:	8b a7       	std	Y+43, r24	; 0x2b
    1ca0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ca2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	f1 f7       	brne	.-4      	; 0x1ca4 <main+0x110c>
    1ca8:	9c a7       	std	Y+44, r25	; 0x2c
    1caa:	8b a7       	std	Y+43, r24	; 0x2b
						pass2[i] = UART_recieveByte();
					}
					_delay_ms(10);
					/* Compare the 2 passwords */
					for (int j = 0; j < 5; j++) {
    1cac:	fe 01       	movw	r30, r28
    1cae:	e5 55       	subi	r30, 0x55	; 85
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	11 82       	std	Z+1, r1	; 0x01
    1cb4:	10 82       	st	Z, r1
    1cb6:	30 c0       	rjmp	.+96     	; 0x1d18 <main+0x1180>
						if (pass1[j] != pass2[j]) {
    1cb8:	fe 01       	movw	r30, r28
    1cba:	e5 55       	subi	r30, 0x55	; 85
    1cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbe:	20 81       	ld	r18, Z
    1cc0:	31 81       	ldd	r19, Z+1	; 0x01
    1cc2:	ce 01       	movw	r24, r28
    1cc4:	89 53       	subi	r24, 0x39	; 57
    1cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc8:	fc 01       	movw	r30, r24
    1cca:	e2 0f       	add	r30, r18
    1ccc:	f3 1f       	adc	r31, r19
    1cce:	40 81       	ld	r20, Z
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	e5 55       	subi	r30, 0x55	; 85
    1cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd6:	20 81       	ld	r18, Z
    1cd8:	31 81       	ldd	r19, Z+1	; 0x01
    1cda:	ce 01       	movw	r24, r28
    1cdc:	84 53       	subi	r24, 0x34	; 52
    1cde:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	e2 0f       	add	r30, r18
    1ce4:	f3 1f       	adc	r31, r19
    1ce6:	80 81       	ld	r24, Z
    1ce8:	48 17       	cp	r20, r24
    1cea:	29 f0       	breq	.+10     	; 0x1cf6 <main+0x115e>
							flag2 = 0;
    1cec:	fe 01       	movw	r30, r28
    1cee:	ee 53       	subi	r30, 0x3E	; 62
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	10 82       	st	Z, r1
    1cf4:	19 c0       	rjmp	.+50     	; 0x1d28 <main+0x1190>
							break;
						} else if (pass1[j] == pass2[j]) {
						}
						flag2 = 1;
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	ee 53       	subi	r30, 0x3E	; 62
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	80 83       	st	Z, r24
					for (int i = 0; i < 5; i++) {
						pass2[i] = UART_recieveByte();
					}
					_delay_ms(10);
					/* Compare the 2 passwords */
					for (int j = 0; j < 5; j++) {
    1d00:	de 01       	movw	r26, r28
    1d02:	a5 55       	subi	r26, 0x55	; 85
    1d04:	bf 4f       	sbci	r27, 0xFF	; 255
    1d06:	fe 01       	movw	r30, r28
    1d08:	e5 55       	subi	r30, 0x55	; 85
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	80 81       	ld	r24, Z
    1d0e:	91 81       	ldd	r25, Z+1	; 0x01
    1d10:	01 96       	adiw	r24, 0x01	; 1
    1d12:	11 96       	adiw	r26, 0x01	; 1
    1d14:	9c 93       	st	X, r25
    1d16:	8e 93       	st	-X, r24
    1d18:	fe 01       	movw	r30, r28
    1d1a:	e5 55       	subi	r30, 0x55	; 85
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	80 81       	ld	r24, Z
    1d20:	91 81       	ldd	r25, Z+1	; 0x01
    1d22:	85 30       	cpi	r24, 0x05	; 5
    1d24:	91 05       	cpc	r25, r1
    1d26:	44 f2       	brlt	.-112    	; 0x1cb8 <main+0x1120>
						} else if (pass1[j] == pass2[j]) {
						}
						flag2 = 1;
					}
					/* Save the system password in the EEPROM in case the 2 passwords are equal */
					if (flag2 == 1) {
    1d28:	fe 01       	movw	r30, r28
    1d2a:	ee 53       	subi	r30, 0x3E	; 62
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	80 81       	ld	r24, Z
    1d30:	81 30       	cpi	r24, 0x01	; 1
    1d32:	09 f0       	breq	.+2      	; 0x1d36 <main+0x119e>
    1d34:	bb c0       	rjmp	.+374    	; 0x1eac <main+0x1314>
						for (int j = 0; j < 5; j++) {
    1d36:	fe 01       	movw	r30, r28
    1d38:	e7 55       	subi	r30, 0x57	; 87
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	11 82       	std	Z+1, r1	; 0x01
    1d3e:	10 82       	st	Z, r1
    1d40:	ac c0       	rjmp	.+344    	; 0x1e9a <main+0x1302>
							EEPROM_writeByte((0x0311 + j), pass1[j]);
    1d42:	fe 01       	movw	r30, r28
    1d44:	e7 55       	subi	r30, 0x57	; 87
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	80 81       	ld	r24, Z
    1d4a:	91 81       	ldd	r25, Z+1	; 0x01
    1d4c:	8f 5e       	subi	r24, 0xEF	; 239
    1d4e:	9c 4f       	sbci	r25, 0xFC	; 252
    1d50:	ac 01       	movw	r20, r24
    1d52:	fe 01       	movw	r30, r28
    1d54:	e7 55       	subi	r30, 0x57	; 87
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	20 81       	ld	r18, Z
    1d5a:	31 81       	ldd	r19, Z+1	; 0x01
    1d5c:	ce 01       	movw	r24, r28
    1d5e:	89 53       	subi	r24, 0x39	; 57
    1d60:	9f 4f       	sbci	r25, 0xFF	; 255
    1d62:	fc 01       	movw	r30, r24
    1d64:	e2 0f       	add	r30, r18
    1d66:	f3 1f       	adc	r31, r19
    1d68:	20 81       	ld	r18, Z
    1d6a:	ca 01       	movw	r24, r20
    1d6c:	62 2f       	mov	r22, r18
    1d6e:	0e 94 0d 14 	call	0x281a	; 0x281a <EEPROM_writeByte>
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	a0 e2       	ldi	r26, 0x20	; 32
    1d78:	b1 e4       	ldi	r27, 0x41	; 65
    1d7a:	8f a3       	std	Y+39, r24	; 0x27
    1d7c:	98 a7       	std	Y+40, r25	; 0x28
    1d7e:	a9 a7       	std	Y+41, r26	; 0x29
    1d80:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d82:	6f a1       	ldd	r22, Y+39	; 0x27
    1d84:	78 a5       	ldd	r23, Y+40	; 0x28
    1d86:	89 a5       	ldd	r24, Y+41	; 0x29
    1d88:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	4a ef       	ldi	r20, 0xFA	; 250
    1d90:	54 e4       	ldi	r21, 0x44	; 68
    1d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	8b a3       	std	Y+35, r24	; 0x23
    1d9c:	9c a3       	std	Y+36, r25	; 0x24
    1d9e:	ad a3       	std	Y+37, r26	; 0x25
    1da0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1da2:	6b a1       	ldd	r22, Y+35	; 0x23
    1da4:	7c a1       	ldd	r23, Y+36	; 0x24
    1da6:	8d a1       	ldd	r24, Y+37	; 0x25
    1da8:	9e a1       	ldd	r25, Y+38	; 0x26
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	40 e8       	ldi	r20, 0x80	; 128
    1db0:	5f e3       	ldi	r21, 0x3F	; 63
    1db2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1db6:	88 23       	and	r24, r24
    1db8:	2c f4       	brge	.+10     	; 0x1dc4 <main+0x122c>
		__ticks = 1;
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	9a a3       	std	Y+34, r25	; 0x22
    1dc0:	89 a3       	std	Y+33, r24	; 0x21
    1dc2:	3f c0       	rjmp	.+126    	; 0x1e42 <main+0x12aa>
	else if (__tmp > 65535)
    1dc4:	6b a1       	ldd	r22, Y+35	; 0x23
    1dc6:	7c a1       	ldd	r23, Y+36	; 0x24
    1dc8:	8d a1       	ldd	r24, Y+37	; 0x25
    1dca:	9e a1       	ldd	r25, Y+38	; 0x26
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	3f ef       	ldi	r19, 0xFF	; 255
    1dd0:	4f e7       	ldi	r20, 0x7F	; 127
    1dd2:	57 e4       	ldi	r21, 0x47	; 71
    1dd4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dd8:	18 16       	cp	r1, r24
    1dda:	4c f5       	brge	.+82     	; 0x1e2e <main+0x1296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ddc:	6f a1       	ldd	r22, Y+39	; 0x27
    1dde:	78 a5       	ldd	r23, Y+40	; 0x28
    1de0:	89 a5       	ldd	r24, Y+41	; 0x29
    1de2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e2       	ldi	r20, 0x20	; 32
    1dea:	51 e4       	ldi	r21, 0x41	; 65
    1dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	bc 01       	movw	r22, r24
    1df6:	cd 01       	movw	r24, r26
    1df8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	9a a3       	std	Y+34, r25	; 0x22
    1e02:	89 a3       	std	Y+33, r24	; 0x21
    1e04:	0f c0       	rjmp	.+30     	; 0x1e24 <main+0x128c>
    1e06:	88 ec       	ldi	r24, 0xC8	; 200
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	98 a3       	std	Y+32, r25	; 0x20
    1e0c:	8f 8f       	std	Y+31, r24	; 0x1f
    1e0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e10:	98 a1       	ldd	r25, Y+32	; 0x20
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	f1 f7       	brne	.-4      	; 0x1e12 <main+0x127a>
    1e16:	98 a3       	std	Y+32, r25	; 0x20
    1e18:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e1c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	9a a3       	std	Y+34, r25	; 0x22
    1e22:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e24:	89 a1       	ldd	r24, Y+33	; 0x21
    1e26:	9a a1       	ldd	r25, Y+34	; 0x22
    1e28:	00 97       	sbiw	r24, 0x00	; 0
    1e2a:	69 f7       	brne	.-38     	; 0x1e06 <main+0x126e>
    1e2c:	14 c0       	rjmp	.+40     	; 0x1e56 <main+0x12be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e30:	7c a1       	ldd	r23, Y+36	; 0x24
    1e32:	8d a1       	ldd	r24, Y+37	; 0x25
    1e34:	9e a1       	ldd	r25, Y+38	; 0x26
    1e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	9a a3       	std	Y+34, r25	; 0x22
    1e40:	89 a3       	std	Y+33, r24	; 0x21
    1e42:	89 a1       	ldd	r24, Y+33	; 0x21
    1e44:	9a a1       	ldd	r25, Y+34	; 0x22
    1e46:	9e 8f       	std	Y+30, r25	; 0x1e
    1e48:	8d 8f       	std	Y+29, r24	; 0x1d
    1e4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e4c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	f1 f7       	brne	.-4      	; 0x1e4e <main+0x12b6>
    1e52:	9e 8f       	std	Y+30, r25	; 0x1e
    1e54:	8d 8f       	std	Y+29, r24	; 0x1d
							_delay_ms(10);
							EEPROM_readByte((0x0311 + j), &(saved_pass[j]));
    1e56:	fe 01       	movw	r30, r28
    1e58:	e7 55       	subi	r30, 0x57	; 87
    1e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5c:	80 81       	ld	r24, Z
    1e5e:	91 81       	ldd	r25, Z+1	; 0x01
    1e60:	8f 5e       	subi	r24, 0xEF	; 239
    1e62:	9c 4f       	sbci	r25, 0xFC	; 252
    1e64:	ac 01       	movw	r20, r24
    1e66:	fe 01       	movw	r30, r28
    1e68:	e7 55       	subi	r30, 0x57	; 87
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	80 81       	ld	r24, Z
    1e6e:	91 81       	ldd	r25, Z+1	; 0x01
    1e70:	9e 01       	movw	r18, r28
    1e72:	2a 52       	subi	r18, 0x2A	; 42
    1e74:	3f 4f       	sbci	r19, 0xFF	; 255
    1e76:	28 0f       	add	r18, r24
    1e78:	39 1f       	adc	r19, r25
    1e7a:	ca 01       	movw	r24, r20
    1e7c:	b9 01       	movw	r22, r18
    1e7e:	0e 94 4e 14 	call	0x289c	; 0x289c <EEPROM_readByte>
						}
						flag2 = 1;
					}
					/* Save the system password in the EEPROM in case the 2 passwords are equal */
					if (flag2 == 1) {
						for (int j = 0; j < 5; j++) {
    1e82:	de 01       	movw	r26, r28
    1e84:	a7 55       	subi	r26, 0x57	; 87
    1e86:	bf 4f       	sbci	r27, 0xFF	; 255
    1e88:	fe 01       	movw	r30, r28
    1e8a:	e7 55       	subi	r30, 0x57	; 87
    1e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8e:	80 81       	ld	r24, Z
    1e90:	91 81       	ldd	r25, Z+1	; 0x01
    1e92:	01 96       	adiw	r24, 0x01	; 1
    1e94:	11 96       	adiw	r26, 0x01	; 1
    1e96:	9c 93       	st	X, r25
    1e98:	8e 93       	st	-X, r24
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	e7 55       	subi	r30, 0x57	; 87
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	80 81       	ld	r24, Z
    1ea2:	91 81       	ldd	r25, Z+1	; 0x01
    1ea4:	85 30       	cpi	r24, 0x05	; 5
    1ea6:	91 05       	cpc	r25, r1
    1ea8:	0c f4       	brge	.+2      	; 0x1eac <main+0x1314>
    1eaa:	4b cf       	rjmp	.-362    	; 0x1d42 <main+0x11aa>
							EEPROM_writeByte((0x0311 + j), pass1[j]);
							_delay_ms(10);
							EEPROM_readByte((0x0311 + j), &(saved_pass[j]));
						}
					}
					UART_sendByte(flag2);
    1eac:	fe 01       	movw	r30, r28
    1eae:	ee 53       	subi	r30, 0x3E	; 62
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	80 81       	ld	r24, Z
    1eb4:	0e 94 27 19 	call	0x324e	; 0x324e <UART_sendByte>
    1eb8:	09 c1       	rjmp	.+530    	; 0x20cc <main+0x1534>
				}
			}
			else if (flag == 0) {
    1eba:	fe 01       	movw	r30, r28
    1ebc:	ea 53       	subi	r30, 0x3A	; 58
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	80 81       	ld	r24, Z
    1ec2:	88 23       	and	r24, r24
    1ec4:	09 f0       	breq	.+2      	; 0x1ec8 <main+0x1330>
    1ec6:	02 c1       	rjmp	.+516    	; 0x20cc <main+0x1534>
				/* Send a byte to the HMI_ECU to let it know whether the new password is correct or not */
				UART_sendByte(wrong_pass);
    1ec8:	fe 01       	movw	r30, r28
    1eca:	ef 53       	subi	r30, 0x3F	; 63
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	80 81       	ld	r24, Z
    1ed0:	0e 94 27 19 	call	0x324e	; 0x324e <UART_sendByte>
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	aa e7       	ldi	r26, 0x7A	; 122
    1eda:	b4 e4       	ldi	r27, 0x44	; 68
    1edc:	89 8f       	std	Y+25, r24	; 0x19
    1ede:	9a 8f       	std	Y+26, r25	; 0x1a
    1ee0:	ab 8f       	std	Y+27, r26	; 0x1b
    1ee2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ee6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ee8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	4a ef       	ldi	r20, 0xFA	; 250
    1ef2:	54 e4       	ldi	r21, 0x44	; 68
    1ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	8d 8b       	std	Y+21, r24	; 0x15
    1efe:	9e 8b       	std	Y+22, r25	; 0x16
    1f00:	af 8b       	std	Y+23, r26	; 0x17
    1f02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f04:	6d 89       	ldd	r22, Y+21	; 0x15
    1f06:	7e 89       	ldd	r23, Y+22	; 0x16
    1f08:	8f 89       	ldd	r24, Y+23	; 0x17
    1f0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	40 e8       	ldi	r20, 0x80	; 128
    1f12:	5f e3       	ldi	r21, 0x3F	; 63
    1f14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f18:	88 23       	and	r24, r24
    1f1a:	2c f4       	brge	.+10     	; 0x1f26 <main+0x138e>
		__ticks = 1;
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	9c 8b       	std	Y+20, r25	; 0x14
    1f22:	8b 8b       	std	Y+19, r24	; 0x13
    1f24:	3f c0       	rjmp	.+126    	; 0x1fa4 <main+0x140c>
	else if (__tmp > 65535)
    1f26:	6d 89       	ldd	r22, Y+21	; 0x15
    1f28:	7e 89       	ldd	r23, Y+22	; 0x16
    1f2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	3f ef       	ldi	r19, 0xFF	; 255
    1f32:	4f e7       	ldi	r20, 0x7F	; 127
    1f34:	57 e4       	ldi	r21, 0x47	; 71
    1f36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f3a:	18 16       	cp	r1, r24
    1f3c:	4c f5       	brge	.+82     	; 0x1f90 <main+0x13f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f3e:	69 8d       	ldd	r22, Y+25	; 0x19
    1f40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e2       	ldi	r20, 0x20	; 32
    1f4c:	51 e4       	ldi	r21, 0x41	; 65
    1f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	bc 01       	movw	r22, r24
    1f58:	cd 01       	movw	r24, r26
    1f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	9c 8b       	std	Y+20, r25	; 0x14
    1f64:	8b 8b       	std	Y+19, r24	; 0x13
    1f66:	0f c0       	rjmp	.+30     	; 0x1f86 <main+0x13ee>
    1f68:	88 ec       	ldi	r24, 0xC8	; 200
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	9a 8b       	std	Y+18, r25	; 0x12
    1f6e:	89 8b       	std	Y+17, r24	; 0x11
    1f70:	89 89       	ldd	r24, Y+17	; 0x11
    1f72:	9a 89       	ldd	r25, Y+18	; 0x12
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <main+0x13dc>
    1f78:	9a 8b       	std	Y+18, r25	; 0x12
    1f7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	9c 8b       	std	Y+20, r25	; 0x14
    1f84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f86:	8b 89       	ldd	r24, Y+19	; 0x13
    1f88:	9c 89       	ldd	r25, Y+20	; 0x14
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	69 f7       	brne	.-38     	; 0x1f68 <main+0x13d0>
    1f8e:	14 c0       	rjmp	.+40     	; 0x1fb8 <main+0x1420>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f90:	6d 89       	ldd	r22, Y+21	; 0x15
    1f92:	7e 89       	ldd	r23, Y+22	; 0x16
    1f94:	8f 89       	ldd	r24, Y+23	; 0x17
    1f96:	98 8d       	ldd	r25, Y+24	; 0x18
    1f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	9c 8b       	std	Y+20, r25	; 0x14
    1fa2:	8b 8b       	std	Y+19, r24	; 0x13
    1fa4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa8:	98 8b       	std	Y+16, r25	; 0x10
    1faa:	8f 87       	std	Y+15, r24	; 0x0f
    1fac:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fae:	98 89       	ldd	r25, Y+16	; 0x10
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	f1 f7       	brne	.-4      	; 0x1fb0 <main+0x1418>
    1fb4:	98 8b       	std	Y+16, r25	; 0x10
    1fb6:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1000);
				error_Check = UART_recieveByte();
    1fb8:	0e 94 3e 19 	call	0x327c	; 0x327c <UART_recieveByte>
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	e1 54       	subi	r30, 0x41	; 65
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	80 83       	st	Z, r24
				/* if the password is not correct for 3 consecutive times, warning system triggers  */
				if (error_Check == 0){}
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	e1 54       	subi	r30, 0x41	; 65
    1fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fca:	80 81       	ld	r24, Z
    1fcc:	88 23       	and	r24, r24
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <main+0x143a>
    1fd0:	7d c0       	rjmp	.+250    	; 0x20cc <main+0x1534>
				else if (error_Check == 1) {
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	e1 54       	subi	r30, 0x41	; 65
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	80 81       	ld	r24, Z
    1fda:	81 30       	cpi	r24, 0x01	; 1
    1fdc:	09 f0       	breq	.+2      	; 0x1fe0 <main+0x1448>
    1fde:	76 c0       	rjmp	.+236    	; 0x20cc <main+0x1534>
					Buzzer_on();
    1fe0:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	9c e7       	ldi	r25, 0x7C	; 124
    1fe8:	a2 e1       	ldi	r26, 0x12	; 18
    1fea:	b8 e4       	ldi	r27, 0x48	; 72
    1fec:	8b 87       	std	Y+11, r24	; 0x0b
    1fee:	9c 87       	std	Y+12, r25	; 0x0c
    1ff0:	ad 87       	std	Y+13, r26	; 0x0d
    1ff2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ff6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ffa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	4a ef       	ldi	r20, 0xFA	; 250
    2002:	54 e4       	ldi	r21, 0x44	; 68
    2004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	8f 83       	std	Y+7, r24	; 0x07
    200e:	98 87       	std	Y+8, r25	; 0x08
    2010:	a9 87       	std	Y+9, r26	; 0x09
    2012:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2014:	6f 81       	ldd	r22, Y+7	; 0x07
    2016:	78 85       	ldd	r23, Y+8	; 0x08
    2018:	89 85       	ldd	r24, Y+9	; 0x09
    201a:	9a 85       	ldd	r25, Y+10	; 0x0a
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e8       	ldi	r20, 0x80	; 128
    2022:	5f e3       	ldi	r21, 0x3F	; 63
    2024:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2028:	88 23       	and	r24, r24
    202a:	2c f4       	brge	.+10     	; 0x2036 <main+0x149e>
		__ticks = 1;
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	9e 83       	std	Y+6, r25	; 0x06
    2032:	8d 83       	std	Y+5, r24	; 0x05
    2034:	3f c0       	rjmp	.+126    	; 0x20b4 <main+0x151c>
	else if (__tmp > 65535)
    2036:	6f 81       	ldd	r22, Y+7	; 0x07
    2038:	78 85       	ldd	r23, Y+8	; 0x08
    203a:	89 85       	ldd	r24, Y+9	; 0x09
    203c:	9a 85       	ldd	r25, Y+10	; 0x0a
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	3f ef       	ldi	r19, 0xFF	; 255
    2042:	4f e7       	ldi	r20, 0x7F	; 127
    2044:	57 e4       	ldi	r21, 0x47	; 71
    2046:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    204a:	18 16       	cp	r1, r24
    204c:	4c f5       	brge	.+82     	; 0x20a0 <main+0x1508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2050:	7c 85       	ldd	r23, Y+12	; 0x0c
    2052:	8d 85       	ldd	r24, Y+13	; 0x0d
    2054:	9e 85       	ldd	r25, Y+14	; 0x0e
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e2       	ldi	r20, 0x20	; 32
    205c:	51 e4       	ldi	r21, 0x41	; 65
    205e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	bc 01       	movw	r22, r24
    2068:	cd 01       	movw	r24, r26
    206a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	9e 83       	std	Y+6, r25	; 0x06
    2074:	8d 83       	std	Y+5, r24	; 0x05
    2076:	0f c0       	rjmp	.+30     	; 0x2096 <main+0x14fe>
    2078:	88 ec       	ldi	r24, 0xC8	; 200
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	9c 83       	std	Y+4, r25	; 0x04
    207e:	8b 83       	std	Y+3, r24	; 0x03
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	9c 81       	ldd	r25, Y+4	; 0x04
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	f1 f7       	brne	.-4      	; 0x2084 <main+0x14ec>
    2088:	9c 83       	std	Y+4, r25	; 0x04
    208a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    208c:	8d 81       	ldd	r24, Y+5	; 0x05
    208e:	9e 81       	ldd	r25, Y+6	; 0x06
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	9e 83       	std	Y+6, r25	; 0x06
    2094:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2096:	8d 81       	ldd	r24, Y+5	; 0x05
    2098:	9e 81       	ldd	r25, Y+6	; 0x06
    209a:	00 97       	sbiw	r24, 0x00	; 0
    209c:	69 f7       	brne	.-38     	; 0x2078 <main+0x14e0>
    209e:	14 c0       	rjmp	.+40     	; 0x20c8 <main+0x1530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a0:	6f 81       	ldd	r22, Y+7	; 0x07
    20a2:	78 85       	ldd	r23, Y+8	; 0x08
    20a4:	89 85       	ldd	r24, Y+9	; 0x09
    20a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	9e 83       	std	Y+6, r25	; 0x06
    20b2:	8d 83       	std	Y+5, r24	; 0x05
    20b4:	8d 81       	ldd	r24, Y+5	; 0x05
    20b6:	9e 81       	ldd	r25, Y+6	; 0x06
    20b8:	9a 83       	std	Y+2, r25	; 0x02
    20ba:	89 83       	std	Y+1, r24	; 0x01
    20bc:	89 81       	ldd	r24, Y+1	; 0x01
    20be:	9a 81       	ldd	r25, Y+2	; 0x02
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	f1 f7       	brne	.-4      	; 0x20c0 <main+0x1528>
    20c4:	9a 83       	std	Y+2, r25	; 0x02
    20c6:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(150000);
					//Timer_init(&Timer_ConfigType_1);
					//Timer_setCallBack(buzzer_Timer,TIMER1);
					Buzzer_off();
    20c8:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
				_delay_ms(10);
				EEPROM_readByte((0x0311 + j), &(saved_pass[j]));
			}
		}
		/* if the password is correct, proceed the application */
		while (flag1 == 1) {
    20cc:	fe 01       	movw	r30, r28
    20ce:	ec 53       	subi	r30, 0x3C	; 60
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	80 81       	ld	r24, Z
    20d4:	81 30       	cpi	r24, 0x01	; 1
    20d6:	09 f4       	brne	.+2      	; 0x20da <main+0x1542>
    20d8:	f7 c8       	rjmp	.-3602   	; 0x12c8 <main+0x730>
    20da:	0c 94 61 06 	jmp	0xcc2	; 0xcc2 <main+0x12a>

000020de <DcMotor_Init>:
#include "DC_Motor.h"
#include "gpio.h"
#include "PWM.h"
#include <avr/io.h>

void DcMotor_Init(void) {
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
	/* Initializes the DC motor by setting the direction for the motor pins and stopping the motor at the beginning */
	GPIO_setupPinDirection(PORTD_ID, PIN6_ID, LOGIC_HIGH);
    20e6:	83 e0       	ldi	r24, 0x03	; 3
    20e8:	66 e0       	ldi	r22, 0x06	; 6
    20ea:	41 e0       	ldi	r20, 0x01	; 1
    20ec:	0e 94 ae 14 	call	0x295c	; 0x295c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTD_ID, PIN7_ID, LOGIC_HIGH);
    20f0:	83 e0       	ldi	r24, 0x03	; 3
    20f2:	67 e0       	ldi	r22, 0x07	; 7
    20f4:	41 e0       	ldi	r20, 0x01	; 1
    20f6:	0e 94 ae 14 	call	0x295c	; 0x295c <GPIO_setupPinDirection>
	GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_LOW);
    20fa:	83 e0       	ldi	r24, 0x03	; 3
    20fc:	66 e0       	ldi	r22, 0x06	; 6
    20fe:	40 e0       	ldi	r20, 0x00	; 0
    2100:	0e 94 99 15 	call	0x2b32	; 0x2b32 <GPIO_writePin>
	GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_LOW);
    2104:	83 e0       	ldi	r24, 0x03	; 3
    2106:	66 e0       	ldi	r22, 0x06	; 6
    2108:	40 e0       	ldi	r20, 0x00	; 0
    210a:	0e 94 99 15 	call	0x2b32	; 0x2b32 <GPIO_writePin>
}
    210e:	cf 91       	pop	r28
    2110:	df 91       	pop	r29
    2112:	08 95       	ret

00002114 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state, uint8 motor_speed) {
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	00 d0       	rcall	.+0      	; 0x211a <DcMotor_Rotate+0x6>
    211a:	0f 92       	push	r0
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
    2120:	8a 83       	std	Y+2, r24	; 0x02
    2122:	6b 83       	std	Y+3, r22	; 0x03
	/* Controls the motor's state (Clockwise/Anti-Clockwise/Stop) and adjusts the speed based on the input duty cycle */

	uint8 Duty_cycle = (motor_speed * 255) / 100;
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	48 2f       	mov	r20, r24
    2128:	50 e0       	ldi	r21, 0x00	; 0
    212a:	ca 01       	movw	r24, r20
    212c:	9c 01       	movw	r18, r24
    212e:	22 0f       	add	r18, r18
    2130:	33 1f       	adc	r19, r19
    2132:	c9 01       	movw	r24, r18
    2134:	96 95       	lsr	r25
    2136:	98 2f       	mov	r25, r24
    2138:	88 27       	eor	r24, r24
    213a:	97 95       	ror	r25
    213c:	87 95       	ror	r24
    213e:	82 1b       	sub	r24, r18
    2140:	93 0b       	sbc	r25, r19
    2142:	84 0f       	add	r24, r20
    2144:	95 1f       	adc	r25, r21
    2146:	24 e6       	ldi	r18, 0x64	; 100
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	b9 01       	movw	r22, r18
    214c:	0e 94 b9 19 	call	0x3372	; 0x3372 <__divmodhi4>
    2150:	cb 01       	movw	r24, r22
    2152:	89 83       	std	Y+1, r24	; 0x01
	PWM_Timer0_Start(Duty_cycle);
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	0e 94 01 11 	call	0x2202	; 0x2202 <PWM_Timer0_Start>

	if (state == CW) {
    215a:	8a 81       	ldd	r24, Y+2	; 0x02
    215c:	88 23       	and	r24, r24
    215e:	59 f4       	brne	.+22     	; 0x2176 <DcMotor_Rotate+0x62>
		GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_HIGH);
    2160:	83 e0       	ldi	r24, 0x03	; 3
    2162:	66 e0       	ldi	r22, 0x06	; 6
    2164:	41 e0       	ldi	r20, 0x01	; 1
    2166:	0e 94 99 15 	call	0x2b32	; 0x2b32 <GPIO_writePin>
		GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_LOW);
    216a:	83 e0       	ldi	r24, 0x03	; 3
    216c:	67 e0       	ldi	r22, 0x07	; 7
    216e:	40 e0       	ldi	r20, 0x00	; 0
    2170:	0e 94 99 15 	call	0x2b32	; 0x2b32 <GPIO_writePin>
    2174:	1b c0       	rjmp	.+54     	; 0x21ac <DcMotor_Rotate+0x98>
	}

	else if (state == ACW) {
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	81 30       	cpi	r24, 0x01	; 1
    217a:	59 f4       	brne	.+22     	; 0x2192 <DcMotor_Rotate+0x7e>
		GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_LOW);
    217c:	83 e0       	ldi	r24, 0x03	; 3
    217e:	66 e0       	ldi	r22, 0x06	; 6
    2180:	40 e0       	ldi	r20, 0x00	; 0
    2182:	0e 94 99 15 	call	0x2b32	; 0x2b32 <GPIO_writePin>
		GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_HIGH);
    2186:	83 e0       	ldi	r24, 0x03	; 3
    2188:	67 e0       	ldi	r22, 0x07	; 7
    218a:	41 e0       	ldi	r20, 0x01	; 1
    218c:	0e 94 99 15 	call	0x2b32	; 0x2b32 <GPIO_writePin>
    2190:	0d c0       	rjmp	.+26     	; 0x21ac <DcMotor_Rotate+0x98>
	}

	else if (state == STOP) {
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	82 30       	cpi	r24, 0x02	; 2
    2196:	51 f4       	brne	.+20     	; 0x21ac <DcMotor_Rotate+0x98>
		GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_LOW);
    2198:	83 e0       	ldi	r24, 0x03	; 3
    219a:	66 e0       	ldi	r22, 0x06	; 6
    219c:	40 e0       	ldi	r20, 0x00	; 0
    219e:	0e 94 99 15 	call	0x2b32	; 0x2b32 <GPIO_writePin>
		GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_LOW);
    21a2:	83 e0       	ldi	r24, 0x03	; 3
    21a4:	67 e0       	ldi	r22, 0x07	; 7
    21a6:	40 e0       	ldi	r20, 0x00	; 0
    21a8:	0e 94 99 15 	call	0x2b32	; 0x2b32 <GPIO_writePin>
	}
}
    21ac:	0f 90       	pop	r0
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	cf 91       	pop	r28
    21b4:	df 91       	pop	r29
    21b6:	08 95       	ret

000021b8 <PIR_init>:
 */

#include "PIR.h"
#include "gpio.h"

void PIR_init(void) {
    21b8:	df 93       	push	r29
    21ba:	cf 93       	push	r28
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTC_ID, PIN2_ID, PIN_OUTPUT);
    21c0:	82 e0       	ldi	r24, 0x02	; 2
    21c2:	62 e0       	ldi	r22, 0x02	; 2
    21c4:	41 e0       	ldi	r20, 0x01	; 1
    21c6:	0e 94 ae 14 	call	0x295c	; 0x295c <GPIO_setupPinDirection>
	GPIO_writePin(PORTC_ID, PIN2_ID, LOGIC_LOW);
    21ca:	82 e0       	ldi	r24, 0x02	; 2
    21cc:	62 e0       	ldi	r22, 0x02	; 2
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	0e 94 99 15 	call	0x2b32	; 0x2b32 <GPIO_writePin>
}
    21d4:	cf 91       	pop	r28
    21d6:	df 91       	pop	r29
    21d8:	08 95       	ret

000021da <PIR_getState>:

uint8 PIR_getState(void) {
    21da:	df 93       	push	r29
    21dc:	cf 93       	push	r28
    21de:	0f 92       	push	r0
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
	uint8 state;
	if (GPIO_readPin(PORTC_ID, PIN2_ID) == LOGIC_HIGH)
    21e4:	82 e0       	ldi	r24, 0x02	; 2
    21e6:	62 e0       	ldi	r22, 0x02	; 2
    21e8:	0e 94 84 16 	call	0x2d08	; 0x2d08 <GPIO_readPin>
    21ec:	81 30       	cpi	r24, 0x01	; 1
    21ee:	19 f4       	brne	.+6      	; 0x21f6 <PIR_getState+0x1c>
		state = LOGIC_HIGH;
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	89 83       	std	Y+1, r24	; 0x01
    21f4:	01 c0       	rjmp	.+2      	; 0x21f8 <PIR_getState+0x1e>
	else
		state = LOGIC_LOW;
    21f6:	19 82       	std	Y+1, r1	; 0x01
	return state;
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    21fa:	0f 90       	pop	r0
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret

00002202 <PWM_Timer0_Start>:

/* Initializes Timer0 in PWM mode and sets the required duty cycle.
 * Prescaler: F_CPU/64
 * Non-inverting mode
 * The function configures OC0 as the output pin. */
void PWM_Timer0_Start(uint8 duty_cycle) {
    2202:	df 93       	push	r29
    2204:	cf 93       	push	r28
    2206:	0f 92       	push	r0
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
    220c:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0;
    220e:	e2 e5       	ldi	r30, 0x52	; 82
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	10 82       	st	Z, r1

	SET_BIT(TCCR0,WGM00);
    2214:	a3 e5       	ldi	r26, 0x53	; 83
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	e3 e5       	ldi	r30, 0x53	; 83
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	80 64       	ori	r24, 0x40	; 64
    2220:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
    2222:	a3 e5       	ldi	r26, 0x53	; 83
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	e3 e5       	ldi	r30, 0x53	; 83
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	80 62       	ori	r24, 0x20	; 32
    222e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS00);
    2230:	a3 e5       	ldi	r26, 0x53	; 83
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	e3 e5       	ldi	r30, 0x53	; 83
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	81 60       	ori	r24, 0x01	; 1
    223c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    223e:	a3 e5       	ldi	r26, 0x53	; 83
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	e3 e5       	ldi	r30, 0x53	; 83
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	82 60       	ori	r24, 0x02	; 2
    224a:	8c 93       	st	X, r24

	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	63 e0       	ldi	r22, 0x03	; 3
    2250:	41 e0       	ldi	r20, 0x01	; 1
    2252:	0e 94 ae 14 	call	0x295c	; 0x295c <GPIO_setupPinDirection>

	OCR0 = duty_cycle;
    2256:	ec e5       	ldi	r30, 0x5C	; 92
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	80 83       	st	Z, r24
}
    225e:	0f 90       	pop	r0
    2260:	cf 91       	pop	r28
    2262:	df 91       	pop	r29
    2264:	08 95       	ret

00002266 <__vector_11>:
#include <avr/interrupt.h>
#include "common_macros.h"
/* Global variable to hold the address of the call back function in the application */
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER0_OVF_vect) {
    2266:	1f 92       	push	r1
    2268:	0f 92       	push	r0
    226a:	0f b6       	in	r0, 0x3f	; 63
    226c:	0f 92       	push	r0
    226e:	11 24       	eor	r1, r1
    2270:	2f 93       	push	r18
    2272:	3f 93       	push	r19
    2274:	4f 93       	push	r20
    2276:	5f 93       	push	r21
    2278:	6f 93       	push	r22
    227a:	7f 93       	push	r23
    227c:	8f 93       	push	r24
    227e:	9f 93       	push	r25
    2280:	af 93       	push	r26
    2282:	bf 93       	push	r27
    2284:	ef 93       	push	r30
    2286:	ff 93       	push	r31
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR) {
    2290:	80 91 70 00 	lds	r24, 0x0070
    2294:	90 91 71 00 	lds	r25, 0x0071
    2298:	00 97       	sbiw	r24, 0x00	; 0
    229a:	29 f0       	breq	.+10     	; 0x22a6 <__vector_11+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    229c:	e0 91 70 00 	lds	r30, 0x0070
    22a0:	f0 91 71 00 	lds	r31, 0x0071
    22a4:	09 95       	icall
	}
}
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	ff 91       	pop	r31
    22ac:	ef 91       	pop	r30
    22ae:	bf 91       	pop	r27
    22b0:	af 91       	pop	r26
    22b2:	9f 91       	pop	r25
    22b4:	8f 91       	pop	r24
    22b6:	7f 91       	pop	r23
    22b8:	6f 91       	pop	r22
    22ba:	5f 91       	pop	r21
    22bc:	4f 91       	pop	r20
    22be:	3f 91       	pop	r19
    22c0:	2f 91       	pop	r18
    22c2:	0f 90       	pop	r0
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	0f 90       	pop	r0
    22c8:	1f 90       	pop	r1
    22ca:	18 95       	reti

000022cc <__vector_9>:

ISR(TIMER1_OVF_vect) {
    22cc:	1f 92       	push	r1
    22ce:	0f 92       	push	r0
    22d0:	0f b6       	in	r0, 0x3f	; 63
    22d2:	0f 92       	push	r0
    22d4:	11 24       	eor	r1, r1
    22d6:	2f 93       	push	r18
    22d8:	3f 93       	push	r19
    22da:	4f 93       	push	r20
    22dc:	5f 93       	push	r21
    22de:	6f 93       	push	r22
    22e0:	7f 93       	push	r23
    22e2:	8f 93       	push	r24
    22e4:	9f 93       	push	r25
    22e6:	af 93       	push	r26
    22e8:	bf 93       	push	r27
    22ea:	ef 93       	push	r30
    22ec:	ff 93       	push	r31
    22ee:	df 93       	push	r29
    22f0:	cf 93       	push	r28
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR) {
    22f6:	80 91 70 00 	lds	r24, 0x0070
    22fa:	90 91 71 00 	lds	r25, 0x0071
    22fe:	00 97       	sbiw	r24, 0x00	; 0
    2300:	29 f0       	breq	.+10     	; 0x230c <__vector_9+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2302:	e0 91 70 00 	lds	r30, 0x0070
    2306:	f0 91 71 00 	lds	r31, 0x0071
    230a:	09 95       	icall
	}
}
    230c:	cf 91       	pop	r28
    230e:	df 91       	pop	r29
    2310:	ff 91       	pop	r31
    2312:	ef 91       	pop	r30
    2314:	bf 91       	pop	r27
    2316:	af 91       	pop	r26
    2318:	9f 91       	pop	r25
    231a:	8f 91       	pop	r24
    231c:	7f 91       	pop	r23
    231e:	6f 91       	pop	r22
    2320:	5f 91       	pop	r21
    2322:	4f 91       	pop	r20
    2324:	3f 91       	pop	r19
    2326:	2f 91       	pop	r18
    2328:	0f 90       	pop	r0
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	0f 90       	pop	r0
    232e:	1f 90       	pop	r1
    2330:	18 95       	reti

00002332 <__vector_5>:

ISR(TIMER2_OVF_vect) {
    2332:	1f 92       	push	r1
    2334:	0f 92       	push	r0
    2336:	0f b6       	in	r0, 0x3f	; 63
    2338:	0f 92       	push	r0
    233a:	11 24       	eor	r1, r1
    233c:	2f 93       	push	r18
    233e:	3f 93       	push	r19
    2340:	4f 93       	push	r20
    2342:	5f 93       	push	r21
    2344:	6f 93       	push	r22
    2346:	7f 93       	push	r23
    2348:	8f 93       	push	r24
    234a:	9f 93       	push	r25
    234c:	af 93       	push	r26
    234e:	bf 93       	push	r27
    2350:	ef 93       	push	r30
    2352:	ff 93       	push	r31
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR) {
    235c:	80 91 70 00 	lds	r24, 0x0070
    2360:	90 91 71 00 	lds	r25, 0x0071
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	29 f0       	breq	.+10     	; 0x2372 <__vector_5+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2368:	e0 91 70 00 	lds	r30, 0x0070
    236c:	f0 91 71 00 	lds	r31, 0x0071
    2370:	09 95       	icall
	}
}
    2372:	cf 91       	pop	r28
    2374:	df 91       	pop	r29
    2376:	ff 91       	pop	r31
    2378:	ef 91       	pop	r30
    237a:	bf 91       	pop	r27
    237c:	af 91       	pop	r26
    237e:	9f 91       	pop	r25
    2380:	8f 91       	pop	r24
    2382:	7f 91       	pop	r23
    2384:	6f 91       	pop	r22
    2386:	5f 91       	pop	r21
    2388:	4f 91       	pop	r20
    238a:	3f 91       	pop	r19
    238c:	2f 91       	pop	r18
    238e:	0f 90       	pop	r0
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	0f 90       	pop	r0
    2394:	1f 90       	pop	r1
    2396:	18 95       	reti

00002398 <__vector_10>:

ISR(TIMER0_COMP_vect) {
    2398:	1f 92       	push	r1
    239a:	0f 92       	push	r0
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	0f 92       	push	r0
    23a0:	11 24       	eor	r1, r1
    23a2:	2f 93       	push	r18
    23a4:	3f 93       	push	r19
    23a6:	4f 93       	push	r20
    23a8:	5f 93       	push	r21
    23aa:	6f 93       	push	r22
    23ac:	7f 93       	push	r23
    23ae:	8f 93       	push	r24
    23b0:	9f 93       	push	r25
    23b2:	af 93       	push	r26
    23b4:	bf 93       	push	r27
    23b6:	ef 93       	push	r30
    23b8:	ff 93       	push	r31
    23ba:	df 93       	push	r29
    23bc:	cf 93       	push	r28
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR) {
    23c2:	80 91 70 00 	lds	r24, 0x0070
    23c6:	90 91 71 00 	lds	r25, 0x0071
    23ca:	00 97       	sbiw	r24, 0x00	; 0
    23cc:	29 f0       	breq	.+10     	; 0x23d8 <__vector_10+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    23ce:	e0 91 70 00 	lds	r30, 0x0070
    23d2:	f0 91 71 00 	lds	r31, 0x0071
    23d6:	09 95       	icall
	}
}
    23d8:	cf 91       	pop	r28
    23da:	df 91       	pop	r29
    23dc:	ff 91       	pop	r31
    23de:	ef 91       	pop	r30
    23e0:	bf 91       	pop	r27
    23e2:	af 91       	pop	r26
    23e4:	9f 91       	pop	r25
    23e6:	8f 91       	pop	r24
    23e8:	7f 91       	pop	r23
    23ea:	6f 91       	pop	r22
    23ec:	5f 91       	pop	r21
    23ee:	4f 91       	pop	r20
    23f0:	3f 91       	pop	r19
    23f2:	2f 91       	pop	r18
    23f4:	0f 90       	pop	r0
    23f6:	0f be       	out	0x3f, r0	; 63
    23f8:	0f 90       	pop	r0
    23fa:	1f 90       	pop	r1
    23fc:	18 95       	reti

000023fe <__vector_7>:

ISR(TIMER1_COMPA_vect) {
    23fe:	1f 92       	push	r1
    2400:	0f 92       	push	r0
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	0f 92       	push	r0
    2406:	11 24       	eor	r1, r1
    2408:	2f 93       	push	r18
    240a:	3f 93       	push	r19
    240c:	4f 93       	push	r20
    240e:	5f 93       	push	r21
    2410:	6f 93       	push	r22
    2412:	7f 93       	push	r23
    2414:	8f 93       	push	r24
    2416:	9f 93       	push	r25
    2418:	af 93       	push	r26
    241a:	bf 93       	push	r27
    241c:	ef 93       	push	r30
    241e:	ff 93       	push	r31
    2420:	df 93       	push	r29
    2422:	cf 93       	push	r28
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR) {
    2428:	80 91 70 00 	lds	r24, 0x0070
    242c:	90 91 71 00 	lds	r25, 0x0071
    2430:	00 97       	sbiw	r24, 0x00	; 0
    2432:	29 f0       	breq	.+10     	; 0x243e <__vector_7+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2434:	e0 91 70 00 	lds	r30, 0x0070
    2438:	f0 91 71 00 	lds	r31, 0x0071
    243c:	09 95       	icall
	}
}
    243e:	cf 91       	pop	r28
    2440:	df 91       	pop	r29
    2442:	ff 91       	pop	r31
    2444:	ef 91       	pop	r30
    2446:	bf 91       	pop	r27
    2448:	af 91       	pop	r26
    244a:	9f 91       	pop	r25
    244c:	8f 91       	pop	r24
    244e:	7f 91       	pop	r23
    2450:	6f 91       	pop	r22
    2452:	5f 91       	pop	r21
    2454:	4f 91       	pop	r20
    2456:	3f 91       	pop	r19
    2458:	2f 91       	pop	r18
    245a:	0f 90       	pop	r0
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	0f 90       	pop	r0
    2460:	1f 90       	pop	r1
    2462:	18 95       	reti

00002464 <__vector_4>:

ISR(TIMER2_COMP_vect) {
    2464:	1f 92       	push	r1
    2466:	0f 92       	push	r0
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	0f 92       	push	r0
    246c:	11 24       	eor	r1, r1
    246e:	2f 93       	push	r18
    2470:	3f 93       	push	r19
    2472:	4f 93       	push	r20
    2474:	5f 93       	push	r21
    2476:	6f 93       	push	r22
    2478:	7f 93       	push	r23
    247a:	8f 93       	push	r24
    247c:	9f 93       	push	r25
    247e:	af 93       	push	r26
    2480:	bf 93       	push	r27
    2482:	ef 93       	push	r30
    2484:	ff 93       	push	r31
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR) {
    248e:	80 91 70 00 	lds	r24, 0x0070
    2492:	90 91 71 00 	lds	r25, 0x0071
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	29 f0       	breq	.+10     	; 0x24a4 <__vector_4+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    249a:	e0 91 70 00 	lds	r30, 0x0070
    249e:	f0 91 71 00 	lds	r31, 0x0071
    24a2:	09 95       	icall
	}
}
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	ff 91       	pop	r31
    24aa:	ef 91       	pop	r30
    24ac:	bf 91       	pop	r27
    24ae:	af 91       	pop	r26
    24b0:	9f 91       	pop	r25
    24b2:	8f 91       	pop	r24
    24b4:	7f 91       	pop	r23
    24b6:	6f 91       	pop	r22
    24b8:	5f 91       	pop	r21
    24ba:	4f 91       	pop	r20
    24bc:	3f 91       	pop	r19
    24be:	2f 91       	pop	r18
    24c0:	0f 90       	pop	r0
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	0f 90       	pop	r0
    24c6:	1f 90       	pop	r1
    24c8:	18 95       	reti

000024ca <Timer_init>:

void Timer_init(const Timer_ConfigType * Config_Ptr) {
    24ca:	df 93       	push	r29
    24cc:	cf 93       	push	r28
    24ce:	00 d0       	rcall	.+0      	; 0x24d0 <Timer_init+0x6>
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
    24d4:	9a 83       	std	Y+2, r25	; 0x02
    24d6:	89 83       	std	Y+1, r24	; 0x01

	if (Config_Ptr->timer_ID == Timer_0) {
    24d8:	e9 81       	ldd	r30, Y+1	; 0x01
    24da:	fa 81       	ldd	r31, Y+2	; 0x02
    24dc:	84 81       	ldd	r24, Z+4	; 0x04
    24de:	88 23       	and	r24, r24
    24e0:	09 f0       	breq	.+2      	; 0x24e4 <Timer_init+0x1a>
    24e2:	5f c0       	rjmp	.+190    	; 0x25a2 <Timer_init+0xd8>

		TCNT0 = Config_Ptr->timer_InitialValue;
    24e4:	a2 e5       	ldi	r26, 0x52	; 82
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	e9 81       	ldd	r30, Y+1	; 0x01
    24ea:	fa 81       	ldd	r31, Y+2	; 0x02
    24ec:	80 81       	ld	r24, Z
    24ee:	91 81       	ldd	r25, Z+1	; 0x01
    24f0:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->timer_clock);
    24f2:	a3 e5       	ldi	r26, 0x53	; 83
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	e3 e5       	ldi	r30, 0x53	; 83
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	98 2f       	mov	r25, r24
    24fe:	98 7f       	andi	r25, 0xF8	; 248
    2500:	e9 81       	ldd	r30, Y+1	; 0x01
    2502:	fa 81       	ldd	r31, Y+2	; 0x02
    2504:	85 81       	ldd	r24, Z+5	; 0x05
    2506:	89 2b       	or	r24, r25
    2508:	8c 93       	st	X, r24
		if (Config_Ptr->timer_mode == Normal_Mode) {
    250a:	e9 81       	ldd	r30, Y+1	; 0x01
    250c:	fa 81       	ldd	r31, Y+2	; 0x02
    250e:	86 81       	ldd	r24, Z+6	; 0x06
    2510:	88 23       	and	r24, r24
    2512:	e9 f4       	brne	.+58     	; 0x254e <Timer_init+0x84>
			CLEAR_BIT(TCCR0,WGM00);
    2514:	a3 e5       	ldi	r26, 0x53	; 83
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	e3 e5       	ldi	r30, 0x53	; 83
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	8f 7b       	andi	r24, 0xBF	; 191
    2520:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,WGM01);
    2522:	a3 e5       	ldi	r26, 0x53	; 83
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	e3 e5       	ldi	r30, 0x53	; 83
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	87 7f       	andi	r24, 0xF7	; 247
    252e:	8c 93       	st	X, r24
			SET_BIT(TCCR0,FOC0);
    2530:	a3 e5       	ldi	r26, 0x53	; 83
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	e3 e5       	ldi	r30, 0x53	; 83
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	80 68       	ori	r24, 0x80	; 128
    253c:	8c 93       	st	X, r24
			SET_BIT(TIMSK, TOIE0);
    253e:	a9 e5       	ldi	r26, 0x59	; 89
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	e9 e5       	ldi	r30, 0x59	; 89
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	81 60       	ori	r24, 0x01	; 1
    254a:	8c 93       	st	X, r24
    254c:	20 c1       	rjmp	.+576    	; 0x278e <Timer_init+0x2c4>
		}
		else if (Config_Ptr->timer_mode == CTC_Mode){
    254e:	e9 81       	ldd	r30, Y+1	; 0x01
    2550:	fa 81       	ldd	r31, Y+2	; 0x02
    2552:	86 81       	ldd	r24, Z+6	; 0x06
    2554:	81 30       	cpi	r24, 0x01	; 1
    2556:	09 f0       	breq	.+2      	; 0x255a <Timer_init+0x90>
    2558:	1a c1       	rjmp	.+564    	; 0x278e <Timer_init+0x2c4>
			CLEAR_BIT(TCCR0,WGM00);
    255a:	a3 e5       	ldi	r26, 0x53	; 83
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	e3 e5       	ldi	r30, 0x53	; 83
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	8f 7b       	andi	r24, 0xBF	; 191
    2566:	8c 93       	st	X, r24
			SET_BIT(TCCR0,WGM01);
    2568:	a3 e5       	ldi	r26, 0x53	; 83
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	e3 e5       	ldi	r30, 0x53	; 83
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	88 60       	ori	r24, 0x08	; 8
    2574:	8c 93       	st	X, r24
			SET_BIT(TCCR0,FOC0);
    2576:	a3 e5       	ldi	r26, 0x53	; 83
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e3 e5       	ldi	r30, 0x53	; 83
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	80 68       	ori	r24, 0x80	; 128
    2582:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE0);
    2584:	a9 e5       	ldi	r26, 0x59	; 89
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	e9 e5       	ldi	r30, 0x59	; 89
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	82 60       	ori	r24, 0x02	; 2
    2590:	8c 93       	st	X, r24
			OCR0 = Config_Ptr->timer_compare_MatchValue;
    2592:	ac e5       	ldi	r26, 0x5C	; 92
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	e9 81       	ldd	r30, Y+1	; 0x01
    2598:	fa 81       	ldd	r31, Y+2	; 0x02
    259a:	82 81       	ldd	r24, Z+2	; 0x02
    259c:	93 81       	ldd	r25, Z+3	; 0x03
    259e:	8c 93       	st	X, r24
    25a0:	f6 c0       	rjmp	.+492    	; 0x278e <Timer_init+0x2c4>
		}
	}
	else if(Config_Ptr->timer_ID == Timer_1) {
    25a2:	e9 81       	ldd	r30, Y+1	; 0x01
    25a4:	fa 81       	ldd	r31, Y+2	; 0x02
    25a6:	84 81       	ldd	r24, Z+4	; 0x04
    25a8:	81 30       	cpi	r24, 0x01	; 1
    25aa:	09 f0       	breq	.+2      	; 0x25ae <Timer_init+0xe4>
    25ac:	8d c0       	rjmp	.+282    	; 0x26c8 <Timer_init+0x1fe>

		TCNT1 = Config_Ptr->timer_InitialValue;
    25ae:	ac e4       	ldi	r26, 0x4C	; 76
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	e9 81       	ldd	r30, Y+1	; 0x01
    25b4:	fa 81       	ldd	r31, Y+2	; 0x02
    25b6:	80 81       	ld	r24, Z
    25b8:	91 81       	ldd	r25, Z+1	; 0x01
    25ba:	11 96       	adiw	r26, 0x01	; 1
    25bc:	9c 93       	st	X, r25
    25be:	8e 93       	st	-X, r24
		TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->timer_clock);
    25c0:	ae e4       	ldi	r26, 0x4E	; 78
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	ee e4       	ldi	r30, 0x4E	; 78
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	98 2f       	mov	r25, r24
    25cc:	98 7f       	andi	r25, 0xF8	; 248
    25ce:	e9 81       	ldd	r30, Y+1	; 0x01
    25d0:	fa 81       	ldd	r31, Y+2	; 0x02
    25d2:	85 81       	ldd	r24, Z+5	; 0x05
    25d4:	89 2b       	or	r24, r25
    25d6:	8c 93       	st	X, r24
		if (Config_Ptr->timer_mode == Normal_Mode) {
    25d8:	e9 81       	ldd	r30, Y+1	; 0x01
    25da:	fa 81       	ldd	r31, Y+2	; 0x02
    25dc:	86 81       	ldd	r24, Z+6	; 0x06
    25de:	88 23       	and	r24, r24
    25e0:	91 f5       	brne	.+100    	; 0x2646 <Timer_init+0x17c>
			SET_BIT(TCCR1A,FOC1A);
    25e2:	af e4       	ldi	r26, 0x4F	; 79
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	ef e4       	ldi	r30, 0x4F	; 79
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	88 60       	ori	r24, 0x08	; 8
    25ee:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,FOC1B);
    25f0:	af e4       	ldi	r26, 0x4F	; 79
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	ef e4       	ldi	r30, 0x4F	; 79
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	84 60       	ori	r24, 0x04	; 4
    25fc:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM10);
    25fe:	af e4       	ldi	r26, 0x4F	; 79
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	ef e4       	ldi	r30, 0x4F	; 79
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	8e 7f       	andi	r24, 0xFE	; 254
    260a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM11);
    260c:	af e4       	ldi	r26, 0x4F	; 79
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	ef e4       	ldi	r30, 0x4F	; 79
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	8d 7f       	andi	r24, 0xFD	; 253
    2618:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM12);
    261a:	ae e4       	ldi	r26, 0x4E	; 78
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	ee e4       	ldi	r30, 0x4E	; 78
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	87 7f       	andi	r24, 0xF7	; 247
    2626:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM13);
    2628:	ae e4       	ldi	r26, 0x4E	; 78
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	ee e4       	ldi	r30, 0x4E	; 78
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	8f 7e       	andi	r24, 0xEF	; 239
    2634:	8c 93       	st	X, r24
			SET_BIT(TIMSK, TOIE1);
    2636:	a9 e5       	ldi	r26, 0x59	; 89
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	e9 e5       	ldi	r30, 0x59	; 89
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	84 60       	ori	r24, 0x04	; 4
    2642:	8c 93       	st	X, r24
    2644:	a4 c0       	rjmp	.+328    	; 0x278e <Timer_init+0x2c4>
		}
		else if (Config_Ptr->timer_mode == CTC_Mode) {
    2646:	e9 81       	ldd	r30, Y+1	; 0x01
    2648:	fa 81       	ldd	r31, Y+2	; 0x02
    264a:	86 81       	ldd	r24, Z+6	; 0x06
    264c:	81 30       	cpi	r24, 0x01	; 1
    264e:	09 f0       	breq	.+2      	; 0x2652 <Timer_init+0x188>
    2650:	9e c0       	rjmp	.+316    	; 0x278e <Timer_init+0x2c4>
			SET_BIT(TCCR1A,FOC1A);
    2652:	af e4       	ldi	r26, 0x4F	; 79
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	ef e4       	ldi	r30, 0x4F	; 79
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	88 60       	ori	r24, 0x08	; 8
    265e:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,FOC1B);
    2660:	af e4       	ldi	r26, 0x4F	; 79
    2662:	b0 e0       	ldi	r27, 0x00	; 0
    2664:	ef e4       	ldi	r30, 0x4F	; 79
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	84 60       	ori	r24, 0x04	; 4
    266c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM10);
    266e:	af e4       	ldi	r26, 0x4F	; 79
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	ef e4       	ldi	r30, 0x4F	; 79
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	8e 7f       	andi	r24, 0xFE	; 254
    267a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM11);
    267c:	af e4       	ldi	r26, 0x4F	; 79
    267e:	b0 e0       	ldi	r27, 0x00	; 0
    2680:	ef e4       	ldi	r30, 0x4F	; 79
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	80 81       	ld	r24, Z
    2686:	8d 7f       	andi	r24, 0xFD	; 253
    2688:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,WGM12);
    268a:	ae e4       	ldi	r26, 0x4E	; 78
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	ee e4       	ldi	r30, 0x4E	; 78
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
    2694:	88 60       	ori	r24, 0x08	; 8
    2696:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM13);
    2698:	ae e4       	ldi	r26, 0x4E	; 78
    269a:	b0 e0       	ldi	r27, 0x00	; 0
    269c:	ee e4       	ldi	r30, 0x4E	; 78
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	80 81       	ld	r24, Z
    26a2:	8f 7e       	andi	r24, 0xEF	; 239
    26a4:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE1A);
    26a6:	a9 e5       	ldi	r26, 0x59	; 89
    26a8:	b0 e0       	ldi	r27, 0x00	; 0
    26aa:	e9 e5       	ldi	r30, 0x59	; 89
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	80 81       	ld	r24, Z
    26b0:	80 61       	ori	r24, 0x10	; 16
    26b2:	8c 93       	st	X, r24
			OCR1A = Config_Ptr->timer_compare_MatchValue;
    26b4:	aa e4       	ldi	r26, 0x4A	; 74
    26b6:	b0 e0       	ldi	r27, 0x00	; 0
    26b8:	e9 81       	ldd	r30, Y+1	; 0x01
    26ba:	fa 81       	ldd	r31, Y+2	; 0x02
    26bc:	82 81       	ldd	r24, Z+2	; 0x02
    26be:	93 81       	ldd	r25, Z+3	; 0x03
    26c0:	11 96       	adiw	r26, 0x01	; 1
    26c2:	9c 93       	st	X, r25
    26c4:	8e 93       	st	-X, r24
    26c6:	63 c0       	rjmp	.+198    	; 0x278e <Timer_init+0x2c4>
		}
	}
	else if (Config_Ptr->timer_ID == Timer_2) {
    26c8:	e9 81       	ldd	r30, Y+1	; 0x01
    26ca:	fa 81       	ldd	r31, Y+2	; 0x02
    26cc:	84 81       	ldd	r24, Z+4	; 0x04
    26ce:	82 30       	cpi	r24, 0x02	; 2
    26d0:	09 f0       	breq	.+2      	; 0x26d4 <Timer_init+0x20a>
    26d2:	5d c0       	rjmp	.+186    	; 0x278e <Timer_init+0x2c4>

		TCNT2 = Config_Ptr->timer_InitialValue;
    26d4:	a4 e4       	ldi	r26, 0x44	; 68
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	e9 81       	ldd	r30, Y+1	; 0x01
    26da:	fa 81       	ldd	r31, Y+2	; 0x02
    26dc:	80 81       	ld	r24, Z
    26de:	91 81       	ldd	r25, Z+1	; 0x01
    26e0:	8c 93       	st	X, r24
		TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->timer_clock);
    26e2:	a5 e4       	ldi	r26, 0x45	; 69
    26e4:	b0 e0       	ldi	r27, 0x00	; 0
    26e6:	e5 e4       	ldi	r30, 0x45	; 69
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	80 81       	ld	r24, Z
    26ec:	98 2f       	mov	r25, r24
    26ee:	98 7f       	andi	r25, 0xF8	; 248
    26f0:	e9 81       	ldd	r30, Y+1	; 0x01
    26f2:	fa 81       	ldd	r31, Y+2	; 0x02
    26f4:	85 81       	ldd	r24, Z+5	; 0x05
    26f6:	89 2b       	or	r24, r25
    26f8:	8c 93       	st	X, r24
		if (Config_Ptr->timer_mode == Normal_Mode) {
    26fa:	e9 81       	ldd	r30, Y+1	; 0x01
    26fc:	fa 81       	ldd	r31, Y+2	; 0x02
    26fe:	86 81       	ldd	r24, Z+6	; 0x06
    2700:	88 23       	and	r24, r24
    2702:	e9 f4       	brne	.+58     	; 0x273e <Timer_init+0x274>
			CLEAR_BIT(TCCR2,WGM20);
    2704:	a5 e4       	ldi	r26, 0x45	; 69
    2706:	b0 e0       	ldi	r27, 0x00	; 0
    2708:	e5 e4       	ldi	r30, 0x45	; 69
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	80 81       	ld	r24, Z
    270e:	8f 7b       	andi	r24, 0xBF	; 191
    2710:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,WGM21);
    2712:	a5 e4       	ldi	r26, 0x45	; 69
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	e5 e4       	ldi	r30, 0x45	; 69
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	80 81       	ld	r24, Z
    271c:	87 7f       	andi	r24, 0xF7	; 247
    271e:	8c 93       	st	X, r24
			SET_BIT(TCCR2,FOC2);
    2720:	a5 e4       	ldi	r26, 0x45	; 69
    2722:	b0 e0       	ldi	r27, 0x00	; 0
    2724:	e5 e4       	ldi	r30, 0x45	; 69
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	80 81       	ld	r24, Z
    272a:	80 68       	ori	r24, 0x80	; 128
    272c:	8c 93       	st	X, r24
			SET_BIT(TIMSK, TOIE2);
    272e:	a9 e5       	ldi	r26, 0x59	; 89
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	e9 e5       	ldi	r30, 0x59	; 89
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	80 64       	ori	r24, 0x40	; 64
    273a:	8c 93       	st	X, r24
    273c:	28 c0       	rjmp	.+80     	; 0x278e <Timer_init+0x2c4>
		}
		else if (Config_Ptr->timer_mode == CTC_Mode) {
    273e:	e9 81       	ldd	r30, Y+1	; 0x01
    2740:	fa 81       	ldd	r31, Y+2	; 0x02
    2742:	86 81       	ldd	r24, Z+6	; 0x06
    2744:	81 30       	cpi	r24, 0x01	; 1
    2746:	19 f5       	brne	.+70     	; 0x278e <Timer_init+0x2c4>
			CLEAR_BIT(TCCR2, WGM20);
    2748:	a5 e4       	ldi	r26, 0x45	; 69
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	e5 e4       	ldi	r30, 0x45	; 69
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	8f 7b       	andi	r24, 0xBF	; 191
    2754:	8c 93       	st	X, r24
			SET_BIT(TCCR2, WGM21);
    2756:	a5 e4       	ldi	r26, 0x45	; 69
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e5 e4       	ldi	r30, 0x45	; 69
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	88 60       	ori	r24, 0x08	; 8
    2762:	8c 93       	st	X, r24
			SET_BIT(TCCR2, FOC2);
    2764:	a5 e4       	ldi	r26, 0x45	; 69
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	e5 e4       	ldi	r30, 0x45	; 69
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	80 68       	ori	r24, 0x80	; 128
    2770:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE2);
    2772:	a9 e5       	ldi	r26, 0x59	; 89
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	e9 e5       	ldi	r30, 0x59	; 89
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	80 68       	ori	r24, 0x80	; 128
    277e:	8c 93       	st	X, r24
			OCR2 = Config_Ptr->timer_compare_MatchValue;
    2780:	a3 e4       	ldi	r26, 0x43	; 67
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	e9 81       	ldd	r30, Y+1	; 0x01
    2786:	fa 81       	ldd	r31, Y+2	; 0x02
    2788:	82 81       	ldd	r24, Z+2	; 0x02
    278a:	93 81       	ldd	r25, Z+3	; 0x03
    278c:	8c 93       	st	X, r24
		}
	}
}
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	cf 91       	pop	r28
    2794:	df 91       	pop	r29
    2796:	08 95       	ret

00002798 <Timer_deInit>:

void Timer_deInit(Timer_ID_Type timer_type) {
    2798:	df 93       	push	r29
    279a:	cf 93       	push	r28
    279c:	0f 92       	push	r0
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	89 83       	std	Y+1, r24	; 0x01

	g_callBackPtr = NULL_PTR;
    27a4:	10 92 71 00 	sts	0x0071, r1
    27a8:	10 92 70 00 	sts	0x0070, r1
	if (timer_type == Timer_0) {
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	88 23       	and	r24, r24
    27b0:	39 f4       	brne	.+14     	; 0x27c0 <Timer_deInit+0x28>
		TCNT0 = 0;
    27b2:	e2 e5       	ldi	r30, 0x52	; 82
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	10 82       	st	Z, r1
		OCR0 = 0;
    27b8:	ec e5       	ldi	r30, 0x5C	; 92
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	10 82       	st	Z, r1
    27be:	14 c0       	rjmp	.+40     	; 0x27e8 <Timer_deInit+0x50>
	} else if (timer_type == Timer_1) {
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	81 30       	cpi	r24, 0x01	; 1
    27c4:	41 f4       	brne	.+16     	; 0x27d6 <Timer_deInit+0x3e>
		TCCR1B = 0;
    27c6:	ee e4       	ldi	r30, 0x4E	; 78
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	10 82       	st	Z, r1
		TCNT1 = 0;
    27cc:	ec e4       	ldi	r30, 0x4C	; 76
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	11 82       	std	Z+1, r1	; 0x01
    27d2:	10 82       	st	Z, r1
    27d4:	09 c0       	rjmp	.+18     	; 0x27e8 <Timer_deInit+0x50>
	} else if (timer_type == Timer_2) {
    27d6:	89 81       	ldd	r24, Y+1	; 0x01
    27d8:	82 30       	cpi	r24, 0x02	; 2
    27da:	31 f4       	brne	.+12     	; 0x27e8 <Timer_deInit+0x50>
		TCCR2 = 0;
    27dc:	e5 e4       	ldi	r30, 0x45	; 69
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	10 82       	st	Z, r1
		TCNT2 = 0;
    27e2:	e4 e4       	ldi	r30, 0x44	; 68
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	10 82       	st	Z, r1
	}
}
    27e8:	0f 90       	pop	r0
    27ea:	cf 91       	pop	r28
    27ec:	df 91       	pop	r29
    27ee:	08 95       	ret

000027f0 <Timer_setCallBack>:

void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID) {
    27f0:	df 93       	push	r29
    27f2:	cf 93       	push	r28
    27f4:	00 d0       	rcall	.+0      	; 0x27f6 <Timer_setCallBack+0x6>
    27f6:	0f 92       	push	r0
    27f8:	cd b7       	in	r28, 0x3d	; 61
    27fa:	de b7       	in	r29, 0x3e	; 62
    27fc:	9a 83       	std	Y+2, r25	; 0x02
    27fe:	89 83       	std	Y+1, r24	; 0x01
    2800:	6b 83       	std	Y+3, r22	; 0x03

	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2802:	89 81       	ldd	r24, Y+1	; 0x01
    2804:	9a 81       	ldd	r25, Y+2	; 0x02
    2806:	90 93 71 00 	sts	0x0071, r25
    280a:	80 93 70 00 	sts	0x0070, r24
}
    280e:	0f 90       	pop	r0
    2810:	0f 90       	pop	r0
    2812:	0f 90       	pop	r0
    2814:	cf 91       	pop	r28
    2816:	df 91       	pop	r29
    2818:	08 95       	ret

0000281a <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    281a:	df 93       	push	r29
    281c:	cf 93       	push	r28
    281e:	00 d0       	rcall	.+0      	; 0x2820 <EEPROM_writeByte+0x6>
    2820:	00 d0       	rcall	.+0      	; 0x2822 <EEPROM_writeByte+0x8>
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62
    2826:	9a 83       	std	Y+2, r25	; 0x02
    2828:	89 83       	std	Y+1, r24	; 0x01
    282a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    282c:	0e 94 0c 18 	call	0x3018	; 0x3018 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2830:	0e 94 64 18 	call	0x30c8	; 0x30c8 <TWI_getStatus>
    2834:	88 30       	cpi	r24, 0x08	; 8
    2836:	11 f0       	breq	.+4      	; 0x283c <EEPROM_writeByte+0x22>
        return ERROR;
    2838:	1c 82       	std	Y+4, r1	; 0x04
    283a:	28 c0       	rjmp	.+80     	; 0x288c <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	9a 81       	ldd	r25, Y+2	; 0x02
    2840:	80 70       	andi	r24, 0x00	; 0
    2842:	97 70       	andi	r25, 0x07	; 7
    2844:	88 0f       	add	r24, r24
    2846:	89 2f       	mov	r24, r25
    2848:	88 1f       	adc	r24, r24
    284a:	99 0b       	sbc	r25, r25
    284c:	91 95       	neg	r25
    284e:	80 6a       	ori	r24, 0xA0	; 160
    2850:	0e 94 27 18 	call	0x304e	; 0x304e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2854:	0e 94 64 18 	call	0x30c8	; 0x30c8 <TWI_getStatus>
    2858:	88 31       	cpi	r24, 0x18	; 24
    285a:	11 f0       	breq	.+4      	; 0x2860 <EEPROM_writeByte+0x46>
        return ERROR; 
    285c:	1c 82       	std	Y+4, r1	; 0x04
    285e:	16 c0       	rjmp	.+44     	; 0x288c <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	0e 94 27 18 	call	0x304e	; 0x304e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2866:	0e 94 64 18 	call	0x30c8	; 0x30c8 <TWI_getStatus>
    286a:	88 32       	cpi	r24, 0x28	; 40
    286c:	11 f0       	breq	.+4      	; 0x2872 <EEPROM_writeByte+0x58>
        return ERROR;
    286e:	1c 82       	std	Y+4, r1	; 0x04
    2870:	0d c0       	rjmp	.+26     	; 0x288c <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    2872:	8b 81       	ldd	r24, Y+3	; 0x03
    2874:	0e 94 27 18 	call	0x304e	; 0x304e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2878:	0e 94 64 18 	call	0x30c8	; 0x30c8 <TWI_getStatus>
    287c:	88 32       	cpi	r24, 0x28	; 40
    287e:	11 f0       	breq	.+4      	; 0x2884 <EEPROM_writeByte+0x6a>
        return ERROR;
    2880:	1c 82       	std	Y+4, r1	; 0x04
    2882:	04 c0       	rjmp	.+8      	; 0x288c <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    2884:	0e 94 1c 18 	call	0x3038	; 0x3038 <TWI_stop>
	
    return SUCCESS;
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	8c 83       	std	Y+4, r24	; 0x04
    288c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	0f 90       	pop	r0
    2896:	cf 91       	pop	r28
    2898:	df 91       	pop	r29
    289a:	08 95       	ret

0000289c <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    289c:	df 93       	push	r29
    289e:	cf 93       	push	r28
    28a0:	00 d0       	rcall	.+0      	; 0x28a2 <EEPROM_readByte+0x6>
    28a2:	00 d0       	rcall	.+0      	; 0x28a4 <EEPROM_readByte+0x8>
    28a4:	0f 92       	push	r0
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
    28aa:	9a 83       	std	Y+2, r25	; 0x02
    28ac:	89 83       	std	Y+1, r24	; 0x01
    28ae:	7c 83       	std	Y+4, r23	; 0x04
    28b0:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    28b2:	0e 94 0c 18 	call	0x3018	; 0x3018 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    28b6:	0e 94 64 18 	call	0x30c8	; 0x30c8 <TWI_getStatus>
    28ba:	88 30       	cpi	r24, 0x08	; 8
    28bc:	11 f0       	breq	.+4      	; 0x28c2 <EEPROM_readByte+0x26>
        return ERROR;
    28be:	1d 82       	std	Y+5, r1	; 0x05
    28c0:	44 c0       	rjmp	.+136    	; 0x294a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    28c2:	89 81       	ldd	r24, Y+1	; 0x01
    28c4:	9a 81       	ldd	r25, Y+2	; 0x02
    28c6:	80 70       	andi	r24, 0x00	; 0
    28c8:	97 70       	andi	r25, 0x07	; 7
    28ca:	88 0f       	add	r24, r24
    28cc:	89 2f       	mov	r24, r25
    28ce:	88 1f       	adc	r24, r24
    28d0:	99 0b       	sbc	r25, r25
    28d2:	91 95       	neg	r25
    28d4:	80 6a       	ori	r24, 0xA0	; 160
    28d6:	0e 94 27 18 	call	0x304e	; 0x304e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    28da:	0e 94 64 18 	call	0x30c8	; 0x30c8 <TWI_getStatus>
    28de:	88 31       	cpi	r24, 0x18	; 24
    28e0:	11 f0       	breq	.+4      	; 0x28e6 <EEPROM_readByte+0x4a>
        return ERROR;
    28e2:	1d 82       	std	Y+5, r1	; 0x05
    28e4:	32 c0       	rjmp	.+100    	; 0x294a <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	0e 94 27 18 	call	0x304e	; 0x304e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    28ec:	0e 94 64 18 	call	0x30c8	; 0x30c8 <TWI_getStatus>
    28f0:	88 32       	cpi	r24, 0x28	; 40
    28f2:	11 f0       	breq	.+4      	; 0x28f8 <EEPROM_readByte+0x5c>
        return ERROR;
    28f4:	1d 82       	std	Y+5, r1	; 0x05
    28f6:	29 c0       	rjmp	.+82     	; 0x294a <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    28f8:	0e 94 0c 18 	call	0x3018	; 0x3018 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    28fc:	0e 94 64 18 	call	0x30c8	; 0x30c8 <TWI_getStatus>
    2900:	80 31       	cpi	r24, 0x10	; 16
    2902:	11 f0       	breq	.+4      	; 0x2908 <EEPROM_readByte+0x6c>
        return ERROR;
    2904:	1d 82       	std	Y+5, r1	; 0x05
    2906:	21 c0       	rjmp	.+66     	; 0x294a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2908:	89 81       	ldd	r24, Y+1	; 0x01
    290a:	9a 81       	ldd	r25, Y+2	; 0x02
    290c:	80 70       	andi	r24, 0x00	; 0
    290e:	97 70       	andi	r25, 0x07	; 7
    2910:	88 0f       	add	r24, r24
    2912:	89 2f       	mov	r24, r25
    2914:	88 1f       	adc	r24, r24
    2916:	99 0b       	sbc	r25, r25
    2918:	91 95       	neg	r25
    291a:	81 6a       	ori	r24, 0xA1	; 161
    291c:	0e 94 27 18 	call	0x304e	; 0x304e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    2920:	0e 94 64 18 	call	0x30c8	; 0x30c8 <TWI_getStatus>
    2924:	80 34       	cpi	r24, 0x40	; 64
    2926:	11 f0       	breq	.+4      	; 0x292c <EEPROM_readByte+0x90>
        return ERROR;
    2928:	1d 82       	std	Y+5, r1	; 0x05
    292a:	0f c0       	rjmp	.+30     	; 0x294a <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    292c:	0e 94 51 18 	call	0x30a2	; 0x30a2 <TWI_readByteWithNACK>
    2930:	eb 81       	ldd	r30, Y+3	; 0x03
    2932:	fc 81       	ldd	r31, Y+4	; 0x04
    2934:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    2936:	0e 94 64 18 	call	0x30c8	; 0x30c8 <TWI_getStatus>
    293a:	88 35       	cpi	r24, 0x58	; 88
    293c:	11 f0       	breq	.+4      	; 0x2942 <EEPROM_readByte+0xa6>
        return ERROR;
    293e:	1d 82       	std	Y+5, r1	; 0x05
    2940:	04 c0       	rjmp	.+8      	; 0x294a <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    2942:	0e 94 1c 18 	call	0x3038	; 0x3038 <TWI_stop>

    return SUCCESS;
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	8d 83       	std	Y+5, r24	; 0x05
    294a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	0f 90       	pop	r0
    2954:	0f 90       	pop	r0
    2956:	cf 91       	pop	r28
    2958:	df 91       	pop	r29
    295a:	08 95       	ret

0000295c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    295c:	df 93       	push	r29
    295e:	cf 93       	push	r28
    2960:	00 d0       	rcall	.+0      	; 0x2962 <GPIO_setupPinDirection+0x6>
    2962:	00 d0       	rcall	.+0      	; 0x2964 <GPIO_setupPinDirection+0x8>
    2964:	0f 92       	push	r0
    2966:	cd b7       	in	r28, 0x3d	; 61
    2968:	de b7       	in	r29, 0x3e	; 62
    296a:	89 83       	std	Y+1, r24	; 0x01
    296c:	6a 83       	std	Y+2, r22	; 0x02
    296e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2970:	8a 81       	ldd	r24, Y+2	; 0x02
    2972:	88 30       	cpi	r24, 0x08	; 8
    2974:	08 f0       	brcs	.+2      	; 0x2978 <GPIO_setupPinDirection+0x1c>
    2976:	d5 c0       	rjmp	.+426    	; 0x2b22 <GPIO_setupPinDirection+0x1c6>
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	84 30       	cpi	r24, 0x04	; 4
    297c:	08 f0       	brcs	.+2      	; 0x2980 <GPIO_setupPinDirection+0x24>
    297e:	d1 c0       	rjmp	.+418    	; 0x2b22 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	28 2f       	mov	r18, r24
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	3d 83       	std	Y+5, r19	; 0x05
    2988:	2c 83       	std	Y+4, r18	; 0x04
    298a:	8c 81       	ldd	r24, Y+4	; 0x04
    298c:	9d 81       	ldd	r25, Y+5	; 0x05
    298e:	81 30       	cpi	r24, 0x01	; 1
    2990:	91 05       	cpc	r25, r1
    2992:	09 f4       	brne	.+2      	; 0x2996 <GPIO_setupPinDirection+0x3a>
    2994:	43 c0       	rjmp	.+134    	; 0x2a1c <GPIO_setupPinDirection+0xc0>
    2996:	2c 81       	ldd	r18, Y+4	; 0x04
    2998:	3d 81       	ldd	r19, Y+5	; 0x05
    299a:	22 30       	cpi	r18, 0x02	; 2
    299c:	31 05       	cpc	r19, r1
    299e:	2c f4       	brge	.+10     	; 0x29aa <GPIO_setupPinDirection+0x4e>
    29a0:	8c 81       	ldd	r24, Y+4	; 0x04
    29a2:	9d 81       	ldd	r25, Y+5	; 0x05
    29a4:	00 97       	sbiw	r24, 0x00	; 0
    29a6:	71 f0       	breq	.+28     	; 0x29c4 <GPIO_setupPinDirection+0x68>
    29a8:	bc c0       	rjmp	.+376    	; 0x2b22 <GPIO_setupPinDirection+0x1c6>
    29aa:	2c 81       	ldd	r18, Y+4	; 0x04
    29ac:	3d 81       	ldd	r19, Y+5	; 0x05
    29ae:	22 30       	cpi	r18, 0x02	; 2
    29b0:	31 05       	cpc	r19, r1
    29b2:	09 f4       	brne	.+2      	; 0x29b6 <GPIO_setupPinDirection+0x5a>
    29b4:	5f c0       	rjmp	.+190    	; 0x2a74 <GPIO_setupPinDirection+0x118>
    29b6:	8c 81       	ldd	r24, Y+4	; 0x04
    29b8:	9d 81       	ldd	r25, Y+5	; 0x05
    29ba:	83 30       	cpi	r24, 0x03	; 3
    29bc:	91 05       	cpc	r25, r1
    29be:	09 f4       	brne	.+2      	; 0x29c2 <GPIO_setupPinDirection+0x66>
    29c0:	85 c0       	rjmp	.+266    	; 0x2acc <GPIO_setupPinDirection+0x170>
    29c2:	af c0       	rjmp	.+350    	; 0x2b22 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    29c4:	8b 81       	ldd	r24, Y+3	; 0x03
    29c6:	81 30       	cpi	r24, 0x01	; 1
    29c8:	a1 f4       	brne	.+40     	; 0x29f2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    29ca:	aa e3       	ldi	r26, 0x3A	; 58
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	ea e3       	ldi	r30, 0x3A	; 58
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	80 81       	ld	r24, Z
    29d4:	48 2f       	mov	r20, r24
    29d6:	8a 81       	ldd	r24, Y+2	; 0x02
    29d8:	28 2f       	mov	r18, r24
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	02 2e       	mov	r0, r18
    29e2:	02 c0       	rjmp	.+4      	; 0x29e8 <GPIO_setupPinDirection+0x8c>
    29e4:	88 0f       	add	r24, r24
    29e6:	99 1f       	adc	r25, r25
    29e8:	0a 94       	dec	r0
    29ea:	e2 f7       	brpl	.-8      	; 0x29e4 <GPIO_setupPinDirection+0x88>
    29ec:	84 2b       	or	r24, r20
    29ee:	8c 93       	st	X, r24
    29f0:	98 c0       	rjmp	.+304    	; 0x2b22 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    29f2:	aa e3       	ldi	r26, 0x3A	; 58
    29f4:	b0 e0       	ldi	r27, 0x00	; 0
    29f6:	ea e3       	ldi	r30, 0x3A	; 58
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	80 81       	ld	r24, Z
    29fc:	48 2f       	mov	r20, r24
    29fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2a00:	28 2f       	mov	r18, r24
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	02 2e       	mov	r0, r18
    2a0a:	02 c0       	rjmp	.+4      	; 0x2a10 <GPIO_setupPinDirection+0xb4>
    2a0c:	88 0f       	add	r24, r24
    2a0e:	99 1f       	adc	r25, r25
    2a10:	0a 94       	dec	r0
    2a12:	e2 f7       	brpl	.-8      	; 0x2a0c <GPIO_setupPinDirection+0xb0>
    2a14:	80 95       	com	r24
    2a16:	84 23       	and	r24, r20
    2a18:	8c 93       	st	X, r24
    2a1a:	83 c0       	rjmp	.+262    	; 0x2b22 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1e:	81 30       	cpi	r24, 0x01	; 1
    2a20:	a1 f4       	brne	.+40     	; 0x2a4a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2a22:	a7 e3       	ldi	r26, 0x37	; 55
    2a24:	b0 e0       	ldi	r27, 0x00	; 0
    2a26:	e7 e3       	ldi	r30, 0x37	; 55
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	80 81       	ld	r24, Z
    2a2c:	48 2f       	mov	r20, r24
    2a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a30:	28 2f       	mov	r18, r24
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	02 2e       	mov	r0, r18
    2a3a:	02 c0       	rjmp	.+4      	; 0x2a40 <GPIO_setupPinDirection+0xe4>
    2a3c:	88 0f       	add	r24, r24
    2a3e:	99 1f       	adc	r25, r25
    2a40:	0a 94       	dec	r0
    2a42:	e2 f7       	brpl	.-8      	; 0x2a3c <GPIO_setupPinDirection+0xe0>
    2a44:	84 2b       	or	r24, r20
    2a46:	8c 93       	st	X, r24
    2a48:	6c c0       	rjmp	.+216    	; 0x2b22 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2a4a:	a7 e3       	ldi	r26, 0x37	; 55
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	e7 e3       	ldi	r30, 0x37	; 55
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	48 2f       	mov	r20, r24
    2a56:	8a 81       	ldd	r24, Y+2	; 0x02
    2a58:	28 2f       	mov	r18, r24
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	02 2e       	mov	r0, r18
    2a62:	02 c0       	rjmp	.+4      	; 0x2a68 <GPIO_setupPinDirection+0x10c>
    2a64:	88 0f       	add	r24, r24
    2a66:	99 1f       	adc	r25, r25
    2a68:	0a 94       	dec	r0
    2a6a:	e2 f7       	brpl	.-8      	; 0x2a64 <GPIO_setupPinDirection+0x108>
    2a6c:	80 95       	com	r24
    2a6e:	84 23       	and	r24, r20
    2a70:	8c 93       	st	X, r24
    2a72:	57 c0       	rjmp	.+174    	; 0x2b22 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2a74:	8b 81       	ldd	r24, Y+3	; 0x03
    2a76:	81 30       	cpi	r24, 0x01	; 1
    2a78:	a1 f4       	brne	.+40     	; 0x2aa2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2a7a:	a4 e3       	ldi	r26, 0x34	; 52
    2a7c:	b0 e0       	ldi	r27, 0x00	; 0
    2a7e:	e4 e3       	ldi	r30, 0x34	; 52
    2a80:	f0 e0       	ldi	r31, 0x00	; 0
    2a82:	80 81       	ld	r24, Z
    2a84:	48 2f       	mov	r20, r24
    2a86:	8a 81       	ldd	r24, Y+2	; 0x02
    2a88:	28 2f       	mov	r18, r24
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	02 2e       	mov	r0, r18
    2a92:	02 c0       	rjmp	.+4      	; 0x2a98 <GPIO_setupPinDirection+0x13c>
    2a94:	88 0f       	add	r24, r24
    2a96:	99 1f       	adc	r25, r25
    2a98:	0a 94       	dec	r0
    2a9a:	e2 f7       	brpl	.-8      	; 0x2a94 <GPIO_setupPinDirection+0x138>
    2a9c:	84 2b       	or	r24, r20
    2a9e:	8c 93       	st	X, r24
    2aa0:	40 c0       	rjmp	.+128    	; 0x2b22 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2aa2:	a4 e3       	ldi	r26, 0x34	; 52
    2aa4:	b0 e0       	ldi	r27, 0x00	; 0
    2aa6:	e4 e3       	ldi	r30, 0x34	; 52
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	80 81       	ld	r24, Z
    2aac:	48 2f       	mov	r20, r24
    2aae:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab0:	28 2f       	mov	r18, r24
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	02 2e       	mov	r0, r18
    2aba:	02 c0       	rjmp	.+4      	; 0x2ac0 <GPIO_setupPinDirection+0x164>
    2abc:	88 0f       	add	r24, r24
    2abe:	99 1f       	adc	r25, r25
    2ac0:	0a 94       	dec	r0
    2ac2:	e2 f7       	brpl	.-8      	; 0x2abc <GPIO_setupPinDirection+0x160>
    2ac4:	80 95       	com	r24
    2ac6:	84 23       	and	r24, r20
    2ac8:	8c 93       	st	X, r24
    2aca:	2b c0       	rjmp	.+86     	; 0x2b22 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2acc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ace:	81 30       	cpi	r24, 0x01	; 1
    2ad0:	a1 f4       	brne	.+40     	; 0x2afa <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2ad2:	a1 e3       	ldi	r26, 0x31	; 49
    2ad4:	b0 e0       	ldi	r27, 0x00	; 0
    2ad6:	e1 e3       	ldi	r30, 0x31	; 49
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	80 81       	ld	r24, Z
    2adc:	48 2f       	mov	r20, r24
    2ade:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae0:	28 2f       	mov	r18, r24
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	02 2e       	mov	r0, r18
    2aea:	02 c0       	rjmp	.+4      	; 0x2af0 <GPIO_setupPinDirection+0x194>
    2aec:	88 0f       	add	r24, r24
    2aee:	99 1f       	adc	r25, r25
    2af0:	0a 94       	dec	r0
    2af2:	e2 f7       	brpl	.-8      	; 0x2aec <GPIO_setupPinDirection+0x190>
    2af4:	84 2b       	or	r24, r20
    2af6:	8c 93       	st	X, r24
    2af8:	14 c0       	rjmp	.+40     	; 0x2b22 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2afa:	a1 e3       	ldi	r26, 0x31	; 49
    2afc:	b0 e0       	ldi	r27, 0x00	; 0
    2afe:	e1 e3       	ldi	r30, 0x31	; 49
    2b00:	f0 e0       	ldi	r31, 0x00	; 0
    2b02:	80 81       	ld	r24, Z
    2b04:	48 2f       	mov	r20, r24
    2b06:	8a 81       	ldd	r24, Y+2	; 0x02
    2b08:	28 2f       	mov	r18, r24
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	02 2e       	mov	r0, r18
    2b12:	02 c0       	rjmp	.+4      	; 0x2b18 <GPIO_setupPinDirection+0x1bc>
    2b14:	88 0f       	add	r24, r24
    2b16:	99 1f       	adc	r25, r25
    2b18:	0a 94       	dec	r0
    2b1a:	e2 f7       	brpl	.-8      	; 0x2b14 <GPIO_setupPinDirection+0x1b8>
    2b1c:	80 95       	com	r24
    2b1e:	84 23       	and	r24, r20
    2b20:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	cf 91       	pop	r28
    2b2e:	df 91       	pop	r29
    2b30:	08 95       	ret

00002b32 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2b32:	df 93       	push	r29
    2b34:	cf 93       	push	r28
    2b36:	00 d0       	rcall	.+0      	; 0x2b38 <GPIO_writePin+0x6>
    2b38:	00 d0       	rcall	.+0      	; 0x2b3a <GPIO_writePin+0x8>
    2b3a:	0f 92       	push	r0
    2b3c:	cd b7       	in	r28, 0x3d	; 61
    2b3e:	de b7       	in	r29, 0x3e	; 62
    2b40:	89 83       	std	Y+1, r24	; 0x01
    2b42:	6a 83       	std	Y+2, r22	; 0x02
    2b44:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2b46:	8a 81       	ldd	r24, Y+2	; 0x02
    2b48:	88 30       	cpi	r24, 0x08	; 8
    2b4a:	08 f0       	brcs	.+2      	; 0x2b4e <GPIO_writePin+0x1c>
    2b4c:	d5 c0       	rjmp	.+426    	; 0x2cf8 <GPIO_writePin+0x1c6>
    2b4e:	89 81       	ldd	r24, Y+1	; 0x01
    2b50:	84 30       	cpi	r24, 0x04	; 4
    2b52:	08 f0       	brcs	.+2      	; 0x2b56 <GPIO_writePin+0x24>
    2b54:	d1 c0       	rjmp	.+418    	; 0x2cf8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	28 2f       	mov	r18, r24
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	3d 83       	std	Y+5, r19	; 0x05
    2b5e:	2c 83       	std	Y+4, r18	; 0x04
    2b60:	8c 81       	ldd	r24, Y+4	; 0x04
    2b62:	9d 81       	ldd	r25, Y+5	; 0x05
    2b64:	81 30       	cpi	r24, 0x01	; 1
    2b66:	91 05       	cpc	r25, r1
    2b68:	09 f4       	brne	.+2      	; 0x2b6c <GPIO_writePin+0x3a>
    2b6a:	43 c0       	rjmp	.+134    	; 0x2bf2 <GPIO_writePin+0xc0>
    2b6c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b6e:	3d 81       	ldd	r19, Y+5	; 0x05
    2b70:	22 30       	cpi	r18, 0x02	; 2
    2b72:	31 05       	cpc	r19, r1
    2b74:	2c f4       	brge	.+10     	; 0x2b80 <GPIO_writePin+0x4e>
    2b76:	8c 81       	ldd	r24, Y+4	; 0x04
    2b78:	9d 81       	ldd	r25, Y+5	; 0x05
    2b7a:	00 97       	sbiw	r24, 0x00	; 0
    2b7c:	71 f0       	breq	.+28     	; 0x2b9a <GPIO_writePin+0x68>
    2b7e:	bc c0       	rjmp	.+376    	; 0x2cf8 <GPIO_writePin+0x1c6>
    2b80:	2c 81       	ldd	r18, Y+4	; 0x04
    2b82:	3d 81       	ldd	r19, Y+5	; 0x05
    2b84:	22 30       	cpi	r18, 0x02	; 2
    2b86:	31 05       	cpc	r19, r1
    2b88:	09 f4       	brne	.+2      	; 0x2b8c <GPIO_writePin+0x5a>
    2b8a:	5f c0       	rjmp	.+190    	; 0x2c4a <GPIO_writePin+0x118>
    2b8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b8e:	9d 81       	ldd	r25, Y+5	; 0x05
    2b90:	83 30       	cpi	r24, 0x03	; 3
    2b92:	91 05       	cpc	r25, r1
    2b94:	09 f4       	brne	.+2      	; 0x2b98 <GPIO_writePin+0x66>
    2b96:	85 c0       	rjmp	.+266    	; 0x2ca2 <GPIO_writePin+0x170>
    2b98:	af c0       	rjmp	.+350    	; 0x2cf8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9c:	81 30       	cpi	r24, 0x01	; 1
    2b9e:	a1 f4       	brne	.+40     	; 0x2bc8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2ba0:	ab e3       	ldi	r26, 0x3B	; 59
    2ba2:	b0 e0       	ldi	r27, 0x00	; 0
    2ba4:	eb e3       	ldi	r30, 0x3B	; 59
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	80 81       	ld	r24, Z
    2baa:	48 2f       	mov	r20, r24
    2bac:	8a 81       	ldd	r24, Y+2	; 0x02
    2bae:	28 2f       	mov	r18, r24
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	02 2e       	mov	r0, r18
    2bb8:	02 c0       	rjmp	.+4      	; 0x2bbe <GPIO_writePin+0x8c>
    2bba:	88 0f       	add	r24, r24
    2bbc:	99 1f       	adc	r25, r25
    2bbe:	0a 94       	dec	r0
    2bc0:	e2 f7       	brpl	.-8      	; 0x2bba <GPIO_writePin+0x88>
    2bc2:	84 2b       	or	r24, r20
    2bc4:	8c 93       	st	X, r24
    2bc6:	98 c0       	rjmp	.+304    	; 0x2cf8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2bc8:	ab e3       	ldi	r26, 0x3B	; 59
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	eb e3       	ldi	r30, 0x3B	; 59
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	48 2f       	mov	r20, r24
    2bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd6:	28 2f       	mov	r18, r24
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	02 2e       	mov	r0, r18
    2be0:	02 c0       	rjmp	.+4      	; 0x2be6 <GPIO_writePin+0xb4>
    2be2:	88 0f       	add	r24, r24
    2be4:	99 1f       	adc	r25, r25
    2be6:	0a 94       	dec	r0
    2be8:	e2 f7       	brpl	.-8      	; 0x2be2 <GPIO_writePin+0xb0>
    2bea:	80 95       	com	r24
    2bec:	84 23       	and	r24, r20
    2bee:	8c 93       	st	X, r24
    2bf0:	83 c0       	rjmp	.+262    	; 0x2cf8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf4:	81 30       	cpi	r24, 0x01	; 1
    2bf6:	a1 f4       	brne	.+40     	; 0x2c20 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2bf8:	a8 e3       	ldi	r26, 0x38	; 56
    2bfa:	b0 e0       	ldi	r27, 0x00	; 0
    2bfc:	e8 e3       	ldi	r30, 0x38	; 56
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	80 81       	ld	r24, Z
    2c02:	48 2f       	mov	r20, r24
    2c04:	8a 81       	ldd	r24, Y+2	; 0x02
    2c06:	28 2f       	mov	r18, r24
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	02 2e       	mov	r0, r18
    2c10:	02 c0       	rjmp	.+4      	; 0x2c16 <GPIO_writePin+0xe4>
    2c12:	88 0f       	add	r24, r24
    2c14:	99 1f       	adc	r25, r25
    2c16:	0a 94       	dec	r0
    2c18:	e2 f7       	brpl	.-8      	; 0x2c12 <GPIO_writePin+0xe0>
    2c1a:	84 2b       	or	r24, r20
    2c1c:	8c 93       	st	X, r24
    2c1e:	6c c0       	rjmp	.+216    	; 0x2cf8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2c20:	a8 e3       	ldi	r26, 0x38	; 56
    2c22:	b0 e0       	ldi	r27, 0x00	; 0
    2c24:	e8 e3       	ldi	r30, 0x38	; 56
    2c26:	f0 e0       	ldi	r31, 0x00	; 0
    2c28:	80 81       	ld	r24, Z
    2c2a:	48 2f       	mov	r20, r24
    2c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2e:	28 2f       	mov	r18, r24
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	02 2e       	mov	r0, r18
    2c38:	02 c0       	rjmp	.+4      	; 0x2c3e <GPIO_writePin+0x10c>
    2c3a:	88 0f       	add	r24, r24
    2c3c:	99 1f       	adc	r25, r25
    2c3e:	0a 94       	dec	r0
    2c40:	e2 f7       	brpl	.-8      	; 0x2c3a <GPIO_writePin+0x108>
    2c42:	80 95       	com	r24
    2c44:	84 23       	and	r24, r20
    2c46:	8c 93       	st	X, r24
    2c48:	57 c0       	rjmp	.+174    	; 0x2cf8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4c:	81 30       	cpi	r24, 0x01	; 1
    2c4e:	a1 f4       	brne	.+40     	; 0x2c78 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2c50:	a5 e3       	ldi	r26, 0x35	; 53
    2c52:	b0 e0       	ldi	r27, 0x00	; 0
    2c54:	e5 e3       	ldi	r30, 0x35	; 53
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	80 81       	ld	r24, Z
    2c5a:	48 2f       	mov	r20, r24
    2c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5e:	28 2f       	mov	r18, r24
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	02 2e       	mov	r0, r18
    2c68:	02 c0       	rjmp	.+4      	; 0x2c6e <GPIO_writePin+0x13c>
    2c6a:	88 0f       	add	r24, r24
    2c6c:	99 1f       	adc	r25, r25
    2c6e:	0a 94       	dec	r0
    2c70:	e2 f7       	brpl	.-8      	; 0x2c6a <GPIO_writePin+0x138>
    2c72:	84 2b       	or	r24, r20
    2c74:	8c 93       	st	X, r24
    2c76:	40 c0       	rjmp	.+128    	; 0x2cf8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2c78:	a5 e3       	ldi	r26, 0x35	; 53
    2c7a:	b0 e0       	ldi	r27, 0x00	; 0
    2c7c:	e5 e3       	ldi	r30, 0x35	; 53
    2c7e:	f0 e0       	ldi	r31, 0x00	; 0
    2c80:	80 81       	ld	r24, Z
    2c82:	48 2f       	mov	r20, r24
    2c84:	8a 81       	ldd	r24, Y+2	; 0x02
    2c86:	28 2f       	mov	r18, r24
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	02 2e       	mov	r0, r18
    2c90:	02 c0       	rjmp	.+4      	; 0x2c96 <GPIO_writePin+0x164>
    2c92:	88 0f       	add	r24, r24
    2c94:	99 1f       	adc	r25, r25
    2c96:	0a 94       	dec	r0
    2c98:	e2 f7       	brpl	.-8      	; 0x2c92 <GPIO_writePin+0x160>
    2c9a:	80 95       	com	r24
    2c9c:	84 23       	and	r24, r20
    2c9e:	8c 93       	st	X, r24
    2ca0:	2b c0       	rjmp	.+86     	; 0x2cf8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca4:	81 30       	cpi	r24, 0x01	; 1
    2ca6:	a1 f4       	brne	.+40     	; 0x2cd0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2ca8:	a2 e3       	ldi	r26, 0x32	; 50
    2caa:	b0 e0       	ldi	r27, 0x00	; 0
    2cac:	e2 e3       	ldi	r30, 0x32	; 50
    2cae:	f0 e0       	ldi	r31, 0x00	; 0
    2cb0:	80 81       	ld	r24, Z
    2cb2:	48 2f       	mov	r20, r24
    2cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb6:	28 2f       	mov	r18, r24
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	02 2e       	mov	r0, r18
    2cc0:	02 c0       	rjmp	.+4      	; 0x2cc6 <GPIO_writePin+0x194>
    2cc2:	88 0f       	add	r24, r24
    2cc4:	99 1f       	adc	r25, r25
    2cc6:	0a 94       	dec	r0
    2cc8:	e2 f7       	brpl	.-8      	; 0x2cc2 <GPIO_writePin+0x190>
    2cca:	84 2b       	or	r24, r20
    2ccc:	8c 93       	st	X, r24
    2cce:	14 c0       	rjmp	.+40     	; 0x2cf8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2cd0:	a2 e3       	ldi	r26, 0x32	; 50
    2cd2:	b0 e0       	ldi	r27, 0x00	; 0
    2cd4:	e2 e3       	ldi	r30, 0x32	; 50
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	80 81       	ld	r24, Z
    2cda:	48 2f       	mov	r20, r24
    2cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cde:	28 2f       	mov	r18, r24
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	02 2e       	mov	r0, r18
    2ce8:	02 c0       	rjmp	.+4      	; 0x2cee <GPIO_writePin+0x1bc>
    2cea:	88 0f       	add	r24, r24
    2cec:	99 1f       	adc	r25, r25
    2cee:	0a 94       	dec	r0
    2cf0:	e2 f7       	brpl	.-8      	; 0x2cea <GPIO_writePin+0x1b8>
    2cf2:	80 95       	com	r24
    2cf4:	84 23       	and	r24, r20
    2cf6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2cf8:	0f 90       	pop	r0
    2cfa:	0f 90       	pop	r0
    2cfc:	0f 90       	pop	r0
    2cfe:	0f 90       	pop	r0
    2d00:	0f 90       	pop	r0
    2d02:	cf 91       	pop	r28
    2d04:	df 91       	pop	r29
    2d06:	08 95       	ret

00002d08 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2d08:	df 93       	push	r29
    2d0a:	cf 93       	push	r28
    2d0c:	00 d0       	rcall	.+0      	; 0x2d0e <GPIO_readPin+0x6>
    2d0e:	00 d0       	rcall	.+0      	; 0x2d10 <GPIO_readPin+0x8>
    2d10:	0f 92       	push	r0
    2d12:	cd b7       	in	r28, 0x3d	; 61
    2d14:	de b7       	in	r29, 0x3e	; 62
    2d16:	8a 83       	std	Y+2, r24	; 0x02
    2d18:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2d1a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1e:	88 30       	cpi	r24, 0x08	; 8
    2d20:	08 f0       	brcs	.+2      	; 0x2d24 <GPIO_readPin+0x1c>
    2d22:	84 c0       	rjmp	.+264    	; 0x2e2c <GPIO_readPin+0x124>
    2d24:	8a 81       	ldd	r24, Y+2	; 0x02
    2d26:	84 30       	cpi	r24, 0x04	; 4
    2d28:	08 f0       	brcs	.+2      	; 0x2d2c <GPIO_readPin+0x24>
    2d2a:	80 c0       	rjmp	.+256    	; 0x2e2c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2e:	28 2f       	mov	r18, r24
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	3d 83       	std	Y+5, r19	; 0x05
    2d34:	2c 83       	std	Y+4, r18	; 0x04
    2d36:	4c 81       	ldd	r20, Y+4	; 0x04
    2d38:	5d 81       	ldd	r21, Y+5	; 0x05
    2d3a:	41 30       	cpi	r20, 0x01	; 1
    2d3c:	51 05       	cpc	r21, r1
    2d3e:	79 f1       	breq	.+94     	; 0x2d9e <GPIO_readPin+0x96>
    2d40:	8c 81       	ldd	r24, Y+4	; 0x04
    2d42:	9d 81       	ldd	r25, Y+5	; 0x05
    2d44:	82 30       	cpi	r24, 0x02	; 2
    2d46:	91 05       	cpc	r25, r1
    2d48:	34 f4       	brge	.+12     	; 0x2d56 <GPIO_readPin+0x4e>
    2d4a:	2c 81       	ldd	r18, Y+4	; 0x04
    2d4c:	3d 81       	ldd	r19, Y+5	; 0x05
    2d4e:	21 15       	cp	r18, r1
    2d50:	31 05       	cpc	r19, r1
    2d52:	69 f0       	breq	.+26     	; 0x2d6e <GPIO_readPin+0x66>
    2d54:	6b c0       	rjmp	.+214    	; 0x2e2c <GPIO_readPin+0x124>
    2d56:	4c 81       	ldd	r20, Y+4	; 0x04
    2d58:	5d 81       	ldd	r21, Y+5	; 0x05
    2d5a:	42 30       	cpi	r20, 0x02	; 2
    2d5c:	51 05       	cpc	r21, r1
    2d5e:	b9 f1       	breq	.+110    	; 0x2dce <GPIO_readPin+0xc6>
    2d60:	8c 81       	ldd	r24, Y+4	; 0x04
    2d62:	9d 81       	ldd	r25, Y+5	; 0x05
    2d64:	83 30       	cpi	r24, 0x03	; 3
    2d66:	91 05       	cpc	r25, r1
    2d68:	09 f4       	brne	.+2      	; 0x2d6c <GPIO_readPin+0x64>
    2d6a:	49 c0       	rjmp	.+146    	; 0x2dfe <GPIO_readPin+0xf6>
    2d6c:	5f c0       	rjmp	.+190    	; 0x2e2c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2d6e:	e9 e3       	ldi	r30, 0x39	; 57
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	80 81       	ld	r24, Z
    2d74:	28 2f       	mov	r18, r24
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7a:	88 2f       	mov	r24, r24
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	a9 01       	movw	r20, r18
    2d80:	02 c0       	rjmp	.+4      	; 0x2d86 <GPIO_readPin+0x7e>
    2d82:	55 95       	asr	r21
    2d84:	47 95       	ror	r20
    2d86:	8a 95       	dec	r24
    2d88:	e2 f7       	brpl	.-8      	; 0x2d82 <GPIO_readPin+0x7a>
    2d8a:	ca 01       	movw	r24, r20
    2d8c:	81 70       	andi	r24, 0x01	; 1
    2d8e:	90 70       	andi	r25, 0x00	; 0
    2d90:	88 23       	and	r24, r24
    2d92:	19 f0       	breq	.+6      	; 0x2d9a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2d94:	81 e0       	ldi	r24, 0x01	; 1
    2d96:	89 83       	std	Y+1, r24	; 0x01
    2d98:	49 c0       	rjmp	.+146    	; 0x2e2c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2d9a:	19 82       	std	Y+1, r1	; 0x01
    2d9c:	47 c0       	rjmp	.+142    	; 0x2e2c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2d9e:	e6 e3       	ldi	r30, 0x36	; 54
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	80 81       	ld	r24, Z
    2da4:	28 2f       	mov	r18, r24
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	8b 81       	ldd	r24, Y+3	; 0x03
    2daa:	88 2f       	mov	r24, r24
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	a9 01       	movw	r20, r18
    2db0:	02 c0       	rjmp	.+4      	; 0x2db6 <GPIO_readPin+0xae>
    2db2:	55 95       	asr	r21
    2db4:	47 95       	ror	r20
    2db6:	8a 95       	dec	r24
    2db8:	e2 f7       	brpl	.-8      	; 0x2db2 <GPIO_readPin+0xaa>
    2dba:	ca 01       	movw	r24, r20
    2dbc:	81 70       	andi	r24, 0x01	; 1
    2dbe:	90 70       	andi	r25, 0x00	; 0
    2dc0:	88 23       	and	r24, r24
    2dc2:	19 f0       	breq	.+6      	; 0x2dca <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	89 83       	std	Y+1, r24	; 0x01
    2dc8:	31 c0       	rjmp	.+98     	; 0x2e2c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2dca:	19 82       	std	Y+1, r1	; 0x01
    2dcc:	2f c0       	rjmp	.+94     	; 0x2e2c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2dce:	e3 e3       	ldi	r30, 0x33	; 51
    2dd0:	f0 e0       	ldi	r31, 0x00	; 0
    2dd2:	80 81       	ld	r24, Z
    2dd4:	28 2f       	mov	r18, r24
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dda:	88 2f       	mov	r24, r24
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	a9 01       	movw	r20, r18
    2de0:	02 c0       	rjmp	.+4      	; 0x2de6 <GPIO_readPin+0xde>
    2de2:	55 95       	asr	r21
    2de4:	47 95       	ror	r20
    2de6:	8a 95       	dec	r24
    2de8:	e2 f7       	brpl	.-8      	; 0x2de2 <GPIO_readPin+0xda>
    2dea:	ca 01       	movw	r24, r20
    2dec:	81 70       	andi	r24, 0x01	; 1
    2dee:	90 70       	andi	r25, 0x00	; 0
    2df0:	88 23       	and	r24, r24
    2df2:	19 f0       	breq	.+6      	; 0x2dfa <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	89 83       	std	Y+1, r24	; 0x01
    2df8:	19 c0       	rjmp	.+50     	; 0x2e2c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2dfa:	19 82       	std	Y+1, r1	; 0x01
    2dfc:	17 c0       	rjmp	.+46     	; 0x2e2c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2dfe:	e0 e3       	ldi	r30, 0x30	; 48
    2e00:	f0 e0       	ldi	r31, 0x00	; 0
    2e02:	80 81       	ld	r24, Z
    2e04:	28 2f       	mov	r18, r24
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0a:	88 2f       	mov	r24, r24
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	a9 01       	movw	r20, r18
    2e10:	02 c0       	rjmp	.+4      	; 0x2e16 <GPIO_readPin+0x10e>
    2e12:	55 95       	asr	r21
    2e14:	47 95       	ror	r20
    2e16:	8a 95       	dec	r24
    2e18:	e2 f7       	brpl	.-8      	; 0x2e12 <GPIO_readPin+0x10a>
    2e1a:	ca 01       	movw	r24, r20
    2e1c:	81 70       	andi	r24, 0x01	; 1
    2e1e:	90 70       	andi	r25, 0x00	; 0
    2e20:	88 23       	and	r24, r24
    2e22:	19 f0       	breq	.+6      	; 0x2e2a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	89 83       	std	Y+1, r24	; 0x01
    2e28:	01 c0       	rjmp	.+2      	; 0x2e2c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2e2a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e2e:	0f 90       	pop	r0
    2e30:	0f 90       	pop	r0
    2e32:	0f 90       	pop	r0
    2e34:	0f 90       	pop	r0
    2e36:	0f 90       	pop	r0
    2e38:	cf 91       	pop	r28
    2e3a:	df 91       	pop	r29
    2e3c:	08 95       	ret

00002e3e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2e3e:	df 93       	push	r29
    2e40:	cf 93       	push	r28
    2e42:	00 d0       	rcall	.+0      	; 0x2e44 <GPIO_setupPortDirection+0x6>
    2e44:	00 d0       	rcall	.+0      	; 0x2e46 <GPIO_setupPortDirection+0x8>
    2e46:	cd b7       	in	r28, 0x3d	; 61
    2e48:	de b7       	in	r29, 0x3e	; 62
    2e4a:	89 83       	std	Y+1, r24	; 0x01
    2e4c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2e4e:	89 81       	ldd	r24, Y+1	; 0x01
    2e50:	84 30       	cpi	r24, 0x04	; 4
    2e52:	90 f5       	brcc	.+100    	; 0x2eb8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2e54:	89 81       	ldd	r24, Y+1	; 0x01
    2e56:	28 2f       	mov	r18, r24
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	3c 83       	std	Y+4, r19	; 0x04
    2e5c:	2b 83       	std	Y+3, r18	; 0x03
    2e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e60:	9c 81       	ldd	r25, Y+4	; 0x04
    2e62:	81 30       	cpi	r24, 0x01	; 1
    2e64:	91 05       	cpc	r25, r1
    2e66:	d1 f0       	breq	.+52     	; 0x2e9c <GPIO_setupPortDirection+0x5e>
    2e68:	2b 81       	ldd	r18, Y+3	; 0x03
    2e6a:	3c 81       	ldd	r19, Y+4	; 0x04
    2e6c:	22 30       	cpi	r18, 0x02	; 2
    2e6e:	31 05       	cpc	r19, r1
    2e70:	2c f4       	brge	.+10     	; 0x2e7c <GPIO_setupPortDirection+0x3e>
    2e72:	8b 81       	ldd	r24, Y+3	; 0x03
    2e74:	9c 81       	ldd	r25, Y+4	; 0x04
    2e76:	00 97       	sbiw	r24, 0x00	; 0
    2e78:	61 f0       	breq	.+24     	; 0x2e92 <GPIO_setupPortDirection+0x54>
    2e7a:	1e c0       	rjmp	.+60     	; 0x2eb8 <GPIO_setupPortDirection+0x7a>
    2e7c:	2b 81       	ldd	r18, Y+3	; 0x03
    2e7e:	3c 81       	ldd	r19, Y+4	; 0x04
    2e80:	22 30       	cpi	r18, 0x02	; 2
    2e82:	31 05       	cpc	r19, r1
    2e84:	81 f0       	breq	.+32     	; 0x2ea6 <GPIO_setupPortDirection+0x68>
    2e86:	8b 81       	ldd	r24, Y+3	; 0x03
    2e88:	9c 81       	ldd	r25, Y+4	; 0x04
    2e8a:	83 30       	cpi	r24, 0x03	; 3
    2e8c:	91 05       	cpc	r25, r1
    2e8e:	81 f0       	breq	.+32     	; 0x2eb0 <GPIO_setupPortDirection+0x72>
    2e90:	13 c0       	rjmp	.+38     	; 0x2eb8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2e92:	ea e3       	ldi	r30, 0x3A	; 58
    2e94:	f0 e0       	ldi	r31, 0x00	; 0
    2e96:	8a 81       	ldd	r24, Y+2	; 0x02
    2e98:	80 83       	st	Z, r24
    2e9a:	0e c0       	rjmp	.+28     	; 0x2eb8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2e9c:	e7 e3       	ldi	r30, 0x37	; 55
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea2:	80 83       	st	Z, r24
    2ea4:	09 c0       	rjmp	.+18     	; 0x2eb8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2ea6:	e4 e3       	ldi	r30, 0x34	; 52
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2eac:	80 83       	st	Z, r24
    2eae:	04 c0       	rjmp	.+8      	; 0x2eb8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2eb0:	e1 e3       	ldi	r30, 0x31	; 49
    2eb2:	f0 e0       	ldi	r31, 0x00	; 0
    2eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb6:	80 83       	st	Z, r24
			break;
		}
	}
}
    2eb8:	0f 90       	pop	r0
    2eba:	0f 90       	pop	r0
    2ebc:	0f 90       	pop	r0
    2ebe:	0f 90       	pop	r0
    2ec0:	cf 91       	pop	r28
    2ec2:	df 91       	pop	r29
    2ec4:	08 95       	ret

00002ec6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2ec6:	df 93       	push	r29
    2ec8:	cf 93       	push	r28
    2eca:	00 d0       	rcall	.+0      	; 0x2ecc <GPIO_writePort+0x6>
    2ecc:	00 d0       	rcall	.+0      	; 0x2ece <GPIO_writePort+0x8>
    2ece:	cd b7       	in	r28, 0x3d	; 61
    2ed0:	de b7       	in	r29, 0x3e	; 62
    2ed2:	89 83       	std	Y+1, r24	; 0x01
    2ed4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2ed6:	89 81       	ldd	r24, Y+1	; 0x01
    2ed8:	84 30       	cpi	r24, 0x04	; 4
    2eda:	90 f5       	brcc	.+100    	; 0x2f40 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2edc:	89 81       	ldd	r24, Y+1	; 0x01
    2ede:	28 2f       	mov	r18, r24
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	3c 83       	std	Y+4, r19	; 0x04
    2ee4:	2b 83       	std	Y+3, r18	; 0x03
    2ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eea:	81 30       	cpi	r24, 0x01	; 1
    2eec:	91 05       	cpc	r25, r1
    2eee:	d1 f0       	breq	.+52     	; 0x2f24 <GPIO_writePort+0x5e>
    2ef0:	2b 81       	ldd	r18, Y+3	; 0x03
    2ef2:	3c 81       	ldd	r19, Y+4	; 0x04
    2ef4:	22 30       	cpi	r18, 0x02	; 2
    2ef6:	31 05       	cpc	r19, r1
    2ef8:	2c f4       	brge	.+10     	; 0x2f04 <GPIO_writePort+0x3e>
    2efa:	8b 81       	ldd	r24, Y+3	; 0x03
    2efc:	9c 81       	ldd	r25, Y+4	; 0x04
    2efe:	00 97       	sbiw	r24, 0x00	; 0
    2f00:	61 f0       	breq	.+24     	; 0x2f1a <GPIO_writePort+0x54>
    2f02:	1e c0       	rjmp	.+60     	; 0x2f40 <GPIO_writePort+0x7a>
    2f04:	2b 81       	ldd	r18, Y+3	; 0x03
    2f06:	3c 81       	ldd	r19, Y+4	; 0x04
    2f08:	22 30       	cpi	r18, 0x02	; 2
    2f0a:	31 05       	cpc	r19, r1
    2f0c:	81 f0       	breq	.+32     	; 0x2f2e <GPIO_writePort+0x68>
    2f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f10:	9c 81       	ldd	r25, Y+4	; 0x04
    2f12:	83 30       	cpi	r24, 0x03	; 3
    2f14:	91 05       	cpc	r25, r1
    2f16:	81 f0       	breq	.+32     	; 0x2f38 <GPIO_writePort+0x72>
    2f18:	13 c0       	rjmp	.+38     	; 0x2f40 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2f1a:	eb e3       	ldi	r30, 0x3B	; 59
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f20:	80 83       	st	Z, r24
    2f22:	0e c0       	rjmp	.+28     	; 0x2f40 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2f24:	e8 e3       	ldi	r30, 0x38	; 56
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2a:	80 83       	st	Z, r24
    2f2c:	09 c0       	rjmp	.+18     	; 0x2f40 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2f2e:	e5 e3       	ldi	r30, 0x35	; 53
    2f30:	f0 e0       	ldi	r31, 0x00	; 0
    2f32:	8a 81       	ldd	r24, Y+2	; 0x02
    2f34:	80 83       	st	Z, r24
    2f36:	04 c0       	rjmp	.+8      	; 0x2f40 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2f38:	e2 e3       	ldi	r30, 0x32	; 50
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3e:	80 83       	st	Z, r24
			break;
		}
	}
}
    2f40:	0f 90       	pop	r0
    2f42:	0f 90       	pop	r0
    2f44:	0f 90       	pop	r0
    2f46:	0f 90       	pop	r0
    2f48:	cf 91       	pop	r28
    2f4a:	df 91       	pop	r29
    2f4c:	08 95       	ret

00002f4e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2f4e:	df 93       	push	r29
    2f50:	cf 93       	push	r28
    2f52:	00 d0       	rcall	.+0      	; 0x2f54 <GPIO_readPort+0x6>
    2f54:	00 d0       	rcall	.+0      	; 0x2f56 <GPIO_readPort+0x8>
    2f56:	cd b7       	in	r28, 0x3d	; 61
    2f58:	de b7       	in	r29, 0x3e	; 62
    2f5a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2f5c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f60:	84 30       	cpi	r24, 0x04	; 4
    2f62:	90 f5       	brcc	.+100    	; 0x2fc8 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2f64:	8a 81       	ldd	r24, Y+2	; 0x02
    2f66:	28 2f       	mov	r18, r24
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	3c 83       	std	Y+4, r19	; 0x04
    2f6c:	2b 83       	std	Y+3, r18	; 0x03
    2f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f70:	9c 81       	ldd	r25, Y+4	; 0x04
    2f72:	81 30       	cpi	r24, 0x01	; 1
    2f74:	91 05       	cpc	r25, r1
    2f76:	d1 f0       	breq	.+52     	; 0x2fac <GPIO_readPort+0x5e>
    2f78:	2b 81       	ldd	r18, Y+3	; 0x03
    2f7a:	3c 81       	ldd	r19, Y+4	; 0x04
    2f7c:	22 30       	cpi	r18, 0x02	; 2
    2f7e:	31 05       	cpc	r19, r1
    2f80:	2c f4       	brge	.+10     	; 0x2f8c <GPIO_readPort+0x3e>
    2f82:	8b 81       	ldd	r24, Y+3	; 0x03
    2f84:	9c 81       	ldd	r25, Y+4	; 0x04
    2f86:	00 97       	sbiw	r24, 0x00	; 0
    2f88:	61 f0       	breq	.+24     	; 0x2fa2 <GPIO_readPort+0x54>
    2f8a:	1e c0       	rjmp	.+60     	; 0x2fc8 <GPIO_readPort+0x7a>
    2f8c:	2b 81       	ldd	r18, Y+3	; 0x03
    2f8e:	3c 81       	ldd	r19, Y+4	; 0x04
    2f90:	22 30       	cpi	r18, 0x02	; 2
    2f92:	31 05       	cpc	r19, r1
    2f94:	81 f0       	breq	.+32     	; 0x2fb6 <GPIO_readPort+0x68>
    2f96:	8b 81       	ldd	r24, Y+3	; 0x03
    2f98:	9c 81       	ldd	r25, Y+4	; 0x04
    2f9a:	83 30       	cpi	r24, 0x03	; 3
    2f9c:	91 05       	cpc	r25, r1
    2f9e:	81 f0       	breq	.+32     	; 0x2fc0 <GPIO_readPort+0x72>
    2fa0:	13 c0       	rjmp	.+38     	; 0x2fc8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2fa2:	e9 e3       	ldi	r30, 0x39	; 57
    2fa4:	f0 e0       	ldi	r31, 0x00	; 0
    2fa6:	80 81       	ld	r24, Z
    2fa8:	89 83       	std	Y+1, r24	; 0x01
    2faa:	0e c0       	rjmp	.+28     	; 0x2fc8 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2fac:	e6 e3       	ldi	r30, 0x36	; 54
    2fae:	f0 e0       	ldi	r31, 0x00	; 0
    2fb0:	80 81       	ld	r24, Z
    2fb2:	89 83       	std	Y+1, r24	; 0x01
    2fb4:	09 c0       	rjmp	.+18     	; 0x2fc8 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2fb6:	e3 e3       	ldi	r30, 0x33	; 51
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	80 81       	ld	r24, Z
    2fbc:	89 83       	std	Y+1, r24	; 0x01
    2fbe:	04 c0       	rjmp	.+8      	; 0x2fc8 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2fc0:	e0 e3       	ldi	r30, 0x30	; 48
    2fc2:	f0 e0       	ldi	r31, 0x00	; 0
    2fc4:	80 81       	ld	r24, Z
    2fc6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2fc8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fca:	0f 90       	pop	r0
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	cf 91       	pop	r28
    2fd4:	df 91       	pop	r29
    2fd6:	08 95       	ret

00002fd8 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2fd8:	df 93       	push	r29
    2fda:	cf 93       	push	r28
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <TWI_init+0x6>
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
    2fe2:	9a 83       	std	Y+2, r25	; 0x02
    2fe4:	89 83       	std	Y+1, r24	; 0x01
    /* Configuring Bit Rate */
    TWBR = Config_Ptr->address;
    2fe6:	a0 e2       	ldi	r26, 0x20	; 32
    2fe8:	b0 e0       	ldi	r27, 0x00	; 0
    2fea:	e9 81       	ldd	r30, Y+1	; 0x01
    2fec:	fa 81       	ldd	r31, Y+2	; 0x02
    2fee:	80 81       	ld	r24, Z
    2ff0:	8c 93       	st	X, r24

	TWSR = Config_Ptr->bit_rate;
    2ff2:	a1 e2       	ldi	r26, 0x21	; 33
    2ff4:	b0 e0       	ldi	r27, 0x00	; 0
    2ff6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ff8:	fa 81       	ldd	r31, Y+2	; 0x02
    2ffa:	81 81       	ldd	r24, Z+1	; 0x01
    2ffc:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    2ffe:	e2 e2       	ldi	r30, 0x22	; 34
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	82 e0       	ldi	r24, 0x02	; 2
    3004:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    3006:	e6 e5       	ldi	r30, 0x56	; 86
    3008:	f0 e0       	ldi	r31, 0x00	; 0
    300a:	84 e0       	ldi	r24, 0x04	; 4
    300c:	80 83       	st	Z, r24
}
    300e:	0f 90       	pop	r0
    3010:	0f 90       	pop	r0
    3012:	cf 91       	pop	r28
    3014:	df 91       	pop	r29
    3016:	08 95       	ret

00003018 <TWI_start>:

void TWI_start(void)
{
    3018:	df 93       	push	r29
    301a:	cf 93       	push	r28
    301c:	cd b7       	in	r28, 0x3d	; 61
    301e:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    3020:	e6 e5       	ldi	r30, 0x56	; 86
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	84 ea       	ldi	r24, 0xA4	; 164
    3026:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3028:	e6 e5       	ldi	r30, 0x56	; 86
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	80 81       	ld	r24, Z
    302e:	88 23       	and	r24, r24
    3030:	dc f7       	brge	.-10     	; 0x3028 <TWI_start+0x10>
}
    3032:	cf 91       	pop	r28
    3034:	df 91       	pop	r29
    3036:	08 95       	ret

00003038 <TWI_stop>:

void TWI_stop(void)
{
    3038:	df 93       	push	r29
    303a:	cf 93       	push	r28
    303c:	cd b7       	in	r28, 0x3d	; 61
    303e:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    3040:	e6 e5       	ldi	r30, 0x56	; 86
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	84 e9       	ldi	r24, 0x94	; 148
    3046:	80 83       	st	Z, r24
}
    3048:	cf 91       	pop	r28
    304a:	df 91       	pop	r29
    304c:	08 95       	ret

0000304e <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    304e:	df 93       	push	r29
    3050:	cf 93       	push	r28
    3052:	0f 92       	push	r0
    3054:	cd b7       	in	r28, 0x3d	; 61
    3056:	de b7       	in	r29, 0x3e	; 62
    3058:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    305a:	e3 e2       	ldi	r30, 0x23	; 35
    305c:	f0 e0       	ldi	r31, 0x00	; 0
    305e:	89 81       	ldd	r24, Y+1	; 0x01
    3060:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    3062:	e6 e5       	ldi	r30, 0x56	; 86
    3064:	f0 e0       	ldi	r31, 0x00	; 0
    3066:	84 e8       	ldi	r24, 0x84	; 132
    3068:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    306a:	e6 e5       	ldi	r30, 0x56	; 86
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	80 81       	ld	r24, Z
    3070:	88 23       	and	r24, r24
    3072:	dc f7       	brge	.-10     	; 0x306a <TWI_writeByte+0x1c>
}
    3074:	0f 90       	pop	r0
    3076:	cf 91       	pop	r28
    3078:	df 91       	pop	r29
    307a:	08 95       	ret

0000307c <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    307c:	df 93       	push	r29
    307e:	cf 93       	push	r28
    3080:	cd b7       	in	r28, 0x3d	; 61
    3082:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    3084:	e6 e5       	ldi	r30, 0x56	; 86
    3086:	f0 e0       	ldi	r31, 0x00	; 0
    3088:	84 ec       	ldi	r24, 0xC4	; 196
    308a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    308c:	e6 e5       	ldi	r30, 0x56	; 86
    308e:	f0 e0       	ldi	r31, 0x00	; 0
    3090:	80 81       	ld	r24, Z
    3092:	88 23       	and	r24, r24
    3094:	dc f7       	brge	.-10     	; 0x308c <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    3096:	e3 e2       	ldi	r30, 0x23	; 35
    3098:	f0 e0       	ldi	r31, 0x00	; 0
    309a:	80 81       	ld	r24, Z
}
    309c:	cf 91       	pop	r28
    309e:	df 91       	pop	r29
    30a0:	08 95       	ret

000030a2 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    30a2:	df 93       	push	r29
    30a4:	cf 93       	push	r28
    30a6:	cd b7       	in	r28, 0x3d	; 61
    30a8:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    30aa:	e6 e5       	ldi	r30, 0x56	; 86
    30ac:	f0 e0       	ldi	r31, 0x00	; 0
    30ae:	84 e8       	ldi	r24, 0x84	; 132
    30b0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    30b2:	e6 e5       	ldi	r30, 0x56	; 86
    30b4:	f0 e0       	ldi	r31, 0x00	; 0
    30b6:	80 81       	ld	r24, Z
    30b8:	88 23       	and	r24, r24
    30ba:	dc f7       	brge	.-10     	; 0x30b2 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    30bc:	e3 e2       	ldi	r30, 0x23	; 35
    30be:	f0 e0       	ldi	r31, 0x00	; 0
    30c0:	80 81       	ld	r24, Z
}
    30c2:	cf 91       	pop	r28
    30c4:	df 91       	pop	r29
    30c6:	08 95       	ret

000030c8 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    30c8:	df 93       	push	r29
    30ca:	cf 93       	push	r28
    30cc:	0f 92       	push	r0
    30ce:	cd b7       	in	r28, 0x3d	; 61
    30d0:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    30d2:	e1 e2       	ldi	r30, 0x21	; 33
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	80 81       	ld	r24, Z
    30d8:	88 7f       	andi	r24, 0xF8	; 248
    30da:	89 83       	std	Y+1, r24	; 0x01
    return status;
    30dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    30de:	0f 90       	pop	r0
    30e0:	cf 91       	pop	r28
    30e2:	df 91       	pop	r29
    30e4:	08 95       	ret

000030e6 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    30e6:	df 93       	push	r29
    30e8:	cf 93       	push	r28
    30ea:	00 d0       	rcall	.+0      	; 0x30ec <UART_init+0x6>
    30ec:	00 d0       	rcall	.+0      	; 0x30ee <UART_init+0x8>
    30ee:	cd b7       	in	r28, 0x3d	; 61
    30f0:	de b7       	in	r29, 0x3e	; 62
    30f2:	9c 83       	std	Y+4, r25	; 0x04
    30f4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    30f6:	1a 82       	std	Y+2, r1	; 0x02
    30f8:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    30fa:	eb e2       	ldi	r30, 0x2B	; 43
    30fc:	f0 e0       	ldi	r31, 0x00	; 0
    30fe:	82 e0       	ldi	r24, 0x02	; 2
    3100:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 is configured according to the chosen number of data bits
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	if (Config_Ptr->bit_data == nine_bit)
    3102:	eb 81       	ldd	r30, Y+3	; 0x03
    3104:	fc 81       	ldd	r31, Y+4	; 0x04
    3106:	80 81       	ld	r24, Z
    3108:	87 30       	cpi	r24, 0x07	; 7
    310a:	29 f4       	brne	.+10     	; 0x3116 <UART_init+0x30>
		UCSRB = (1<<RXEN) | (1<<TXEN) | (1<<UCSZ2) | (1<<RXB8) | (1<<TXB8);
    310c:	ea e2       	ldi	r30, 0x2A	; 42
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	8f e1       	ldi	r24, 0x1F	; 31
    3112:	80 83       	st	Z, r24
    3114:	04 c0       	rjmp	.+8      	; 0x311e <UART_init+0x38>
	else
		UCSRB = (1<<RXEN) | (1<<TXEN);
    3116:	ea e2       	ldi	r30, 0x2A	; 42
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	88 e1       	ldi	r24, 0x18	; 24
    311c:	80 83       	st	Z, r24
	 * UPM1:0  Configurable
	 * USBS    Configurable
	 * UCSZ1:0 Configurable
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    311e:	e0 e4       	ldi	r30, 0x40	; 64
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	80 e8       	ldi	r24, 0x80	; 128
    3124:	80 83       	st	Z, r24

	if (Config_Ptr->parity == disabled) {
    3126:	eb 81       	ldd	r30, Y+3	; 0x03
    3128:	fc 81       	ldd	r31, Y+4	; 0x04
    312a:	81 81       	ldd	r24, Z+1	; 0x01
    312c:	88 23       	and	r24, r24
    312e:	79 f4       	brne	.+30     	; 0x314e <UART_init+0x68>
		CLEAR_BIT(UCSRC, UPM0);
    3130:	a0 e4       	ldi	r26, 0x40	; 64
    3132:	b0 e0       	ldi	r27, 0x00	; 0
    3134:	e0 e4       	ldi	r30, 0x40	; 64
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	80 81       	ld	r24, Z
    313a:	8f 7e       	andi	r24, 0xEF	; 239
    313c:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC, UPM1);
    313e:	a0 e4       	ldi	r26, 0x40	; 64
    3140:	b0 e0       	ldi	r27, 0x00	; 0
    3142:	e0 e4       	ldi	r30, 0x40	; 64
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	80 81       	ld	r24, Z
    3148:	8f 7d       	andi	r24, 0xDF	; 223
    314a:	8c 93       	st	X, r24
    314c:	27 c0       	rjmp	.+78     	; 0x319c <UART_init+0xb6>
	}
	else if (Config_Ptr->parity == even_parity) {
    314e:	eb 81       	ldd	r30, Y+3	; 0x03
    3150:	fc 81       	ldd	r31, Y+4	; 0x04
    3152:	81 81       	ldd	r24, Z+1	; 0x01
    3154:	82 30       	cpi	r24, 0x02	; 2
    3156:	79 f4       	brne	.+30     	; 0x3176 <UART_init+0x90>
		CLEAR_BIT(UCSRC, UPM0);
    3158:	a0 e4       	ldi	r26, 0x40	; 64
    315a:	b0 e0       	ldi	r27, 0x00	; 0
    315c:	e0 e4       	ldi	r30, 0x40	; 64
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	80 81       	ld	r24, Z
    3162:	8f 7e       	andi	r24, 0xEF	; 239
    3164:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UPM1);
    3166:	a0 e4       	ldi	r26, 0x40	; 64
    3168:	b0 e0       	ldi	r27, 0x00	; 0
    316a:	e0 e4       	ldi	r30, 0x40	; 64
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	80 81       	ld	r24, Z
    3170:	80 62       	ori	r24, 0x20	; 32
    3172:	8c 93       	st	X, r24
    3174:	13 c0       	rjmp	.+38     	; 0x319c <UART_init+0xb6>
	}
	else if (Config_Ptr->parity == odd_parity) {
    3176:	eb 81       	ldd	r30, Y+3	; 0x03
    3178:	fc 81       	ldd	r31, Y+4	; 0x04
    317a:	81 81       	ldd	r24, Z+1	; 0x01
    317c:	83 30       	cpi	r24, 0x03	; 3
    317e:	71 f4       	brne	.+28     	; 0x319c <UART_init+0xb6>
		SET_BIT(UCSRC, UPM0);
    3180:	a0 e4       	ldi	r26, 0x40	; 64
    3182:	b0 e0       	ldi	r27, 0x00	; 0
    3184:	e0 e4       	ldi	r30, 0x40	; 64
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	80 81       	ld	r24, Z
    318a:	80 61       	ori	r24, 0x10	; 16
    318c:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UPM1);
    318e:	a0 e4       	ldi	r26, 0x40	; 64
    3190:	b0 e0       	ldi	r27, 0x00	; 0
    3192:	e0 e4       	ldi	r30, 0x40	; 64
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	80 81       	ld	r24, Z
    3198:	80 62       	ori	r24, 0x20	; 32
    319a:	8c 93       	st	X, r24
	}
	
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bit)<<3);
    319c:	a0 e4       	ldi	r26, 0x40	; 64
    319e:	b0 e0       	ldi	r27, 0x00	; 0
    31a0:	e0 e4       	ldi	r30, 0x40	; 64
    31a2:	f0 e0       	ldi	r31, 0x00	; 0
    31a4:	80 81       	ld	r24, Z
    31a6:	28 2f       	mov	r18, r24
    31a8:	27 7f       	andi	r18, 0xF7	; 247
    31aa:	eb 81       	ldd	r30, Y+3	; 0x03
    31ac:	fc 81       	ldd	r31, Y+4	; 0x04
    31ae:	82 81       	ldd	r24, Z+2	; 0x02
    31b0:	88 2f       	mov	r24, r24
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	88 0f       	add	r24, r24
    31b6:	99 1f       	adc	r25, r25
    31b8:	88 0f       	add	r24, r24
    31ba:	99 1f       	adc	r25, r25
    31bc:	88 0f       	add	r24, r24
    31be:	99 1f       	adc	r25, r25
    31c0:	82 2b       	or	r24, r18
    31c2:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF9) | (((Config_Ptr->bit_data) & 0x03)<<1);
    31c4:	a0 e4       	ldi	r26, 0x40	; 64
    31c6:	b0 e0       	ldi	r27, 0x00	; 0
    31c8:	e0 e4       	ldi	r30, 0x40	; 64
    31ca:	f0 e0       	ldi	r31, 0x00	; 0
    31cc:	80 81       	ld	r24, Z
    31ce:	28 2f       	mov	r18, r24
    31d0:	29 7f       	andi	r18, 0xF9	; 249
    31d2:	eb 81       	ldd	r30, Y+3	; 0x03
    31d4:	fc 81       	ldd	r31, Y+4	; 0x04
    31d6:	80 81       	ld	r24, Z
    31d8:	88 2f       	mov	r24, r24
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	83 70       	andi	r24, 0x03	; 3
    31de:	90 70       	andi	r25, 0x00	; 0
    31e0:	88 0f       	add	r24, r24
    31e2:	99 1f       	adc	r25, r25
    31e4:	82 2b       	or	r24, r18
    31e6:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->UART_BaudRateType * 8UL))) - 1);
    31e8:	eb 81       	ldd	r30, Y+3	; 0x03
    31ea:	fc 81       	ldd	r31, Y+4	; 0x04
    31ec:	83 81       	ldd	r24, Z+3	; 0x03
    31ee:	94 81       	ldd	r25, Z+4	; 0x04
    31f0:	a5 81       	ldd	r26, Z+5	; 0x05
    31f2:	b6 81       	ldd	r27, Z+6	; 0x06
    31f4:	88 0f       	add	r24, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	aa 1f       	adc	r26, r26
    31fa:	bb 1f       	adc	r27, r27
    31fc:	88 0f       	add	r24, r24
    31fe:	99 1f       	adc	r25, r25
    3200:	aa 1f       	adc	r26, r26
    3202:	bb 1f       	adc	r27, r27
    3204:	88 0f       	add	r24, r24
    3206:	99 1f       	adc	r25, r25
    3208:	aa 1f       	adc	r26, r26
    320a:	bb 1f       	adc	r27, r27
    320c:	9c 01       	movw	r18, r24
    320e:	ad 01       	movw	r20, r26
    3210:	80 e0       	ldi	r24, 0x00	; 0
    3212:	92 e1       	ldi	r25, 0x12	; 18
    3214:	aa e7       	ldi	r26, 0x7A	; 122
    3216:	b0 e0       	ldi	r27, 0x00	; 0
    3218:	bc 01       	movw	r22, r24
    321a:	cd 01       	movw	r24, r26
    321c:	0e 94 cc 19 	call	0x3398	; 0x3398 <__udivmodsi4>
    3220:	da 01       	movw	r26, r20
    3222:	c9 01       	movw	r24, r18
    3224:	01 97       	sbiw	r24, 0x01	; 1
    3226:	9a 83       	std	Y+2, r25	; 0x02
    3228:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    322a:	e0 e4       	ldi	r30, 0x40	; 64
    322c:	f0 e0       	ldi	r31, 0x00	; 0
    322e:	89 81       	ldd	r24, Y+1	; 0x01
    3230:	9a 81       	ldd	r25, Y+2	; 0x02
    3232:	89 2f       	mov	r24, r25
    3234:	99 27       	eor	r25, r25
    3236:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3238:	e9 e2       	ldi	r30, 0x29	; 41
    323a:	f0 e0       	ldi	r31, 0x00	; 0
    323c:	89 81       	ldd	r24, Y+1	; 0x01
    323e:	80 83       	st	Z, r24
}
    3240:	0f 90       	pop	r0
    3242:	0f 90       	pop	r0
    3244:	0f 90       	pop	r0
    3246:	0f 90       	pop	r0
    3248:	cf 91       	pop	r28
    324a:	df 91       	pop	r29
    324c:	08 95       	ret

0000324e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    324e:	df 93       	push	r29
    3250:	cf 93       	push	r28
    3252:	0f 92       	push	r0
    3254:	cd b7       	in	r28, 0x3d	; 61
    3256:	de b7       	in	r29, 0x3e	; 62
    3258:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    325a:	eb e2       	ldi	r30, 0x2B	; 43
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	80 81       	ld	r24, Z
    3260:	88 2f       	mov	r24, r24
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	80 72       	andi	r24, 0x20	; 32
    3266:	90 70       	andi	r25, 0x00	; 0
    3268:	00 97       	sbiw	r24, 0x00	; 0
    326a:	b9 f3       	breq	.-18     	; 0x325a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    326c:	ec e2       	ldi	r30, 0x2C	; 44
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	89 81       	ldd	r24, Y+1	; 0x01
    3272:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3274:	0f 90       	pop	r0
    3276:	cf 91       	pop	r28
    3278:	df 91       	pop	r29
    327a:	08 95       	ret

0000327c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    327c:	df 93       	push	r29
    327e:	cf 93       	push	r28
    3280:	cd b7       	in	r28, 0x3d	; 61
    3282:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3284:	eb e2       	ldi	r30, 0x2B	; 43
    3286:	f0 e0       	ldi	r31, 0x00	; 0
    3288:	80 81       	ld	r24, Z
    328a:	88 23       	and	r24, r24
    328c:	dc f7       	brge	.-10     	; 0x3284 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    328e:	ec e2       	ldi	r30, 0x2C	; 44
    3290:	f0 e0       	ldi	r31, 0x00	; 0
    3292:	80 81       	ld	r24, Z
}
    3294:	cf 91       	pop	r28
    3296:	df 91       	pop	r29
    3298:	08 95       	ret

0000329a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    329a:	df 93       	push	r29
    329c:	cf 93       	push	r28
    329e:	00 d0       	rcall	.+0      	; 0x32a0 <UART_sendString+0x6>
    32a0:	0f 92       	push	r0
    32a2:	cd b7       	in	r28, 0x3d	; 61
    32a4:	de b7       	in	r29, 0x3e	; 62
    32a6:	9b 83       	std	Y+3, r25	; 0x03
    32a8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    32aa:	19 82       	std	Y+1, r1	; 0x01
    32ac:	0e c0       	rjmp	.+28     	; 0x32ca <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    32ae:	89 81       	ldd	r24, Y+1	; 0x01
    32b0:	28 2f       	mov	r18, r24
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	8a 81       	ldd	r24, Y+2	; 0x02
    32b6:	9b 81       	ldd	r25, Y+3	; 0x03
    32b8:	fc 01       	movw	r30, r24
    32ba:	e2 0f       	add	r30, r18
    32bc:	f3 1f       	adc	r31, r19
    32be:	80 81       	ld	r24, Z
    32c0:	0e 94 27 19 	call	0x324e	; 0x324e <UART_sendByte>
		i++;
    32c4:	89 81       	ldd	r24, Y+1	; 0x01
    32c6:	8f 5f       	subi	r24, 0xFF	; 255
    32c8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    32ca:	89 81       	ldd	r24, Y+1	; 0x01
    32cc:	28 2f       	mov	r18, r24
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	8a 81       	ldd	r24, Y+2	; 0x02
    32d2:	9b 81       	ldd	r25, Y+3	; 0x03
    32d4:	fc 01       	movw	r30, r24
    32d6:	e2 0f       	add	r30, r18
    32d8:	f3 1f       	adc	r31, r19
    32da:	80 81       	ld	r24, Z
    32dc:	88 23       	and	r24, r24
    32de:	39 f7       	brne	.-50     	; 0x32ae <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    32e0:	0f 90       	pop	r0
    32e2:	0f 90       	pop	r0
    32e4:	0f 90       	pop	r0
    32e6:	cf 91       	pop	r28
    32e8:	df 91       	pop	r29
    32ea:	08 95       	ret

000032ec <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    32ec:	0f 93       	push	r16
    32ee:	1f 93       	push	r17
    32f0:	df 93       	push	r29
    32f2:	cf 93       	push	r28
    32f4:	00 d0       	rcall	.+0      	; 0x32f6 <UART_receiveString+0xa>
    32f6:	0f 92       	push	r0
    32f8:	cd b7       	in	r28, 0x3d	; 61
    32fa:	de b7       	in	r29, 0x3e	; 62
    32fc:	9b 83       	std	Y+3, r25	; 0x03
    32fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3300:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3302:	89 81       	ldd	r24, Y+1	; 0x01
    3304:	28 2f       	mov	r18, r24
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	8a 81       	ldd	r24, Y+2	; 0x02
    330a:	9b 81       	ldd	r25, Y+3	; 0x03
    330c:	8c 01       	movw	r16, r24
    330e:	02 0f       	add	r16, r18
    3310:	13 1f       	adc	r17, r19
    3312:	0e 94 3e 19 	call	0x327c	; 0x327c <UART_recieveByte>
    3316:	f8 01       	movw	r30, r16
    3318:	80 83       	st	Z, r24
    331a:	0f c0       	rjmp	.+30     	; 0x333a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    331c:	89 81       	ldd	r24, Y+1	; 0x01
    331e:	8f 5f       	subi	r24, 0xFF	; 255
    3320:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3322:	89 81       	ldd	r24, Y+1	; 0x01
    3324:	28 2f       	mov	r18, r24
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	8a 81       	ldd	r24, Y+2	; 0x02
    332a:	9b 81       	ldd	r25, Y+3	; 0x03
    332c:	8c 01       	movw	r16, r24
    332e:	02 0f       	add	r16, r18
    3330:	13 1f       	adc	r17, r19
    3332:	0e 94 3e 19 	call	0x327c	; 0x327c <UART_recieveByte>
    3336:	f8 01       	movw	r30, r16
    3338:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    333a:	89 81       	ldd	r24, Y+1	; 0x01
    333c:	28 2f       	mov	r18, r24
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	8a 81       	ldd	r24, Y+2	; 0x02
    3342:	9b 81       	ldd	r25, Y+3	; 0x03
    3344:	fc 01       	movw	r30, r24
    3346:	e2 0f       	add	r30, r18
    3348:	f3 1f       	adc	r31, r19
    334a:	80 81       	ld	r24, Z
    334c:	83 32       	cpi	r24, 0x23	; 35
    334e:	31 f7       	brne	.-52     	; 0x331c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3350:	89 81       	ldd	r24, Y+1	; 0x01
    3352:	28 2f       	mov	r18, r24
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	8a 81       	ldd	r24, Y+2	; 0x02
    3358:	9b 81       	ldd	r25, Y+3	; 0x03
    335a:	fc 01       	movw	r30, r24
    335c:	e2 0f       	add	r30, r18
    335e:	f3 1f       	adc	r31, r19
    3360:	10 82       	st	Z, r1
}
    3362:	0f 90       	pop	r0
    3364:	0f 90       	pop	r0
    3366:	0f 90       	pop	r0
    3368:	cf 91       	pop	r28
    336a:	df 91       	pop	r29
    336c:	1f 91       	pop	r17
    336e:	0f 91       	pop	r16
    3370:	08 95       	ret

00003372 <__divmodhi4>:
    3372:	97 fb       	bst	r25, 7
    3374:	09 2e       	mov	r0, r25
    3376:	07 26       	eor	r0, r23
    3378:	0a d0       	rcall	.+20     	; 0x338e <__divmodhi4_neg1>
    337a:	77 fd       	sbrc	r23, 7
    337c:	04 d0       	rcall	.+8      	; 0x3386 <__divmodhi4_neg2>
    337e:	2e d0       	rcall	.+92     	; 0x33dc <__udivmodhi4>
    3380:	06 d0       	rcall	.+12     	; 0x338e <__divmodhi4_neg1>
    3382:	00 20       	and	r0, r0
    3384:	1a f4       	brpl	.+6      	; 0x338c <__divmodhi4_exit>

00003386 <__divmodhi4_neg2>:
    3386:	70 95       	com	r23
    3388:	61 95       	neg	r22
    338a:	7f 4f       	sbci	r23, 0xFF	; 255

0000338c <__divmodhi4_exit>:
    338c:	08 95       	ret

0000338e <__divmodhi4_neg1>:
    338e:	f6 f7       	brtc	.-4      	; 0x338c <__divmodhi4_exit>
    3390:	90 95       	com	r25
    3392:	81 95       	neg	r24
    3394:	9f 4f       	sbci	r25, 0xFF	; 255
    3396:	08 95       	ret

00003398 <__udivmodsi4>:
    3398:	a1 e2       	ldi	r26, 0x21	; 33
    339a:	1a 2e       	mov	r1, r26
    339c:	aa 1b       	sub	r26, r26
    339e:	bb 1b       	sub	r27, r27
    33a0:	fd 01       	movw	r30, r26
    33a2:	0d c0       	rjmp	.+26     	; 0x33be <__udivmodsi4_ep>

000033a4 <__udivmodsi4_loop>:
    33a4:	aa 1f       	adc	r26, r26
    33a6:	bb 1f       	adc	r27, r27
    33a8:	ee 1f       	adc	r30, r30
    33aa:	ff 1f       	adc	r31, r31
    33ac:	a2 17       	cp	r26, r18
    33ae:	b3 07       	cpc	r27, r19
    33b0:	e4 07       	cpc	r30, r20
    33b2:	f5 07       	cpc	r31, r21
    33b4:	20 f0       	brcs	.+8      	; 0x33be <__udivmodsi4_ep>
    33b6:	a2 1b       	sub	r26, r18
    33b8:	b3 0b       	sbc	r27, r19
    33ba:	e4 0b       	sbc	r30, r20
    33bc:	f5 0b       	sbc	r31, r21

000033be <__udivmodsi4_ep>:
    33be:	66 1f       	adc	r22, r22
    33c0:	77 1f       	adc	r23, r23
    33c2:	88 1f       	adc	r24, r24
    33c4:	99 1f       	adc	r25, r25
    33c6:	1a 94       	dec	r1
    33c8:	69 f7       	brne	.-38     	; 0x33a4 <__udivmodsi4_loop>
    33ca:	60 95       	com	r22
    33cc:	70 95       	com	r23
    33ce:	80 95       	com	r24
    33d0:	90 95       	com	r25
    33d2:	9b 01       	movw	r18, r22
    33d4:	ac 01       	movw	r20, r24
    33d6:	bd 01       	movw	r22, r26
    33d8:	cf 01       	movw	r24, r30
    33da:	08 95       	ret

000033dc <__udivmodhi4>:
    33dc:	aa 1b       	sub	r26, r26
    33de:	bb 1b       	sub	r27, r27
    33e0:	51 e1       	ldi	r21, 0x11	; 17
    33e2:	07 c0       	rjmp	.+14     	; 0x33f2 <__udivmodhi4_ep>

000033e4 <__udivmodhi4_loop>:
    33e4:	aa 1f       	adc	r26, r26
    33e6:	bb 1f       	adc	r27, r27
    33e8:	a6 17       	cp	r26, r22
    33ea:	b7 07       	cpc	r27, r23
    33ec:	10 f0       	brcs	.+4      	; 0x33f2 <__udivmodhi4_ep>
    33ee:	a6 1b       	sub	r26, r22
    33f0:	b7 0b       	sbc	r27, r23

000033f2 <__udivmodhi4_ep>:
    33f2:	88 1f       	adc	r24, r24
    33f4:	99 1f       	adc	r25, r25
    33f6:	5a 95       	dec	r21
    33f8:	a9 f7       	brne	.-22     	; 0x33e4 <__udivmodhi4_loop>
    33fa:	80 95       	com	r24
    33fc:	90 95       	com	r25
    33fe:	bc 01       	movw	r22, r24
    3400:	cd 01       	movw	r24, r26
    3402:	08 95       	ret

00003404 <__prologue_saves__>:
    3404:	2f 92       	push	r2
    3406:	3f 92       	push	r3
    3408:	4f 92       	push	r4
    340a:	5f 92       	push	r5
    340c:	6f 92       	push	r6
    340e:	7f 92       	push	r7
    3410:	8f 92       	push	r8
    3412:	9f 92       	push	r9
    3414:	af 92       	push	r10
    3416:	bf 92       	push	r11
    3418:	cf 92       	push	r12
    341a:	df 92       	push	r13
    341c:	ef 92       	push	r14
    341e:	ff 92       	push	r15
    3420:	0f 93       	push	r16
    3422:	1f 93       	push	r17
    3424:	cf 93       	push	r28
    3426:	df 93       	push	r29
    3428:	cd b7       	in	r28, 0x3d	; 61
    342a:	de b7       	in	r29, 0x3e	; 62
    342c:	ca 1b       	sub	r28, r26
    342e:	db 0b       	sbc	r29, r27
    3430:	0f b6       	in	r0, 0x3f	; 63
    3432:	f8 94       	cli
    3434:	de bf       	out	0x3e, r29	; 62
    3436:	0f be       	out	0x3f, r0	; 63
    3438:	cd bf       	out	0x3d, r28	; 61
    343a:	09 94       	ijmp

0000343c <__epilogue_restores__>:
    343c:	2a 88       	ldd	r2, Y+18	; 0x12
    343e:	39 88       	ldd	r3, Y+17	; 0x11
    3440:	48 88       	ldd	r4, Y+16	; 0x10
    3442:	5f 84       	ldd	r5, Y+15	; 0x0f
    3444:	6e 84       	ldd	r6, Y+14	; 0x0e
    3446:	7d 84       	ldd	r7, Y+13	; 0x0d
    3448:	8c 84       	ldd	r8, Y+12	; 0x0c
    344a:	9b 84       	ldd	r9, Y+11	; 0x0b
    344c:	aa 84       	ldd	r10, Y+10	; 0x0a
    344e:	b9 84       	ldd	r11, Y+9	; 0x09
    3450:	c8 84       	ldd	r12, Y+8	; 0x08
    3452:	df 80       	ldd	r13, Y+7	; 0x07
    3454:	ee 80       	ldd	r14, Y+6	; 0x06
    3456:	fd 80       	ldd	r15, Y+5	; 0x05
    3458:	0c 81       	ldd	r16, Y+4	; 0x04
    345a:	1b 81       	ldd	r17, Y+3	; 0x03
    345c:	aa 81       	ldd	r26, Y+2	; 0x02
    345e:	b9 81       	ldd	r27, Y+1	; 0x01
    3460:	ce 0f       	add	r28, r30
    3462:	d1 1d       	adc	r29, r1
    3464:	0f b6       	in	r0, 0x3f	; 63
    3466:	f8 94       	cli
    3468:	de bf       	out	0x3e, r29	; 62
    346a:	0f be       	out	0x3f, r0	; 63
    346c:	cd bf       	out	0x3d, r28	; 61
    346e:	ed 01       	movw	r28, r26
    3470:	08 95       	ret

00003472 <_exit>:
    3472:	f8 94       	cli

00003474 <__stop_program>:
    3474:	ff cf       	rjmp	.-2      	; 0x3474 <__stop_program>
